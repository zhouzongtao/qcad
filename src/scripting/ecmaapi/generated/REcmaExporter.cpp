// ***** AUTOGENERATED CODE, DO NOT EDIT *****
            // ***** This class is not copyable.
        
        #include "REcmaExporter.h"
        #include "RMetaTypes.h"
        #include "../REcmaHelper.h"

        // forwards declarations mapped to includes
        
                #include "RArc.h"
            
                #include "RCircle.h"
            
                #include "RDocument.h"
            
                #include "REllipse.h"
            
                #include "RLine.h"
            
                #include "RLinetype.h"
            
                #include "RLinetypePattern.h"
            
                #include "RMessageHandler.h"
            
                #include "RPainterPathSource.h"
            
                #include "RPoint.h"
            
                #include "RPolyline.h"
            
                #include "RProgressHandler.h"
            
                #include "RRay.h"
            
                #include "RSpline.h"
            
                #include "RTriangle.h"
            
                #include "RVector.h"
            
                #include "RXLine.h"
            
            
        // includes for base ecma wrapper classes
         void REcmaExporter::initEcma(QScriptEngine& engine, QScriptValue* proto 
    
    ) 
    
    {

    bool protoCreated = false;
    if(proto == NULL){
        proto = new QScriptValue(engine.newVariant(qVariantFromValue(
                (RExporter*) 0)));
        protoCreated = true;
    }

    

    QScriptValue fun;

    // toString:
    REcmaHelper::registerFunction(&engine, proto, toString, "toString");
    

    // destroy:
    REcmaHelper::registerFunction(&engine, proto, destroy, "destroy");
    

    // get class name
    REcmaHelper::registerFunction(&engine, proto, getClassName, "getClassName");
    

    // conversion to all base classes (multiple inheritance):
    REcmaHelper::registerFunction(&engine, proto, getBaseClasses, "getBaseClasses");
    

    // properties:
    

    // methods:
    
            REcmaHelper::registerFunction(&engine, proto, getErrorMessage, "getErrorMessage");
            
            REcmaHelper::registerFunction(&engine, proto, setLayerSource, "setLayerSource");
            
            REcmaHelper::registerFunction(&engine, proto, setBlockSource, "setBlockSource");
            
            REcmaHelper::registerFunction(&engine, proto, getDocument, "getDocument");
            
            REcmaHelper::registerFunction(&engine, proto, setProjectionRenderingHint, "setProjectionRenderingHint");
            
            REcmaHelper::registerFunction(&engine, proto, getProjectionRenderingHint, "getProjectionRenderingHint");
            
            REcmaHelper::registerFunction(&engine, proto, setClipping, "setClipping");
            
            REcmaHelper::registerFunction(&engine, proto, getClipping, "getClipping");
            
            REcmaHelper::registerFunction(&engine, proto, setPen, "setPen");
            
            REcmaHelper::registerFunction(&engine, proto, getPen, "getPen");
            
            REcmaHelper::registerFunction(&engine, proto, setBrush, "setBrush");
            
            REcmaHelper::registerFunction(&engine, proto, getBrush, "getBrush");
            
            REcmaHelper::registerFunction(&engine, proto, getColor, "getColor");
            
            REcmaHelper::registerFunction(&engine, proto, setEntityAttributes, "setEntityAttributes");
            
            REcmaHelper::registerFunction(&engine, proto, setStyle, "setStyle");
            
            REcmaHelper::registerFunction(&engine, proto, setBrushStyle, "setBrushStyle");
            
            REcmaHelper::registerFunction(&engine, proto, setDashPattern, "setDashPattern");
            
            REcmaHelper::registerFunction(&engine, proto, setColor, "setColor");
            
            REcmaHelper::registerFunction(&engine, proto, setLineweight, "setLineweight");
            
            REcmaHelper::registerFunction(&engine, proto, setLinetypeId, "setLinetypeId");
            
            REcmaHelper::registerFunction(&engine, proto, setLinetypePattern, "setLinetypePattern");
            
            REcmaHelper::registerFunction(&engine, proto, getLinetypePattern, "getLinetypePattern");
            
            REcmaHelper::registerFunction(&engine, proto, getBlockRefOrEntity, "getBlockRefOrEntity");
            
            REcmaHelper::registerFunction(&engine, proto, getBlockRefOrEntityId, "getBlockRefOrEntityId");
            
            REcmaHelper::registerFunction(&engine, proto, getEntity, "getEntity");
            
            REcmaHelper::registerFunction(&engine, proto, getCurrentBlockRef, "getCurrentBlockRef");
            
            REcmaHelper::registerFunction(&engine, proto, getCurrentViewport, "getCurrentViewport");
            
            REcmaHelper::registerFunction(&engine, proto, getBlockRefViewportStack, "getBlockRefViewportStack");
            
            REcmaHelper::registerFunction(&engine, proto, isEntitySelected, "isEntitySelected");
            
            REcmaHelper::registerFunction(&engine, proto, isPatternContinuous, "isPatternContinuous");
            
            REcmaHelper::registerFunction(&engine, proto, startExport, "startExport");
            
            REcmaHelper::registerFunction(&engine, proto, endExport, "endExport");
            
            REcmaHelper::registerFunction(&engine, proto, exportDocument, "exportDocument");
            
            REcmaHelper::registerFunction(&engine, proto, exportDocumentSettings, "exportDocumentSettings");
            
            REcmaHelper::registerFunction(&engine, proto, exportDocumentSetting, "exportDocumentSetting");
            
            REcmaHelper::registerFunction(&engine, proto, exportIntListWithName, "exportIntListWithName");
            
            REcmaHelper::registerFunction(&engine, proto, exportLayers, "exportLayers");
            
            REcmaHelper::registerFunction(&engine, proto, exportLayerStates, "exportLayerStates");
            
            REcmaHelper::registerFunction(&engine, proto, exportBlocks, "exportBlocks");
            
            REcmaHelper::registerFunction(&engine, proto, exportViews, "exportViews");
            
            REcmaHelper::registerFunction(&engine, proto, exportLinetypes, "exportLinetypes");
            
            REcmaHelper::registerFunction(&engine, proto, exportLayer, "exportLayer");
            
            REcmaHelper::registerFunction(&engine, proto, exportLayerState, "exportLayerState");
            
            REcmaHelper::registerFunction(&engine, proto, exportBlock, "exportBlock");
            
            REcmaHelper::registerFunction(&engine, proto, exportView, "exportView");
            
            REcmaHelper::registerFunction(&engine, proto, exportLinetype, "exportLinetype");
            
            REcmaHelper::registerFunction(&engine, proto, exportEntities, "exportEntities");
            
            REcmaHelper::registerFunction(&engine, proto, exportEntity, "exportEntity");
            
            REcmaHelper::registerFunction(&engine, proto, getEntityLayer, "getEntityLayer");
            
            REcmaHelper::registerFunction(&engine, proto, isVisible, "isVisible");
            
            REcmaHelper::registerFunction(&engine, proto, startEntity, "startEntity");
            
            REcmaHelper::registerFunction(&engine, proto, endEntity, "endEntity");
            
            REcmaHelper::registerFunction(&engine, proto, exportCurrentEntity, "exportCurrentEntity");
            
            REcmaHelper::registerFunction(&engine, proto, unexportEntity, "unexportEntity");
            
            REcmaHelper::registerFunction(&engine, proto, exportShapes, "exportShapes");
            
            REcmaHelper::registerFunction(&engine, proto, exportShape, "exportShape");
            
            REcmaHelper::registerFunction(&engine, proto, exportShapeSegment, "exportShapeSegment");
            
            REcmaHelper::registerFunction(&engine, proto, exportLine, "exportLine");
            
            REcmaHelper::registerFunction(&engine, proto, exportLineSegment, "exportLineSegment");
            
            REcmaHelper::registerFunction(&engine, proto, exportXLine, "exportXLine");
            
            REcmaHelper::registerFunction(&engine, proto, exportRay, "exportRay");
            
            REcmaHelper::registerFunction(&engine, proto, exportPoint, "exportPoint");
            
            REcmaHelper::registerFunction(&engine, proto, exportCircle, "exportCircle");
            
            REcmaHelper::registerFunction(&engine, proto, exportArc, "exportArc");
            
            REcmaHelper::registerFunction(&engine, proto, exportArcSegment, "exportArcSegment");
            
            REcmaHelper::registerFunction(&engine, proto, exportEllipse, "exportEllipse");
            
            REcmaHelper::registerFunction(&engine, proto, exportPolyline, "exportPolyline");
            
            REcmaHelper::registerFunction(&engine, proto, exportSpline, "exportSpline");
            
            REcmaHelper::registerFunction(&engine, proto, exportSplineSegment, "exportSplineSegment");
            
            REcmaHelper::registerFunction(&engine, proto, exportPainterPaths, "exportPainterPaths");
            
            REcmaHelper::registerFunction(&engine, proto, exportBoundingBoxPaths, "exportBoundingBoxPaths");
            
            REcmaHelper::registerFunction(&engine, proto, exportImage, "exportImage");
            
            REcmaHelper::registerFunction(&engine, proto, exportText, "exportText");
            
            REcmaHelper::registerFunction(&engine, proto, exportClipRectangle, "exportClipRectangle");
            
            REcmaHelper::registerFunction(&engine, proto, exportTransform, "exportTransform");
            
            REcmaHelper::registerFunction(&engine, proto, exportEndTransform, "exportEndTransform");
            
            REcmaHelper::registerFunction(&engine, proto, exportTranslation, "exportTranslation");
            
            REcmaHelper::registerFunction(&engine, proto, exportEndTranslation, "exportEndTranslation");
            
            REcmaHelper::registerFunction(&engine, proto, exportRotation, "exportRotation");
            
            REcmaHelper::registerFunction(&engine, proto, exportEndRotation, "exportEndRotation");
            
            REcmaHelper::registerFunction(&engine, proto, exportScale, "exportScale");
            
            REcmaHelper::registerFunction(&engine, proto, exportEndScale, "exportEndScale");
            
            REcmaHelper::registerFunction(&engine, proto, exportThickPolyline, "exportThickPolyline");
            
            REcmaHelper::registerFunction(&engine, proto, exportQuad, "exportQuad");
            
            REcmaHelper::registerFunction(&engine, proto, exportVerticalQuad, "exportVerticalQuad");
            
            REcmaHelper::registerFunction(&engine, proto, exportBox, "exportBox");
            
            REcmaHelper::registerFunction(&engine, proto, exportTriangle, "exportTriangle");
            
            REcmaHelper::registerFunction(&engine, proto, exportRectangle, "exportRectangle");
            
            REcmaHelper::registerFunction(&engine, proto, getLineTypePatternScale, "getLineTypePatternScale");
            
            REcmaHelper::registerFunction(&engine, proto, isTextRenderedAsText, "isTextRenderedAsText");
            
            REcmaHelper::registerFunction(&engine, proto, getEntityStack, "getEntityStack");
            
            REcmaHelper::registerFunction(&engine, proto, pushEntity, "pushEntity");
            
            REcmaHelper::registerFunction(&engine, proto, popEntity, "popEntity");
            
            REcmaHelper::registerFunction(&engine, proto, setDraftMode, "setDraftMode");
            
            REcmaHelper::registerFunction(&engine, proto, toggleDraftMode, "toggleDraftMode");
            
            REcmaHelper::registerFunction(&engine, proto, getDraftMode, "getDraftMode");
            
            REcmaHelper::registerFunction(&engine, proto, setTwoColorSelectedMode, "setTwoColorSelectedMode");
            
            REcmaHelper::registerFunction(&engine, proto, getTwoColorSelectedMode, "getTwoColorSelectedMode");
            
            REcmaHelper::registerFunction(&engine, proto, setScreenBasedLinetypes, "setScreenBasedLinetypes");
            
            REcmaHelper::registerFunction(&engine, proto, toggleScreenBasedLinetypes, "toggleScreenBasedLinetypes");
            
            REcmaHelper::registerFunction(&engine, proto, getScreenBasedLinetypes, "getScreenBasedLinetypes");
            
            REcmaHelper::registerFunction(&engine, proto, isVisualExporter, "isVisualExporter");
            
            REcmaHelper::registerFunction(&engine, proto, setVisualExporter, "setVisualExporter");
            
            REcmaHelper::registerFunction(&engine, proto, getPixelSizeHint, "getPixelSizeHint");
            
            REcmaHelper::registerFunction(&engine, proto, getCurrentPixelSizeHint, "getCurrentPixelSizeHint");
            
            REcmaHelper::registerFunction(&engine, proto, setPixelSizeHint, "setPixelSizeHint");
            
            REcmaHelper::registerFunction(&engine, proto, getPixelUnit, "getPixelUnit");
            
            REcmaHelper::registerFunction(&engine, proto, setPixelUnit, "setPixelUnit");
            
            REcmaHelper::registerFunction(&engine, proto, getPixelWidth, "getPixelWidth");
            
            REcmaHelper::registerFunction(&engine, proto, setPixelWidth, "setPixelWidth");
            
        engine.setDefaultPrototype(
            qMetaTypeId<RExporter*>(), *proto);

        
    

    QScriptValue ctor = engine.newFunction(createEcma, *proto, 2);
    
    // static methods:
    

    // static properties:
    

    // enum values:
    

    // enum conversions:
    
        
    // init class:
    engine.globalObject().setProperty("RExporter",
    ctor, QScriptValue::SkipInEnumeration);
    
    if( protoCreated ){
       delete proto;
    }
    
    }
     QScriptValue REcmaExporter::createEcma(QScriptContext* context, QScriptEngine* engine) 
    
    {
           return REcmaHelper::throwError("Abstract class RExporter: Cannot be constructed.",
               context); 
    }
    

    // conversion functions for base classes:
    

    // returns class name:
     QScriptValue REcmaExporter::getClassName(QScriptContext *context, QScriptEngine *engine) 
        
    {
        return qScriptValueFromValue(engine, QString("RExporter"));
    }
    

    // returns all base classes (in case of multiple inheritance):
     QScriptValue REcmaExporter::getBaseClasses(QScriptContext *context, QScriptEngine *engine) 
        
    {
        QStringList list;
        

        return qScriptValueFromSequence(engine, list);
    }
    

    // properties:
    

    // public methods:
     QScriptValue
        REcmaExporter::getErrorMessage
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::getErrorMessage", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::getErrorMessage";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("getErrorMessage", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getErrorMessage();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.getErrorMessage().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::getErrorMessage", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::setLayerSource
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::setLayerSource", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::setLayerSource";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("setLayerSource", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocument * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocument * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocument >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RExporter: Argument 0 is not of type RDocument *RDocument *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setLayerSource(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.setLayerSource().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::setLayerSource", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::setBlockSource
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::setBlockSource", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::setBlockSource";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("setBlockSource", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocument * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocument * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocument >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RExporter: Argument 0 is not of type RDocument *RDocument *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setBlockSource(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.setBlockSource().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::setBlockSource", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::getDocument
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::getDocument", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::getDocument";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("getDocument", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RDocument &'
    RDocument & cppResult =
        
               self->getDocument();
        // return type: RDocument &
                // reference
                result = engine->newVariant(
                QVariant::fromValue(&cppResult));
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.getDocument().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::getDocument", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::setProjectionRenderingHint
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::setProjectionRenderingHint", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::setProjectionRenderingHint";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("setProjectionRenderingHint", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RS::ProjectionRenderingHint */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RS::ProjectionRenderingHint
                    a0 =
                    (RS::ProjectionRenderingHint)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setProjectionRenderingHint(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.setProjectionRenderingHint().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::setProjectionRenderingHint", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::getProjectionRenderingHint
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::getProjectionRenderingHint", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::getProjectionRenderingHint";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("getProjectionRenderingHint", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RS::ProjectionRenderingHint'
    RS::ProjectionRenderingHint cppResult =
        
               self->getProjectionRenderingHint();
        // return type: RS::ProjectionRenderingHint
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.getProjectionRenderingHint().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::getProjectionRenderingHint", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::setClipping
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::setClipping", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::setClipping";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("setClipping", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setClipping(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.setClipping().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::setClipping", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::getClipping
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::getClipping", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::getClipping";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("getClipping", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getClipping();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.getClipping().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::getClipping", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::setPen
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::setPen", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::setPen";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("setPen", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QPen */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QPen*
                    ap0 =
                    qscriptvalue_cast<
                    QPen*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type QPen*.",
                               context);                    
                    }
                    QPen& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setPen(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.setPen().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::setPen", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::getPen
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::getPen", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::getPen";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("getPen", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPainterPath */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPainterPath*
                    ap0 =
                    qscriptvalue_cast<
                    RPainterPath*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RPainterPath.",
                               context);                    
                    }
                    RPainterPath 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'QPen'
    QPen cppResult =
        
               self->getPen(a0);
        // return type: QPen
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QPen'
    QPen cppResult =
        
               self->getPen();
        // return type: QPen
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.getPen().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::getPen", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::setBrush
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::setBrush", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::setBrush";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("setBrush", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QBrush */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QBrush*
                    ap0 =
                    qscriptvalue_cast<
                    QBrush*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type QBrush*.",
                               context);                    
                    }
                    QBrush& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setBrush(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.setBrush().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::setBrush", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::getBrush
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::getBrush", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::getBrush";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("getBrush", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPainterPath */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPainterPath*
                    ap0 =
                    qscriptvalue_cast<
                    RPainterPath*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RPainterPath.",
                               context);                    
                    }
                    RPainterPath 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'QBrush'
    QBrush cppResult =
        
               self->getBrush(a0);
        // return type: QBrush
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QBrush'
    QBrush cppResult =
        
               self->getBrush();
        // return type: QBrush
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.getBrush().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::getBrush", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::getColor
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::getColor", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::getColor";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("getColor", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RColor */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RColor*
                    ap0 =
                    qscriptvalue_cast<
                    RColor*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RColor.",
                               context);                    
                    }
                    RColor 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'RColor'
    RColor cppResult =
        
               self->getColor(a0);
        // return type: RColor
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'RColor'
    RColor cppResult =
        
               self->getColor(a0);
        // return type: RColor
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.getColor().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::getColor", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::setEntityAttributes
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::setEntityAttributes", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::setEntityAttributes";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("setEntityAttributes", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setEntityAttributes();
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setEntityAttributes(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.setEntityAttributes().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::setEntityAttributes", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::setStyle
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::setStyle", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::setStyle";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("setStyle", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: Qt::PenStyle */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    Qt::PenStyle
                    a0 =
                    (Qt::PenStyle)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setStyle(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.setStyle().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::setStyle", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::setBrushStyle
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::setBrushStyle", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::setBrushStyle";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("setBrushStyle", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: Qt::BrushStyle */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    Qt::BrushStyle
                    a0 =
                    (Qt::BrushStyle)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setBrushStyle(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.setBrushStyle().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::setBrushStyle", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::setDashPattern
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::setDashPattern", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::setDashPattern";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("setDashPattern", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QVector < qreal > */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QVector < qreal >*
                    ap0 =
                    qscriptvalue_cast<
                    QVector < qreal >*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type QVector < qreal >*.",
                               context);                    
                    }
                    QVector < qreal >& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setDashPattern(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.setDashPattern().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::setDashPattern", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::setColor
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::setColor", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::setColor";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("setColor", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isNumber()
        ) /* type: float */
     && (
            context->argument(1).isNumber()
        ) /* type: float */
     && (
            context->argument(2).isNumber()
        ) /* type: float */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    float
                    a0 =
                    (float)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    float
                    a1 =
                    (float)
                    
                    context->argument( 1 ).
                    toNumber();
                
                    // argument isStandardType
                    float
                    a2 =
                    (float)
                    
                    context->argument( 2 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setColor(a0
        ,
    a1
        ,
    a2);
    } else


        
    
    if( context->argumentCount() ==
    4 && (
            context->argument(0).isNumber()
        ) /* type: float */
     && (
            context->argument(1).isNumber()
        ) /* type: float */
     && (
            context->argument(2).isNumber()
        ) /* type: float */
     && (
            context->argument(3).isNumber()
        ) /* type: float */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    float
                    a0 =
                    (float)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    float
                    a1 =
                    (float)
                    
                    context->argument( 1 ).
                    toNumber();
                
                    // argument isStandardType
                    float
                    a2 =
                    (float)
                    
                    context->argument( 2 ).
                    toNumber();
                
                    // argument isStandardType
                    float
                    a3 =
                    (float)
                    
                    context->argument( 3 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setColor(a0
        ,
    a1
        ,
    a2
        ,
    a3);
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RColor */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RColor*
                    ap0 =
                    qscriptvalue_cast<
                    RColor*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RColor.",
                               context);                    
                    }
                    RColor 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setColor(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.setColor().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::setColor", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::setLineweight
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::setLineweight", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::setLineweight";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("setLineweight", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RLineweight::Lineweight */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RLineweight::Lineweight
                    a0 =
                    (RLineweight::Lineweight)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setLineweight(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.setLineweight().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::setLineweight", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::setLinetypeId
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::setLinetypeId", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::setLinetypeId";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("setLinetypeId", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RLinetype::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RLinetype::Id
                    a0 =
                    (RLinetype::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setLinetypeId(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.setLinetypeId().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::setLinetypeId", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::setLinetypePattern
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::setLinetypePattern", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::setLinetypePattern";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("setLinetypePattern", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RLinetypePattern */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RLinetypePattern*
                    ap0 =
                    qscriptvalue_cast<
                    RLinetypePattern*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RLinetypePattern.",
                               context);                    
                    }
                    RLinetypePattern 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setLinetypePattern(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.setLinetypePattern().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::setLinetypePattern", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::getLinetypePattern
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::getLinetypePattern", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::getLinetypePattern";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("getLinetypePattern", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RLinetypePattern'
    RLinetypePattern cppResult =
        
               self->getLinetypePattern();
        // return type: RLinetypePattern
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.getLinetypePattern().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::getLinetypePattern", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::getBlockRefOrEntity
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::getBlockRefOrEntity", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::getBlockRefOrEntity";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("getBlockRefOrEntity", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'REntity *'
    REntity * cppResult =
        
               self->getBlockRefOrEntity();
        // return type: REntity *
                // REntity:
                result = REcmaHelper::toScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.getBlockRefOrEntity().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::getBlockRefOrEntity", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::getBlockRefOrEntityId
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::getBlockRefOrEntityId", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::getBlockRefOrEntityId";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("getBlockRefOrEntityId", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'REntity::Id'
    REntity::Id cppResult =
        
               self->getBlockRefOrEntityId();
        // return type: REntity::Id
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.getBlockRefOrEntityId().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::getBlockRefOrEntityId", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::getEntity
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::getEntity", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::getEntity";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("getEntity", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'REntity *'
    REntity * cppResult =
        
               self->getEntity();
        // return type: REntity *
                // REntity:
                result = REcmaHelper::toScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.getEntity().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::getEntity", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::getCurrentBlockRef
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::getCurrentBlockRef", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::getCurrentBlockRef";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("getCurrentBlockRef", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'REntity *'
    REntity * cppResult =
        
               self->getCurrentBlockRef();
        // return type: REntity *
                // REntity:
                result = REcmaHelper::toScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.getCurrentBlockRef().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::getCurrentBlockRef", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::getCurrentViewport
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::getCurrentViewport", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::getCurrentViewport";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("getCurrentViewport", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RViewportEntity *'
    RViewportEntity * cppResult =
        
               self->getCurrentViewport();
        // return type: RViewportEntity *
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.getCurrentViewport().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::getCurrentViewport", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::getBlockRefViewportStack
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::getBlockRefViewportStack", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::getBlockRefViewportStack";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("getBlockRefViewportStack", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QStack < REntity * >'
    QStack < REntity * > cppResult =
        
               self->getBlockRefViewportStack();
        // return type: QStack < REntity * >
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.getBlockRefViewportStack().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::getBlockRefViewportStack", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::isEntitySelected
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::isEntitySelected", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::isEntitySelected";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("isEntitySelected", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isEntitySelected();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.isEntitySelected().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::isEntitySelected", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::isPatternContinuous
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::isPatternContinuous", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::isPatternContinuous";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("isPatternContinuous", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RLinetypePattern */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RLinetypePattern*
                    ap0 =
                    qscriptvalue_cast<
                    RLinetypePattern*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RLinetypePattern.",
                               context);                    
                    }
                    RLinetypePattern 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isPatternContinuous(a0);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.isPatternContinuous().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::isPatternContinuous", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::startExport
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::startExport", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::startExport";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("startExport", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->startExport();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.startExport().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::startExport", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::endExport
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::endExport", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::endExport";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("endExport", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->endExport();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.endExport().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::endExport", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportDocument
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportDocument", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportDocument";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportDocument", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->exportDocument();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportDocument().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportDocument", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportDocumentSettings
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportDocumentSettings", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportDocumentSettings";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportDocumentSettings", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->exportDocumentSettings();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportDocumentSettings().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportDocumentSettings", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportDocumentSetting
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportDocumentSetting", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportDocumentSetting";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportDocumentSetting", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNumber() || 
            context->argument(1).isString() || 
            context->argument(1).isBool() || 
            context->argument(1).isArray() || 
            context->argument(1).isNull() || 
            context->argument(1).isUndefined()
        ) /* type: QVariant */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isCopyable or pointer
                    QVariant
                    a1 =
                    qscriptvalue_cast<
                    QVariant
                        >(
                        context->argument(
                        1
                        )
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportDocumentSetting(a0
        ,
    a1);
    } else


        
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNumber() || 
            context->argument(1).isString() || 
            context->argument(1).isBool() || 
            context->argument(1).isArray() || 
            context->argument(1).isNull() || 
            context->argument(1).isUndefined()
        ) /* type: QVariant */
     && (
            context->argument(2).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isCopyable or pointer
                    QVariant
                    a1 =
                    qscriptvalue_cast<
                    QVariant
                        >(
                        context->argument(
                        1
                        )
                    );
                
                    // argument isStandardType
                    QString
                    a2 =
                    (QString)
                    
                    context->argument( 2 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportDocumentSetting(a0
        ,
    a1
        ,
    a2);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportDocumentSetting().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportDocumentSetting", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportIntListWithName
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportIntListWithName", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportIntListWithName";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportIntListWithName", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    4 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isString()
        ) /* type: QString */
     && (
            context->argument(2).isString()
        ) /* type: QString */
     && (
            context->argument(3).isArray()
        ) /* type: QList < int64_t > */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isStandardType
                    QString
                    a1 =
                    (QString)
                    
                    context->argument( 1 ).
                    toString();
                
                    // argument isStandardType
                    QString
                    a2 =
                    (QString)
                    
                    context->argument( 2 ).
                    toString();
                
                    // argument isArray
                    QList < int64_t >
                    a3;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(3),
                        a3
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportIntListWithName(a0
        ,
    a1
        ,
    a2
        ,
    a3);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportIntListWithName().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportIntListWithName", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportLayers
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportLayers", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportLayers";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportLayers", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportLayers();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportLayers().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportLayers", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportLayerStates
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportLayerStates", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportLayerStates";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportLayerStates", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportLayerStates();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportLayerStates().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportLayerStates", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportBlocks
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportBlocks", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportBlocks";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportBlocks", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportBlocks();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportBlocks().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportBlocks", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportViews
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportViews", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportViews";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportViews", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportViews();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportViews().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportViews", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportLinetypes
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportLinetypes", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportLinetypes";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportLinetypes", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportLinetypes();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportLinetypes().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportLinetypes", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportLayer
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportLayer", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportLayer";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportLayer", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RLayer */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RLayer*
                    ap0 =
                    qscriptvalue_cast<
                    RLayer*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RLayer*.",
                               context);                    
                    }
                    RLayer& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportLayer(a0);
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RLayer::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RLayer::Id
                    a0 =
                    (RLayer::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportLayer(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportLayer().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportLayer", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportLayerState
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportLayerState", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportLayerState";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportLayerState", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RLayerState */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RLayerState*
                    ap0 =
                    qscriptvalue_cast<
                    RLayerState*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RLayerState*.",
                               context);                    
                    }
                    RLayerState& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportLayerState(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportLayerState().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportLayerState", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportBlock
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportBlock", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportBlock";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportBlock", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RBlock */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RBlock*
                    ap0 =
                    qscriptvalue_cast<
                    RBlock*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RBlock*.",
                               context);                    
                    }
                    RBlock& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportBlock(a0);
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RBlock::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RBlock::Id
                    a0 =
                    (RBlock::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportBlock(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportBlock().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportBlock", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportView
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportView", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportView";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportView", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RView */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RView*
                    ap0 =
                    qscriptvalue_cast<
                    RView*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RView*.",
                               context);                    
                    }
                    RView& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportView(a0);
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RView::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RView::Id
                    a0 =
                    (RView::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportView(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportView().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportView", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportLinetype
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportLinetype", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportLinetype";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportLinetype", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RLinetype */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RLinetype*
                    ap0 =
                    qscriptvalue_cast<
                    RLinetype*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RLinetype*.",
                               context);                    
                    }
                    RLinetype& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportLinetype(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportLinetype().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportLinetype", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportEntities
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportEntities", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportEntities";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportEntities", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportEntities();
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportEntities(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isBool()
        ) /* type: bool */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportEntities(a0
        ,
    a1);
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RBox */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RBox*
                    ap0 =
                    qscriptvalue_cast<
                    RBox*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RBox.",
                               context);                    
                    }
                    RBox 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportEntities(a0);
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isArray()
        ) /* type: QSet < REntity::Id > */
    
    ){
    // prepare arguments:
    
                    // argument isArray
                    QSet < REntity::Id >
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportEntities(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isArray()
        ) /* type: QSet < REntity::Id > */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isArray
                    QSet < REntity::Id >
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportEntities(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportEntities().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportEntities", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportEntity
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportEntity", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportEntity";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportEntity", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: REntity */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    REntity*
                    ap0 =
                    qscriptvalue_cast<
                    REntity*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type REntity*.",
                               context);                    
                    }
                    REntity& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportEntity(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: REntity */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    REntity*
                    ap0 =
                    qscriptvalue_cast<
                    REntity*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type REntity*.",
                               context);                    
                    }
                    REntity& a0 = *ap0;
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportEntity(a0
        ,
    a1);
    } else


        
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: REntity */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
     && (
            context->argument(2).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    REntity*
                    ap0 =
                    qscriptvalue_cast<
                    REntity*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type REntity*.",
                               context);                    
                    }
                    REntity& a0 = *ap0;
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
                    // argument isStandardType
                    bool
                    a2 =
                    (bool)
                    
                    context->argument( 2 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportEntity(a0
        ,
    a1
        ,
    a2);
    } else


        
    
    if( context->argumentCount() ==
    4 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: REntity */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
     && (
            context->argument(2).isBool()
        ) /* type: bool */
     && (
            context->argument(3).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    REntity*
                    ap0 =
                    qscriptvalue_cast<
                    REntity*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type REntity*.",
                               context);                    
                    }
                    REntity& a0 = *ap0;
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
                    // argument isStandardType
                    bool
                    a2 =
                    (bool)
                    
                    context->argument( 2 ).
                    toBool();
                
                    // argument isStandardType
                    bool
                    a3 =
                    (bool)
                    
                    context->argument( 3 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportEntity(a0
        ,
    a1
        ,
    a2
        ,
    a3);
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: REntity::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    REntity::Id
                    a0 =
                    (REntity::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportEntity(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: REntity::Id */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    REntity::Id
                    a0 =
                    (REntity::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportEntity(a0
        ,
    a1);
    } else


        
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isNumber()
        ) /* type: REntity::Id */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
     && (
            context->argument(2).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    REntity::Id
                    a0 =
                    (REntity::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
                    // argument isStandardType
                    bool
                    a2 =
                    (bool)
                    
                    context->argument( 2 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportEntity(a0
        ,
    a1
        ,
    a2);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportEntity().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportEntity", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::getEntityLayer
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::getEntityLayer", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::getEntityLayer";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("getEntityLayer", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: REntity */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    REntity*
                    ap0 =
                    qscriptvalue_cast<
                    REntity*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type REntity*.",
                               context);                    
                    }
                    REntity& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'QSharedPointer < RLayer >'
    QSharedPointer < RLayer > cppResult =
        
               self->getEntityLayer(a0);
        // return type: QSharedPointer < RLayer >
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.getEntityLayer().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::getEntityLayer", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::isVisible
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::isVisible", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::isVisible";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("isVisible", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: REntity */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    REntity*
                    ap0 =
                    qscriptvalue_cast<
                    REntity*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type REntity*.",
                               context);                    
                    }
                    REntity& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isVisible(a0);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.isVisible().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::isVisible", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::startEntity
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::startEntity", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::startEntity";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("startEntity", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->startEntity(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.startEntity().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::startEntity", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::endEntity
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::endEntity", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::endEntity";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("endEntity", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->endEntity();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.endEntity().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::endEntity", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportCurrentEntity
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportCurrentEntity", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportCurrentEntity";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportCurrentEntity", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportCurrentEntity();
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportCurrentEntity(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isBool()
        ) /* type: bool */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportCurrentEntity(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportCurrentEntity().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportCurrentEntity", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::unexportEntity
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::unexportEntity", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::unexportEntity";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("unexportEntity", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: REntity::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    REntity::Id
                    a0 =
                    (REntity::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->unexportEntity(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.unexportEntity().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::unexportEntity", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportShapes
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportShapes", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportShapes";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportShapes", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isArray()
        ) /* type: QList < QSharedPointer < RShape > > */
    
    ){
    // prepare arguments:
    
                    // argument isArray
                    QList < QSharedPointer < RShape > >
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportShapes(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportShapes().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportShapes", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportShape
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportShape", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportShape";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportShape", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QSharedPointer < RShape > */
    
    ){
    // prepare arguments:
    
                    // argument is SharedPointer
                    QSharedPointer < RShape > 
                    a0;

                    // argument might be a simple pointer:
                     RShape * o0 = 
                    qscriptvalue_cast < RShape * > (context->argument(0));

                    if (o0!=NULL) {
                        a0 =
                        
                          // always clone shape if we expect a shared pointer (might be a simple object on stack):
                          QSharedPointer < RShape >(o0->clone());
                        
                    }
                    else {
                        // qscriptvalue_cast to QSharedPointer<BaseClass> does not work
                        QSharedPointer < RShape >*
                        p0;

                        p0 =
                        qscriptvalue_cast <QSharedPointer < RShape >* > (context->argument(0));

                        if (p0==NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type  RShape .", context);                    
                        }

                        a0 = *p0;

                           //return REcmaHelper::throwError("RExporter: Argument 0 is not of type  RShape .",
                           //    context);                    
                    }

                    //QSharedPointer < RShape > 
                    //a0 =
                    //QSharedPointer < RShape >(o0->clone());
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportShape(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportShape().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportShape", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportShapeSegment
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportShapeSegment", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportShapeSegment";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportShapeSegment", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QSharedPointer < RShape > */
     && (
            context->argument(1).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument is SharedPointer
                    QSharedPointer < RShape > 
                    a0;

                    // argument might be a simple pointer:
                     RShape * o0 = 
                    qscriptvalue_cast < RShape * > (context->argument(0));

                    if (o0!=NULL) {
                        a0 =
                        
                          // always clone shape if we expect a shared pointer (might be a simple object on stack):
                          QSharedPointer < RShape >(o0->clone());
                        
                    }
                    else {
                        // qscriptvalue_cast to QSharedPointer<BaseClass> does not work
                        QSharedPointer < RShape >*
                        p0;

                        p0 =
                        qscriptvalue_cast <QSharedPointer < RShape >* > (context->argument(0));

                        if (p0==NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type  RShape .", context);                    
                        }

                        a0 = *p0;

                           //return REcmaHelper::throwError("RExporter: Argument 0 is not of type  RShape .",
                           //    context);                    
                    }

                    //QSharedPointer < RShape > 
                    //a0 =
                    //QSharedPointer < RShape >(o0->clone());
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportShapeSegment(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportShapeSegment().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportShapeSegment", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportLine
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportLine", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportLine";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportLine", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RLine */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RLine*
                    ap0 =
                    qscriptvalue_cast<
                    RLine*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RLine.",
                               context);                    
                    }
                    RLine 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        
               self->exportLine(a0);
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RLine */
     && (
            context->argument(1).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RLine*
                    ap0 =
                    qscriptvalue_cast<
                    RLine*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RLine.",
                               context);                    
                    }
                    RLine 
                    a0 = 
                    *ap0;
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        
               self->exportLine(a0
        ,
    a1);
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportLine().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportLine", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportLineSegment
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportLineSegment", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportLineSegment";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportLineSegment", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RLine */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RLine*
                    ap0 =
                    qscriptvalue_cast<
                    RLine*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RLine.",
                               context);                    
                    }
                    RLine 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportLineSegment(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RLine */
     && (
            context->argument(1).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RLine*
                    ap0 =
                    qscriptvalue_cast<
                    RLine*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RLine.",
                               context);                    
                    }
                    RLine 
                    a0 = 
                    *ap0;
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportLineSegment(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportLineSegment().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportLineSegment", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportXLine
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportXLine", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportXLine";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportXLine", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RXLine */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RXLine*
                    ap0 =
                    qscriptvalue_cast<
                    RXLine*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RXLine.",
                               context);                    
                    }
                    RXLine 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportXLine(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportXLine().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportXLine", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportRay
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportRay", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportRay";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportRay", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RRay */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RRay*
                    ap0 =
                    qscriptvalue_cast<
                    RRay*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RRay.",
                               context);                    
                    }
                    RRay 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportRay(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportRay().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportRay", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportPoint
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportPoint", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportPoint";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportPoint", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPoint */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPoint*
                    ap0 =
                    qscriptvalue_cast<
                    RPoint*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RPoint.",
                               context);                    
                    }
                    RPoint 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportPoint(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportPoint().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportPoint", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportCircle
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportCircle", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportCircle";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportCircle", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RCircle */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RCircle*
                    ap0 =
                    qscriptvalue_cast<
                    RCircle*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RCircle.",
                               context);                    
                    }
                    RCircle 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportCircle(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportCircle().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportCircle", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportArc
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportArc", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportArc";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportArc", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RArc */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RArc*
                    ap0 =
                    qscriptvalue_cast<
                    RArc*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RArc.",
                               context);                    
                    }
                    RArc 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportArc(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RArc */
     && (
            context->argument(1).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RArc*
                    ap0 =
                    qscriptvalue_cast<
                    RArc*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RArc.",
                               context);                    
                    }
                    RArc 
                    a0 = 
                    *ap0;
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportArc(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportArc().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportArc", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportArcSegment
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportArcSegment", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportArcSegment";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportArcSegment", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RArc */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RArc*
                    ap0 =
                    qscriptvalue_cast<
                    RArc*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RArc.",
                               context);                    
                    }
                    RArc 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportArcSegment(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RArc */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RArc*
                    ap0 =
                    qscriptvalue_cast<
                    RArc*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RArc.",
                               context);                    
                    }
                    RArc 
                    a0 = 
                    *ap0;
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportArcSegment(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportArcSegment().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportArcSegment", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportEllipse
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportEllipse", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportEllipse";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportEllipse", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: REllipse */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    REllipse*
                    ap0 =
                    qscriptvalue_cast<
                    REllipse*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type REllipse.",
                               context);                    
                    }
                    REllipse 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportEllipse(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: REllipse */
     && (
            context->argument(1).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    REllipse*
                    ap0 =
                    qscriptvalue_cast<
                    REllipse*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type REllipse.",
                               context);                    
                    }
                    REllipse 
                    a0 = 
                    *ap0;
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportEllipse(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportEllipse().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportEllipse", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportPolyline
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportPolyline", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportPolyline";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportPolyline", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPolyline */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPolyline*
                    ap0 =
                    qscriptvalue_cast<
                    RPolyline*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RPolyline.",
                               context);                    
                    }
                    RPolyline 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportPolyline(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPolyline */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPolyline*
                    ap0 =
                    qscriptvalue_cast<
                    RPolyline*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RPolyline.",
                               context);                    
                    }
                    RPolyline 
                    a0 = 
                    *ap0;
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportPolyline(a0
        ,
    a1);
    } else


        
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPolyline */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
     && (
            context->argument(2).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPolyline*
                    ap0 =
                    qscriptvalue_cast<
                    RPolyline*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RPolyline.",
                               context);                    
                    }
                    RPolyline 
                    a0 = 
                    *ap0;
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
                    // argument isStandardType
                    double
                    a2 =
                    (double)
                    
                    context->argument( 2 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportPolyline(a0
        ,
    a1
        ,
    a2);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportPolyline().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportPolyline", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportSpline
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportSpline", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportSpline";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportSpline", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RSpline */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RSpline*
                    ap0 =
                    qscriptvalue_cast<
                    RSpline*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RSpline.",
                               context);                    
                    }
                    RSpline 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportSpline(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RSpline */
     && (
            context->argument(1).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RSpline*
                    ap0 =
                    qscriptvalue_cast<
                    RSpline*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RSpline.",
                               context);                    
                    }
                    RSpline 
                    a0 = 
                    *ap0;
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportSpline(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportSpline().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportSpline", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportSplineSegment
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportSplineSegment", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportSplineSegment";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportSplineSegment", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RSpline */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RSpline*
                    ap0 =
                    qscriptvalue_cast<
                    RSpline*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RSpline.",
                               context);                    
                    }
                    RSpline 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportSplineSegment(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportSplineSegment().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportSplineSegment", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportPainterPaths
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportPainterPaths", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportPainterPaths";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportPainterPaths", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isArray()
        ) /* type: QList < RPainterPath > */
    
    ){
    // prepare arguments:
    
                    // argument isArray
                    QList < RPainterPath >
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportPainterPaths(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isArray()
        ) /* type: QList < RPainterPath > */
     && (
            context->argument(1).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isArray
                    QList < RPainterPath >
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportPainterPaths(a0
        ,
    a1);
    } else


        
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isArray()
        ) /* type: QList < RPainterPath > */
     && (
            context->argument(1).isNumber()
        ) /* type: double */
     && (
            context->argument(2).isVariant() || 
            context->argument(2).isQObject() || 
            context->argument(2).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isArray
                    QList < RPainterPath >
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap2 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        2
                        )
                    );
                    if (ap2 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 2 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a2 = 
                    *ap2;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportPainterPaths(a0
        ,
    a1
        ,
    a2);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportPainterPaths().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportPainterPaths", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportBoundingBoxPaths
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportBoundingBoxPaths", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportBoundingBoxPaths";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportBoundingBoxPaths", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isArray()
        ) /* type: QList < RPainterPath > */
    
    ){
    // prepare arguments:
    
                    // argument isArray
                    QList < RPainterPath >
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportBoundingBoxPaths(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportBoundingBoxPaths().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportBoundingBoxPaths", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportImage
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportImage", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportImage";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportImage", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RImageData */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RImageData*
                    ap0 =
                    qscriptvalue_cast<
                    RImageData*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RImageData.",
                               context);                    
                    }
                    RImageData 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportImage(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RImageData */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RImageData*
                    ap0 =
                    qscriptvalue_cast<
                    RImageData*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RImageData.",
                               context);                    
                    }
                    RImageData 
                    a0 = 
                    *ap0;
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportImage(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportImage().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportImage", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportText
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportText", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportText";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportText", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RTextBasedData */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RTextBasedData*
                    ap0 =
                    qscriptvalue_cast<
                    RTextBasedData*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RTextBasedData.",
                               context);                    
                    }
                    RTextBasedData 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'QList < RPainterPath >'
    QList < RPainterPath > cppResult =
        
               self->exportText(a0);
        // return type: QList < RPainterPath >
                // List of ...:
                result = REcmaHelper::listToScriptValue(engine, cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RTextBasedData */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RTextBasedData*
                    ap0 =
                    qscriptvalue_cast<
                    RTextBasedData*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RTextBasedData.",
                               context);                    
                    }
                    RTextBasedData 
                    a0 = 
                    *ap0;
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'QList < RPainterPath >'
    QList < RPainterPath > cppResult =
        
               self->exportText(a0
        ,
    a1);
        // return type: QList < RPainterPath >
                // List of ...:
                result = REcmaHelper::listToScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportText().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportText", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportClipRectangle
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportClipRectangle", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportClipRectangle";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportClipRectangle", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RBox */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RBox*
                    ap0 =
                    qscriptvalue_cast<
                    RBox*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RBox.",
                               context);                    
                    }
                    RBox 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportClipRectangle(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RBox */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RBox*
                    ap0 =
                    qscriptvalue_cast<
                    RBox*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RBox.",
                               context);                    
                    }
                    RBox 
                    a0 = 
                    *ap0;
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportClipRectangle(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportClipRectangle().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportClipRectangle", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportTransform
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportTransform", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportTransform";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportTransform", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QTransform */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QTransform*
                    ap0 =
                    qscriptvalue_cast<
                    QTransform*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type QTransform*.",
                               context);                    
                    }
                    QTransform& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportTransform(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportTransform().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportTransform", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportEndTransform
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportEndTransform", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportEndTransform";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportEndTransform", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportEndTransform();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportEndTransform().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportEndTransform", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportTranslation
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportTranslation", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportTranslation";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportTranslation", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportTranslation(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportTranslation().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportTranslation", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportEndTranslation
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportEndTranslation", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportEndTranslation";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportEndTranslation", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportEndTranslation();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportEndTranslation().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportEndTranslation", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportRotation
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportRotation", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportRotation";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportRotation", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportRotation(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportRotation().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportRotation", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportEndRotation
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportEndRotation", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportEndRotation";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportEndRotation", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportEndRotation();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportEndRotation().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportEndRotation", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportScale
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportScale", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportScale";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportScale", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportScale(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportScale().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportScale", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportEndScale
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportEndScale", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportEndScale";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportEndScale", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportEndScale();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportEndScale().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportEndScale", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportThickPolyline
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportThickPolyline", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportThickPolyline";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportThickPolyline", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPolyline */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPolyline*
                    ap0 =
                    qscriptvalue_cast<
                    RPolyline*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RPolyline.",
                               context);                    
                    }
                    RPolyline 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportThickPolyline(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportThickPolyline().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportThickPolyline", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportQuad
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportQuad", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportQuad";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportQuad", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    4 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: RVector */
     && (
            context->argument(2).isVariant() || 
            context->argument(2).isQObject() || 
            context->argument(2).isNull()
        ) /* type: RVector */
     && (
            context->argument(3).isVariant() || 
            context->argument(3).isQObject() || 
            context->argument(3).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap1 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if (ap1 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 1 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a1 = 
                    *ap1;
                
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap2 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        2
                        )
                    );
                    if (ap2 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 2 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a2 = 
                    *ap2;
                
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap3 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        3
                        )
                    );
                    if (ap3 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 3 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a3 = 
                    *ap3;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportQuad(a0
        ,
    a1
        ,
    a2
        ,
    a3);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportQuad().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportQuad", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportVerticalQuad
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportVerticalQuad", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportVerticalQuad";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportVerticalQuad", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: RVector */
     && (
            context->argument(2).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap1 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if (ap1 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 1 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a1 = 
                    *ap1;
                
                    // argument isStandardType
                    double
                    a2 =
                    (double)
                    
                    context->argument( 2 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportVerticalQuad(a0
        ,
    a1
        ,
    a2);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportVerticalQuad().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportVerticalQuad", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportBox
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportBox", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportBox";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportBox", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RBox */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RBox*
                    ap0 =
                    qscriptvalue_cast<
                    RBox*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RBox.",
                               context);                    
                    }
                    RBox 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportBox(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportBox().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportBox", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportTriangle
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportTriangle", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportTriangle";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportTriangle", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RTriangle */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RTriangle*
                    ap0 =
                    qscriptvalue_cast<
                    RTriangle*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RTriangle.",
                               context);                    
                    }
                    RTriangle 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportTriangle(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportTriangle().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportTriangle", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::exportRectangle
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::exportRectangle", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::exportRectangle";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("exportRectangle", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap1 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if (ap1 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 1 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a1 = 
                    *ap1;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportRectangle(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.exportRectangle().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::exportRectangle", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::getLineTypePatternScale
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::getLineTypePatternScale", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::getLineTypePatternScale";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("getLineTypePatternScale", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RLinetypePattern */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RLinetypePattern*
                    ap0 =
                    qscriptvalue_cast<
                    RLinetypePattern*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RExporter: Argument 0 is not of type RLinetypePattern.",
                               context);                    
                    }
                    RLinetypePattern 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        
               self->getLineTypePatternScale(a0);
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.getLineTypePatternScale().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::getLineTypePatternScale", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::isTextRenderedAsText
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::isTextRenderedAsText", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::isTextRenderedAsText";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("isTextRenderedAsText", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isTextRenderedAsText();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.isTextRenderedAsText().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::isTextRenderedAsText", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::getEntityStack
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::getEntityStack", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::getEntityStack";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("getEntityStack", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QStack < REntity * >'
    QStack < REntity * > cppResult =
        
               self->getEntityStack();
        // return type: QStack < REntity * >
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.getEntityStack().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::getEntityStack", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::pushEntity
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::pushEntity", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::pushEntity";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("pushEntity", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: REntity * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    REntity * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<REntity >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RExporter: Argument 0 is not of type REntity *REntity *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->pushEntity(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.pushEntity().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::pushEntity", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::popEntity
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::popEntity", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::popEntity";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("popEntity", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->popEntity();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.popEntity().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::popEntity", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::setDraftMode
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::setDraftMode", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::setDraftMode";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("setDraftMode", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setDraftMode(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.setDraftMode().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::setDraftMode", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::toggleDraftMode
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::toggleDraftMode", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::toggleDraftMode";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("toggleDraftMode", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->toggleDraftMode();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.toggleDraftMode().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::toggleDraftMode", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::getDraftMode
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::getDraftMode", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::getDraftMode";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("getDraftMode", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getDraftMode();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.getDraftMode().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::getDraftMode", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::setTwoColorSelectedMode
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::setTwoColorSelectedMode", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::setTwoColorSelectedMode";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("setTwoColorSelectedMode", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setTwoColorSelectedMode(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.setTwoColorSelectedMode().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::setTwoColorSelectedMode", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::getTwoColorSelectedMode
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::getTwoColorSelectedMode", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::getTwoColorSelectedMode";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("getTwoColorSelectedMode", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getTwoColorSelectedMode();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.getTwoColorSelectedMode().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::getTwoColorSelectedMode", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::setScreenBasedLinetypes
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::setScreenBasedLinetypes", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::setScreenBasedLinetypes";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("setScreenBasedLinetypes", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setScreenBasedLinetypes(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.setScreenBasedLinetypes().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::setScreenBasedLinetypes", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::toggleScreenBasedLinetypes
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::toggleScreenBasedLinetypes", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::toggleScreenBasedLinetypes";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("toggleScreenBasedLinetypes", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->toggleScreenBasedLinetypes();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.toggleScreenBasedLinetypes().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::toggleScreenBasedLinetypes", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::getScreenBasedLinetypes
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::getScreenBasedLinetypes", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::getScreenBasedLinetypes";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("getScreenBasedLinetypes", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getScreenBasedLinetypes();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.getScreenBasedLinetypes().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::getScreenBasedLinetypes", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::isVisualExporter
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::isVisualExporter", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::isVisualExporter";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("isVisualExporter", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isVisualExporter();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.isVisualExporter().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::isVisualExporter", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::setVisualExporter
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::setVisualExporter", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::setVisualExporter";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("setVisualExporter", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setVisualExporter(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.setVisualExporter().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::setVisualExporter", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::getPixelSizeHint
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::getPixelSizeHint", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::getPixelSizeHint";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("getPixelSizeHint", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        
               self->getPixelSizeHint();
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.getPixelSizeHint().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::getPixelSizeHint", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::getCurrentPixelSizeHint
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::getCurrentPixelSizeHint", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::getCurrentPixelSizeHint";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("getCurrentPixelSizeHint", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        
               self->getCurrentPixelSizeHint();
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.getCurrentPixelSizeHint().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::getCurrentPixelSizeHint", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::setPixelSizeHint
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::setPixelSizeHint", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::setPixelSizeHint";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("setPixelSizeHint", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setPixelSizeHint(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.setPixelSizeHint().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::setPixelSizeHint", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::getPixelUnit
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::getPixelUnit", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::getPixelUnit";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("getPixelUnit", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getPixelUnit();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.getPixelUnit().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::getPixelUnit", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::setPixelUnit
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::setPixelUnit", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::setPixelUnit";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("setPixelUnit", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setPixelUnit(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.setPixelUnit().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::setPixelUnit", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::getPixelWidth
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::getPixelWidth", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::getPixelWidth";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("getPixelWidth", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getPixelWidth();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.getPixelWidth().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::getPixelWidth", context, engine);
            return result;
        }
         QScriptValue
        REcmaExporter::setPixelWidth
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaExporter::setPixelWidth", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaExporter::setPixelWidth";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RExporter* self = 
                        getSelf("setPixelWidth", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setPixelWidth(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RExporter.setPixelWidth().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaExporter::setPixelWidth", context, engine);
            return result;
        }
         QScriptValue REcmaExporter::toString
    (QScriptContext *context, QScriptEngine *engine)
    
    {

    RExporter* self = getSelf("toString", context);
    
    QString result;
    
            result = QString("RExporter(0x%1)").arg((unsigned long int)self, 0, 16);
        
    return QScriptValue(result);
    }
     QScriptValue REcmaExporter::destroy(QScriptContext *context, QScriptEngine *engine)
    
    {

        RExporter* self = getSelf("RExporter", context);
        //Q_ASSERT(self!=NULL);
        if (self==NULL) {
            return REcmaHelper::throwError("self is NULL", context);
        }
        
    
        delete self;
        context->thisObject().setData(engine->nullValue());
        context->thisObject().prototype().setData(engine->nullValue());
        context->thisObject().setPrototype(engine->nullValue());
        context->thisObject().setScriptClass(NULL);
        return engine->undefinedValue();
    }
    RExporter* REcmaExporter::getSelf(const QString& fName, QScriptContext* context)
    
        {
            RExporter* self = NULL;

            
                // self could be a normal object (e.g. from an UI file) or
                // an ECMA shell object (made from an ECMA script):
                //self = getSelfShell(fName, context);
                

            //if (self==NULL) {
                self = REcmaHelper::scriptValueTo<RExporter >(context->thisObject())
                
                ;
            //}

            if (self == NULL){
                // avoid recursion (toString is used by the backtrace):
                if (fName!="toString") {
                    REcmaHelper::throwError(QString("RExporter.%1(): "
                        "This object is not a RExporter").arg(fName),
                        context);
                }
                return NULL;
            }

            return self;
        }
        RExporter* REcmaExporter::getSelfShell(const QString& fName, QScriptContext* context)
    
        {
          RExporter* selfBase = getSelf(fName, context);
                RExporter* self = dynamic_cast<RExporter*>(selfBase);
                //return REcmaHelper::scriptValueTo<RExporter >(context->thisObject());
            if(self == NULL){
                REcmaHelper::throwError(QString("RExporter.%1(): "
                    "This object is not a RExporter").arg(fName),
                    context);
            }

            return self;
            


        }
        