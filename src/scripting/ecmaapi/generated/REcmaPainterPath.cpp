// ***** AUTOGENERATED CODE, DO NOT EDIT *****
            // ***** This class is copyable.
        
        #include "REcmaPainterPath.h"
        #include "RMetaTypes.h"
        #include "../REcmaHelper.h"

        // forwards declarations mapped to includes
        
                #include "RArc.h"
            
                #include "RShape.h"
            
                #include "RSpline.h"
            
            
        // includes for base ecma wrapper classes
         void REcmaPainterPath::initEcma(QScriptEngine& engine, QScriptValue* proto 
    
    ) 
    
    {

    bool protoCreated = false;
    if(proto == NULL){
        proto = new QScriptValue(engine.newVariant(qVariantFromValue(
                (RPainterPath*) 0)));
        protoCreated = true;
    }

    
        // primary base class QPainterPath:
        
            QScriptValue dpt = engine.defaultPrototype(
                qMetaTypeId<QPainterPath*>());

            if (dpt.isValid()) {
                proto->setPrototype(dpt);
            }
          
        /*
        
        */
    

    QScriptValue fun;

    // toString:
    REcmaHelper::registerFunction(&engine, proto, toString, "toString");
    
    // copy:
    REcmaHelper::registerFunction(&engine, proto, copy, "copy");
    

    // destroy:
    REcmaHelper::registerFunction(&engine, proto, destroy, "destroy");
    
        // conversion for base class QPainterPath
        REcmaHelper::registerFunction(&engine, proto, getQPainterPath, "getQPainterPath");
        

    // get class name
    REcmaHelper::registerFunction(&engine, proto, getClassName, "getClassName");
    

    // conversion to all base classes (multiple inheritance):
    REcmaHelper::registerFunction(&engine, proto, getBaseClasses, "getBaseClasses");
    

    // properties:
    

    // methods:
    
            REcmaHelper::registerFunction(&engine, proto, setPath, "setPath");
            
            REcmaHelper::registerFunction(&engine, proto, getShapes, "getShapes");
            
            REcmaHelper::registerFunction(&engine, proto, getCurrentPosition, "getCurrentPosition");
            
            REcmaHelper::registerFunction(&engine, proto, isAtPosition, "isAtPosition");
            
            REcmaHelper::registerFunction(&engine, proto, moveTo, "moveTo");
            
            REcmaHelper::registerFunction(&engine, proto, moveToOrNop, "moveToOrNop");
            
            REcmaHelper::registerFunction(&engine, proto, lineTo, "lineTo");
            
            REcmaHelper::registerFunction(&engine, proto, quadTo, "quadTo");
            
            REcmaHelper::registerFunction(&engine, proto, cubicTo, "cubicTo");
            
            REcmaHelper::registerFunction(&engine, proto, closeSubpath, "closeSubpath");
            
            REcmaHelper::registerFunction(&engine, proto, containsPoint, "containsPoint");
            
            REcmaHelper::registerFunction(&engine, proto, addPolyline, "addPolyline");
            
            REcmaHelper::registerFunction(&engine, proto, addPath, "addPath");
            
            REcmaHelper::registerFunction(&engine, proto, appendPath, "appendPath");
            
            REcmaHelper::registerFunction(&engine, proto, addLine, "addLine");
            
            REcmaHelper::registerFunction(&engine, proto, addArc, "addArc");
            
            REcmaHelper::registerFunction(&engine, proto, addSpline, "addSpline");
            
            REcmaHelper::registerFunction(&engine, proto, addRect, "addRect");
            
            REcmaHelper::registerFunction(&engine, proto, addBox, "addBox");
            
            REcmaHelper::registerFunction(&engine, proto, getBoundingBox, "getBoundingBox");
            
            REcmaHelper::registerFunction(&engine, proto, getStartPoint, "getStartPoint");
            
            REcmaHelper::registerFunction(&engine, proto, getEndPoint, "getEndPoint");
            
            REcmaHelper::registerFunction(&engine, proto, isValid, "isValid");
            
            REcmaHelper::registerFunction(&engine, proto, setValid, "setValid");
            
            REcmaHelper::registerFunction(&engine, proto, isSane, "isSane");
            
            REcmaHelper::registerFunction(&engine, proto, getZLevel, "getZLevel");
            
            REcmaHelper::registerFunction(&engine, proto, setZLevel, "setZLevel");
            
            REcmaHelper::registerFunction(&engine, proto, getPen, "getPen");
            
            REcmaHelper::registerFunction(&engine, proto, setPen, "setPen");
            
            REcmaHelper::registerFunction(&engine, proto, getBrush, "getBrush");
            
            REcmaHelper::registerFunction(&engine, proto, setBrush, "setBrush");
            
            REcmaHelper::registerFunction(&engine, proto, setMode, "setMode");
            
            REcmaHelper::registerFunction(&engine, proto, getMode, "getMode");
            
            REcmaHelper::registerFunction(&engine, proto, setHighlighted, "setHighlighted");
            
            REcmaHelper::registerFunction(&engine, proto, isHighlighted, "isHighlighted");
            
            REcmaHelper::registerFunction(&engine, proto, setSelected, "setSelected");
            
            REcmaHelper::registerFunction(&engine, proto, isSelected, "isSelected");
            
            REcmaHelper::registerFunction(&engine, proto, setFixedPenColor, "setFixedPenColor");
            
            REcmaHelper::registerFunction(&engine, proto, isFixedPenColor, "isFixedPenColor");
            
            REcmaHelper::registerFunction(&engine, proto, setFixedBrushColor, "setFixedBrushColor");
            
            REcmaHelper::registerFunction(&engine, proto, isFixedBrushColor, "isFixedBrushColor");
            
            REcmaHelper::registerFunction(&engine, proto, setAutoRegen, "setAutoRegen");
            
            REcmaHelper::registerFunction(&engine, proto, getAutoRegen, "getAutoRegen");
            
            REcmaHelper::registerFunction(&engine, proto, setAlwaysRegen, "setAlwaysRegen");
            
            REcmaHelper::registerFunction(&engine, proto, getAlwaysRegen, "getAlwaysRegen");
            
            REcmaHelper::registerFunction(&engine, proto, setInheritPen, "setInheritPen");
            
            REcmaHelper::registerFunction(&engine, proto, getInheritPen, "getInheritPen");
            
            REcmaHelper::registerFunction(&engine, proto, setPixelUnit, "setPixelUnit");
            
            REcmaHelper::registerFunction(&engine, proto, getPixelUnit, "getPixelUnit");
            
            REcmaHelper::registerFunction(&engine, proto, setNoClipping, "setNoClipping");
            
            REcmaHelper::registerFunction(&engine, proto, getNoClipping, "getNoClipping");
            
            REcmaHelper::registerFunction(&engine, proto, setNoColorMode, "setNoColorMode");
            
            REcmaHelper::registerFunction(&engine, proto, getNoColorMode, "getNoColorMode");
            
            REcmaHelper::registerFunction(&engine, proto, setSimplePointDisplay, "setSimplePointDisplay");
            
            REcmaHelper::registerFunction(&engine, proto, getSimplePointDisplay, "getSimplePointDisplay");
            
            REcmaHelper::registerFunction(&engine, proto, setPixelWidth, "setPixelWidth");
            
            REcmaHelper::registerFunction(&engine, proto, getPixelWidth, "getPixelWidth");
            
            REcmaHelper::registerFunction(&engine, proto, setFeatureSize, "setFeatureSize");
            
            REcmaHelper::registerFunction(&engine, proto, getFeatureSize, "getFeatureSize");
            
            REcmaHelper::registerFunction(&engine, proto, setPixelSizeHint, "setPixelSizeHint");
            
            REcmaHelper::registerFunction(&engine, proto, getPixelSizeHint, "getPixelSizeHint");
            
            REcmaHelper::registerFunction(&engine, proto, getDistanceTo, "getDistanceTo");
            
            REcmaHelper::registerFunction(&engine, proto, addPoint, "addPoint");
            
            REcmaHelper::registerFunction(&engine, proto, hasPoints, "hasPoints");
            
            REcmaHelper::registerFunction(&engine, proto, setPoints, "setPoints");
            
            REcmaHelper::registerFunction(&engine, proto, getPoints, "getPoints");
            
            REcmaHelper::registerFunction(&engine, proto, transform, "transform");
            
            REcmaHelper::registerFunction(&engine, proto, move, "move");
            
            REcmaHelper::registerFunction(&engine, proto, rotate, "rotate");
            
            REcmaHelper::registerFunction(&engine, proto, scale, "scale");
            
            REcmaHelper::registerFunction(&engine, proto, getElementCount, "getElementCount");
            
            REcmaHelper::registerFunction(&engine, proto, getXAt, "getXAt");
            
            REcmaHelper::registerFunction(&engine, proto, getYAt, "getYAt");
            
            REcmaHelper::registerFunction(&engine, proto, getTypeAt, "getTypeAt");
            
            REcmaHelper::registerFunction(&engine, proto, isEmpty, "isEmpty");
            
            REcmaHelper::registerFunction(&engine, proto, addShape, "addShape");
            
            REcmaHelper::registerFunction(&engine, proto, addOriginalShape, "addOriginalShape");
            
            REcmaHelper::registerFunction(&engine, proto, hasOriginalShapes, "hasOriginalShapes");
            
            REcmaHelper::registerFunction(&engine, proto, countOriginalShapes, "countOriginalShapes");
            
            REcmaHelper::registerFunction(&engine, proto, getOriginalShape, "getOriginalShape");
            
        engine.setDefaultPrototype(
            qMetaTypeId<RPainterPath*>(), *proto);

        
                engine.setDefaultPrototype(qMetaTypeId<
                RPainterPath
                > (), *proto);
            
    

    QScriptValue ctor = engine.newFunction(createEcma, *proto, 2);
    
    // static methods:
    
            REcmaHelper::registerFunction(&engine, &ctor, rotateList, "rotateList");
            
            REcmaHelper::registerFunction(&engine, &ctor, translateList, "translateList");
            
            REcmaHelper::registerFunction(&engine, &ctor, scaleList, "scaleList");
            
            REcmaHelper::registerFunction(&engine, &ctor, getMinList, "getMinList");
            
            REcmaHelper::registerFunction(&engine, &ctor, getMaxList, "getMaxList");
            

    // static properties:
    

    // enum values:
    

    ctor.setProperty("NoModes",
    QScriptValue(RPainterPath::NoModes),
    QScriptValue::ReadOnly);


    ctor.setProperty("Selected",
    QScriptValue(RPainterPath::Selected),
    QScriptValue::ReadOnly);


    ctor.setProperty("Highlighted",
    QScriptValue(RPainterPath::Highlighted),
    QScriptValue::ReadOnly);


    ctor.setProperty("Invalid",
    QScriptValue(RPainterPath::Invalid),
    QScriptValue::ReadOnly);


    ctor.setProperty("FixedPenColor",
    QScriptValue(RPainterPath::FixedPenColor),
    QScriptValue::ReadOnly);


    ctor.setProperty("FixedBrushColor",
    QScriptValue(RPainterPath::FixedBrushColor),
    QScriptValue::ReadOnly);


    ctor.setProperty("AutoRegen",
    QScriptValue(RPainterPath::AutoRegen),
    QScriptValue::ReadOnly);


    ctor.setProperty("AlwaysRegen",
    QScriptValue(RPainterPath::AlwaysRegen),
    QScriptValue::ReadOnly);


    ctor.setProperty("InheritPen",
    QScriptValue(RPainterPath::InheritPen),
    QScriptValue::ReadOnly);


    ctor.setProperty("PixelUnit",
    QScriptValue(RPainterPath::PixelUnit),
    QScriptValue::ReadOnly);


    ctor.setProperty("NoClipping",
    QScriptValue(RPainterPath::NoClipping),
    QScriptValue::ReadOnly);


    ctor.setProperty("PixelWidth",
    QScriptValue(RPainterPath::PixelWidth),
    QScriptValue::ReadOnly);


    ctor.setProperty("NoColorMode",
    QScriptValue(RPainterPath::NoColorMode),
    QScriptValue::ReadOnly);


    ctor.setProperty("SimplePointDisplay",
    QScriptValue(RPainterPath::SimplePointDisplay),
    QScriptValue::ReadOnly);


    // enum conversions:
    
    qScriptRegisterMetaType<RPainterPath::Mode>(
        &engine,
        toScriptValueEnumMode,
        fromScriptValueEnumMode,
        ctor.property(QString::fromLatin1("prototype"))
    );

        
    // init class:
    engine.globalObject().setProperty("RPainterPath",
    ctor, QScriptValue::SkipInEnumeration);
    
    if( protoCreated ){
       delete proto;
    }
    
    }
     QScriptValue REcmaPainterPath::createEcma(QScriptContext* context, QScriptEngine* engine) 
    
    {
    if (context->thisObject().strictlyEquals(
       engine->globalObject())) {
       return REcmaHelper::throwError(
       QString::fromLatin1("RPainterPath(): Did you forget to construct with 'new'?"),
           context);
    }

    QScriptValue result;
        
            // generate constructor variants:
            
    if( context->argumentCount() ==
        0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ constructor:
    
            // copyable class:
            RPainterPath
                    cppResult;
                
            result = engine->newVariant(
            context->thisObject(), qVariantFromValue(cppResult));
        
    } else 

    if( context->argumentCount() ==
        1
                && (
                
                        context->argument(
                        0
                        ).isVariant()
                        ||
                    
                        context->argument(
                        0
                        ).isQObject()
                        ||
                    
                        context->argument(
                        0
                        ).isNull()
                ) /* type: QPainterPath */
            
    ){
    // prepare arguments:
    
                    // argument is reference
                    QPainterPath*
                    ap0 =
                    qscriptvalue_cast<
                    QPainterPath*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RPainterPath: Argument 0 is not of type QPainterPath*.",
                               context);                    
                    }
                    QPainterPath& a0 = *ap0;
                
    // end of arguments

    // call C++ constructor:
    
            // copyable class:
            RPainterPath
                    cppResult(
                    a0
                    );
                
            result = engine->newVariant(
            context->thisObject(), qVariantFromValue(cppResult));
        
    } else 

    if( context->argumentCount() ==
        1
                && (
                
                        context->argument(
                        0
                        ).isVariant()
                        ||
                    
                        context->argument(
                        0
                        ).isQObject()
                        ||
                    
                        context->argument(
                        0
                        ).isNull()
                ) /* type: RPainterPath */
            
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPainterPath*
                    ap0 =
                    qscriptvalue_cast<
                    RPainterPath*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RPainterPath: Argument 0 is not of type RPainterPath.",
                               context);                    
                    }
                    RPainterPath 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ constructor:
    
            // copyable class:
            RPainterPath
                    cppResult(
                    a0
                    );
                
            result = engine->newVariant(
            context->thisObject(), qVariantFromValue(cppResult));
        
    } else 

    {
       return REcmaHelper::throwError(
       QString::fromLatin1("RPainterPath(): no matching constructor found."),
           context);
    }
    
    return result;
    }
    

    // conversion functions for base classes:
     QScriptValue REcmaPainterPath::getQPainterPath(QScriptContext *context,
            QScriptEngine *engine)
        
            {
                QPainterPath* cppResult =
                    qscriptvalue_cast<RPainterPath*> (context->thisObject());
                QScriptValue result = qScriptValueFromValue(engine, cppResult);
                return result;
            }
            

    // returns class name:
     QScriptValue REcmaPainterPath::getClassName(QScriptContext *context, QScriptEngine *engine) 
        
    {
        return qScriptValueFromValue(engine, QString("RPainterPath"));
    }
    

    // returns all base classes (in case of multiple inheritance):
     QScriptValue REcmaPainterPath::getBaseClasses(QScriptContext *context, QScriptEngine *engine) 
        
    {
        QStringList list;
        
        list.append("QPainterPath");
    

        return qScriptValueFromSequence(engine, list);
    }
    

    // properties:
    

    // public methods:
     QScriptValue
        REcmaPainterPath::setPath
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::setPath", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::setPath";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("setPath", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QPainterPath */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QPainterPath*
                    ap0 =
                    qscriptvalue_cast<
                    QPainterPath*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RPainterPath: Argument 0 is not of type QPainterPath*.",
                               context);                    
                    }
                    QPainterPath& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setPath(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.setPath().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::setPath", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::getShapes
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::getShapes", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::getShapes";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("getShapes", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QList < QSharedPointer < RShape > >'
    QList < QSharedPointer < RShape > > cppResult =
        
               self->getShapes();
        // return type: QList < QSharedPointer < RShape > >
                // List of ...:
                result = REcmaHelper::listToScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.getShapes().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::getShapes", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::getCurrentPosition
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::getCurrentPosition", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::getCurrentPosition";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("getCurrentPosition", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RVector'
    RVector cppResult =
        
               self->getCurrentPosition();
        // return type: RVector
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.getCurrentPosition().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::getCurrentPosition", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::isAtPosition
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::isAtPosition", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::isAtPosition";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("isAtPosition", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RPainterPath: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isAtPosition(a0);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
     && (
            context->argument(1).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RPainterPath: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isAtPosition(a0
        ,
    a1);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.isAtPosition().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::isAtPosition", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::moveTo
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::moveTo", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::moveTo";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("moveTo", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RPainterPath: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->moveTo(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: qreal */
     && (
            context->argument(1).isNumber()
        ) /* type: qreal */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    qreal
                    a0 =
                    (qreal)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    qreal
                    a1 =
                    (qreal)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->moveTo(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.moveTo().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::moveTo", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::moveToOrNop
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::moveToOrNop", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::moveToOrNop";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("moveToOrNop", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RPainterPath: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->moveToOrNop(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.moveToOrNop().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::moveToOrNop", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::lineTo
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::lineTo", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::lineTo";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("lineTo", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RPainterPath: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->lineTo(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: qreal */
     && (
            context->argument(1).isNumber()
        ) /* type: qreal */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    qreal
                    a0 =
                    (qreal)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    qreal
                    a1 =
                    (qreal)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->lineTo(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.lineTo().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::lineTo", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::quadTo
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::quadTo", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::quadTo";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("quadTo", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RPainterPath: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap1 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if (ap1 == NULL) {
                           return REcmaHelper::throwError("RPainterPath: Argument 1 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a1 = 
                    *ap1;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->quadTo(a0
        ,
    a1);
    } else


        
    
    if( context->argumentCount() ==
    4 && (
            context->argument(0).isNumber()
        ) /* type: qreal */
     && (
            context->argument(1).isNumber()
        ) /* type: qreal */
     && (
            context->argument(2).isNumber()
        ) /* type: qreal */
     && (
            context->argument(3).isNumber()
        ) /* type: qreal */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    qreal
                    a0 =
                    (qreal)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    qreal
                    a1 =
                    (qreal)
                    
                    context->argument( 1 ).
                    toNumber();
                
                    // argument isStandardType
                    qreal
                    a2 =
                    (qreal)
                    
                    context->argument( 2 ).
                    toNumber();
                
                    // argument isStandardType
                    qreal
                    a3 =
                    (qreal)
                    
                    context->argument( 3 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->quadTo(a0
        ,
    a1
        ,
    a2
        ,
    a3);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.quadTo().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::quadTo", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::cubicTo
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::cubicTo", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::cubicTo";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("cubicTo", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: RVector */
     && (
            context->argument(2).isVariant() || 
            context->argument(2).isQObject() || 
            context->argument(2).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RPainterPath: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap1 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if (ap1 == NULL) {
                           return REcmaHelper::throwError("RPainterPath: Argument 1 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a1 = 
                    *ap1;
                
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap2 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        2
                        )
                    );
                    if (ap2 == NULL) {
                           return REcmaHelper::throwError("RPainterPath: Argument 2 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a2 = 
                    *ap2;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->cubicTo(a0
        ,
    a1
        ,
    a2);
    } else


        
    
    if( context->argumentCount() ==
    6 && (
            context->argument(0).isNumber()
        ) /* type: qreal */
     && (
            context->argument(1).isNumber()
        ) /* type: qreal */
     && (
            context->argument(2).isNumber()
        ) /* type: qreal */
     && (
            context->argument(3).isNumber()
        ) /* type: qreal */
     && (
            context->argument(4).isNumber()
        ) /* type: qreal */
     && (
            context->argument(5).isNumber()
        ) /* type: qreal */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    qreal
                    a0 =
                    (qreal)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    qreal
                    a1 =
                    (qreal)
                    
                    context->argument( 1 ).
                    toNumber();
                
                    // argument isStandardType
                    qreal
                    a2 =
                    (qreal)
                    
                    context->argument( 2 ).
                    toNumber();
                
                    // argument isStandardType
                    qreal
                    a3 =
                    (qreal)
                    
                    context->argument( 3 ).
                    toNumber();
                
                    // argument isStandardType
                    qreal
                    a4 =
                    (qreal)
                    
                    context->argument( 4 ).
                    toNumber();
                
                    // argument isStandardType
                    qreal
                    a5 =
                    (qreal)
                    
                    context->argument( 5 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->cubicTo(a0
        ,
    a1
        ,
    a2
        ,
    a3
        ,
    a4
        ,
    a5);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.cubicTo().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::cubicTo", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::closeSubpath
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::closeSubpath", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::closeSubpath";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("closeSubpath", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->closeSubpath();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.closeSubpath().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::closeSubpath", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::containsPoint
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::containsPoint", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::containsPoint";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("containsPoint", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RPainterPath: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->containsPoint(a0);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.containsPoint().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::containsPoint", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::addPolyline
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::addPolyline", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::addPolyline";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("addPolyline", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPolyline */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPolyline*
                    ap0 =
                    qscriptvalue_cast<
                    RPolyline*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RPainterPath: Argument 0 is not of type RPolyline.",
                               context);                    
                    }
                    RPolyline 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addPolyline(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.addPolyline().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::addPolyline", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::addPath
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::addPath", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::addPath";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("addPath", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPainterPath */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPainterPath*
                    ap0 =
                    qscriptvalue_cast<
                    RPainterPath*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RPainterPath: Argument 0 is not of type RPainterPath.",
                               context);                    
                    }
                    RPainterPath 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addPath(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.addPath().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::addPath", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::appendPath
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::appendPath", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::appendPath";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("appendPath", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPainterPath */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPainterPath*
                    ap0 =
                    qscriptvalue_cast<
                    RPainterPath*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RPainterPath: Argument 0 is not of type RPainterPath.",
                               context);                    
                    }
                    RPainterPath 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->appendPath(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.appendPath().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::appendPath", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::addLine
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::addLine", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::addLine";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("addLine", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RLine */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RLine*
                    ap0 =
                    qscriptvalue_cast<
                    RLine*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RPainterPath: Argument 0 is not of type RLine.",
                               context);                    
                    }
                    RLine 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addLine(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.addLine().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::addLine", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::addArc
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::addArc", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::addArc";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("addArc", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RArc */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RArc*
                    ap0 =
                    qscriptvalue_cast<
                    RArc*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RPainterPath: Argument 0 is not of type RArc.",
                               context);                    
                    }
                    RArc 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addArc(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.addArc().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::addArc", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::addSpline
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::addSpline", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::addSpline";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("addSpline", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RSpline */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RSpline*
                    ap0 =
                    qscriptvalue_cast<
                    RSpline*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RPainterPath: Argument 0 is not of type RSpline.",
                               context);                    
                    }
                    RSpline 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addSpline(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.addSpline().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::addSpline", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::addRect
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::addRect", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::addRect";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("addRect", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    4 && (
            context->argument(0).isNumber()
        ) /* type: double */
     && (
            context->argument(1).isNumber()
        ) /* type: double */
     && (
            context->argument(2).isNumber()
        ) /* type: double */
     && (
            context->argument(3).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a2 =
                    (double)
                    
                    context->argument( 2 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a3 =
                    (double)
                    
                    context->argument( 3 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addRect(a0
        ,
    a1
        ,
    a2
        ,
    a3);
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QRectF */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QRectF*
                    ap0 =
                    qscriptvalue_cast<
                    QRectF*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RPainterPath: Argument 0 is not of type QRectF*.",
                               context);                    
                    }
                    QRectF& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addRect(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.addRect().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::addRect", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::addBox
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::addBox", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::addBox";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("addBox", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RBox */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RBox*
                    ap0 =
                    qscriptvalue_cast<
                    RBox*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RPainterPath: Argument 0 is not of type RBox.",
                               context);                    
                    }
                    RBox 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addBox(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.addBox().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::addBox", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::getBoundingBox
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::getBoundingBox", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::getBoundingBox";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("getBoundingBox", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RBox'
    RBox cppResult =
        
               self->getBoundingBox();
        // return type: RBox
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.getBoundingBox().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::getBoundingBox", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::getStartPoint
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::getStartPoint", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::getStartPoint";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("getStartPoint", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RVector'
    RVector cppResult =
        
               self->getStartPoint();
        // return type: RVector
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.getStartPoint().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::getStartPoint", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::getEndPoint
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::getEndPoint", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::getEndPoint";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("getEndPoint", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RVector'
    RVector cppResult =
        
               self->getEndPoint();
        // return type: RVector
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.getEndPoint().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::getEndPoint", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::isValid
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::isValid", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::isValid";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("isValid", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isValid();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.isValid().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::isValid", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::setValid
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::setValid", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::setValid";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("setValid", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setValid(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.setValid().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::setValid", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::isSane
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::isSane", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::isSane";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("isSane", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isSane();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.isSane().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::isSane", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::getZLevel
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::getZLevel", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::getZLevel";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("getZLevel", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        
               self->getZLevel();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.getZLevel().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::getZLevel", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::setZLevel
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::setZLevel", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::setZLevel";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("setZLevel", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setZLevel(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.setZLevel().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::setZLevel", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::getPen
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::getPen", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::getPen";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("getPen", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QPen'
    QPen cppResult =
        
               self->getPen();
        // return type: QPen
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.getPen().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::getPen", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::setPen
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::setPen", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::setPen";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("setPen", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QPen */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QPen*
                    ap0 =
                    qscriptvalue_cast<
                    QPen*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RPainterPath: Argument 0 is not of type QPen*.",
                               context);                    
                    }
                    QPen& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setPen(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.setPen().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::setPen", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::getBrush
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::getBrush", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::getBrush";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("getBrush", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QBrush'
    QBrush cppResult =
        
               self->getBrush();
        // return type: QBrush
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.getBrush().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::getBrush", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::setBrush
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::setBrush", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::setBrush";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("setBrush", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QBrush */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QBrush*
                    ap0 =
                    qscriptvalue_cast<
                    QBrush*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RPainterPath: Argument 0 is not of type QBrush*.",
                               context);                    
                    }
                    QBrush& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setBrush(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.setBrush().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::setBrush", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::setMode
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::setMode", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::setMode";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("setMode", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPainterPath::Mode */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RPainterPath::Mode*
                    ap0 =
                    qscriptvalue_cast<
                    RPainterPath::Mode*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RPainterPath: Argument 0 is not of type RPainterPath::Mode*.",
                               context);                    
                    }
                    RPainterPath::Mode& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setMode(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPainterPath::Mode */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RPainterPath::Mode*
                    ap0 =
                    qscriptvalue_cast<
                    RPainterPath::Mode*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RPainterPath: Argument 0 is not of type RPainterPath::Mode*.",
                               context);                    
                    }
                    RPainterPath::Mode& a0 = *ap0;
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setMode(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.setMode().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::setMode", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::getMode
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::getMode", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::getMode";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("getMode", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPainterPath::Mode */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RPainterPath::Mode*
                    ap0 =
                    qscriptvalue_cast<
                    RPainterPath::Mode*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RPainterPath: Argument 0 is not of type RPainterPath::Mode*.",
                               context);                    
                    }
                    RPainterPath::Mode& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getMode(a0);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.getMode().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::getMode", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::setHighlighted
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::setHighlighted", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::setHighlighted";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("setHighlighted", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setHighlighted(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.setHighlighted().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::setHighlighted", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::isHighlighted
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::isHighlighted", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::isHighlighted";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("isHighlighted", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isHighlighted();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.isHighlighted().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::isHighlighted", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::setSelected
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::setSelected", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::setSelected";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("setSelected", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setSelected(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.setSelected().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::setSelected", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::isSelected
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::isSelected", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::isSelected";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("isSelected", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isSelected();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.isSelected().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::isSelected", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::setFixedPenColor
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::setFixedPenColor", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::setFixedPenColor";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("setFixedPenColor", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setFixedPenColor(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.setFixedPenColor().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::setFixedPenColor", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::isFixedPenColor
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::isFixedPenColor", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::isFixedPenColor";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("isFixedPenColor", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isFixedPenColor();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.isFixedPenColor().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::isFixedPenColor", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::setFixedBrushColor
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::setFixedBrushColor", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::setFixedBrushColor";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("setFixedBrushColor", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setFixedBrushColor(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.setFixedBrushColor().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::setFixedBrushColor", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::isFixedBrushColor
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::isFixedBrushColor", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::isFixedBrushColor";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("isFixedBrushColor", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isFixedBrushColor();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.isFixedBrushColor().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::isFixedBrushColor", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::setAutoRegen
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::setAutoRegen", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::setAutoRegen";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("setAutoRegen", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setAutoRegen(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.setAutoRegen().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::setAutoRegen", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::getAutoRegen
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::getAutoRegen", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::getAutoRegen";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("getAutoRegen", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getAutoRegen();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.getAutoRegen().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::getAutoRegen", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::setAlwaysRegen
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::setAlwaysRegen", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::setAlwaysRegen";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("setAlwaysRegen", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setAlwaysRegen(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.setAlwaysRegen().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::setAlwaysRegen", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::getAlwaysRegen
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::getAlwaysRegen", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::getAlwaysRegen";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("getAlwaysRegen", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getAlwaysRegen();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.getAlwaysRegen().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::getAlwaysRegen", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::setInheritPen
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::setInheritPen", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::setInheritPen";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("setInheritPen", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setInheritPen(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.setInheritPen().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::setInheritPen", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::getInheritPen
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::getInheritPen", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::getInheritPen";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("getInheritPen", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getInheritPen();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.getInheritPen().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::getInheritPen", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::setPixelUnit
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::setPixelUnit", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::setPixelUnit";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("setPixelUnit", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setPixelUnit(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.setPixelUnit().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::setPixelUnit", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::getPixelUnit
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::getPixelUnit", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::getPixelUnit";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("getPixelUnit", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getPixelUnit();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.getPixelUnit().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::getPixelUnit", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::setNoClipping
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::setNoClipping", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::setNoClipping";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("setNoClipping", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setNoClipping(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.setNoClipping().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::setNoClipping", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::getNoClipping
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::getNoClipping", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::getNoClipping";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("getNoClipping", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getNoClipping();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.getNoClipping().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::getNoClipping", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::setNoColorMode
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::setNoColorMode", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::setNoColorMode";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("setNoColorMode", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setNoColorMode(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.setNoColorMode().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::setNoColorMode", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::getNoColorMode
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::getNoColorMode", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::getNoColorMode";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("getNoColorMode", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getNoColorMode();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.getNoColorMode().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::getNoColorMode", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::setSimplePointDisplay
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::setSimplePointDisplay", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::setSimplePointDisplay";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("setSimplePointDisplay", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setSimplePointDisplay(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.setSimplePointDisplay().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::setSimplePointDisplay", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::getSimplePointDisplay
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::getSimplePointDisplay", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::getSimplePointDisplay";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("getSimplePointDisplay", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getSimplePointDisplay();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.getSimplePointDisplay().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::getSimplePointDisplay", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::setPixelWidth
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::setPixelWidth", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::setPixelWidth";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("setPixelWidth", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setPixelWidth(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.setPixelWidth().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::setPixelWidth", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::getPixelWidth
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::getPixelWidth", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::getPixelWidth";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("getPixelWidth", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getPixelWidth();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.getPixelWidth().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::getPixelWidth", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::setFeatureSize
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::setFeatureSize", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::setFeatureSize";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("setFeatureSize", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setFeatureSize(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.setFeatureSize().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::setFeatureSize", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::getFeatureSize
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::getFeatureSize", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::getFeatureSize";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("getFeatureSize", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        
               self->getFeatureSize();
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.getFeatureSize().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::getFeatureSize", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::setPixelSizeHint
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::setPixelSizeHint", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::setPixelSizeHint";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("setPixelSizeHint", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setPixelSizeHint(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.setPixelSizeHint().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::setPixelSizeHint", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::getPixelSizeHint
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::getPixelSizeHint", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::getPixelSizeHint";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("getPixelSizeHint", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        
               self->getPixelSizeHint();
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.getPixelSizeHint().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::getPixelSizeHint", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::getDistanceTo
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::getDistanceTo", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::getDistanceTo";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("getDistanceTo", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RPainterPath: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        
               self->getDistanceTo(a0);
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.getDistanceTo().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::getDistanceTo", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::addPoint
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::addPoint", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::addPoint";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("addPoint", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RPainterPath: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addPoint(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.addPoint().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::addPoint", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::hasPoints
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::hasPoints", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::hasPoints";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("hasPoints", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->hasPoints();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.hasPoints().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::hasPoints", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::setPoints
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::setPoints", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::setPoints";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("setPoints", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isArray()
        ) /* type: QList < RVector > */
    
    ){
    // prepare arguments:
    
                    // argument isArray
                    QList < RVector >
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setPoints(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.setPoints().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::setPoints", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::getPoints
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::getPoints", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::getPoints";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("getPoints", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QList < RVector >'
    QList < RVector > cppResult =
        
               self->getPoints();
        // return type: QList < RVector >
                // List of ...:
                result = REcmaHelper::listToScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.getPoints().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::getPoints", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::transform
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::transform", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::transform";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("transform", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QTransform */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QTransform*
                    ap0 =
                    qscriptvalue_cast<
                    QTransform*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RPainterPath: Argument 0 is not of type QTransform*.",
                               context);                    
                    }
                    QTransform& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->transform(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.transform().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::transform", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::move
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::move", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::move";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("move", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RPainterPath: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->move(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.move().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::move", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::rotate
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::rotate", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::rotate";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("rotate", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->rotate(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.rotate().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::rotate", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::scale
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::scale", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::scale";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("scale", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: double */
     && (
            context->argument(1).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->scale(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.scale().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::scale", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::getElementCount
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::getElementCount", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::getElementCount";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("getElementCount", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        
               self->getElementCount();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.getElementCount().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::getElementCount", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::getXAt
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::getXAt", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::getXAt";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("getXAt", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        
               self->getXAt(a0);
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.getXAt().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::getXAt", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::getYAt
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::getYAt", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::getYAt";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("getYAt", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        
               self->getYAt(a0);
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.getYAt().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::getYAt", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::getTypeAt
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::getTypeAt", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::getTypeAt";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("getTypeAt", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QPainterPath::ElementType'
    QPainterPath::ElementType cppResult =
        
               self->getTypeAt(a0);
        // return type: QPainterPath::ElementType
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.getTypeAt().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::getTypeAt", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::isEmpty
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::isEmpty", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::isEmpty";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("isEmpty", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isEmpty();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.isEmpty().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::isEmpty", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::addShape
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::addShape", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::addShape";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("addShape", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QSharedPointer < RShape > */
    
    ){
    // prepare arguments:
    
                    // argument is SharedPointer
                    QSharedPointer < RShape > 
                    a0;

                    // argument might be a simple pointer:
                     RShape * o0 = 
                    qscriptvalue_cast < RShape * > (context->argument(0));

                    if (o0!=NULL) {
                        a0 =
                        
                          // always clone shape if we expect a shared pointer (might be a simple object on stack):
                          QSharedPointer < RShape >(o0->clone());
                        
                    }
                    else {
                        // qscriptvalue_cast to QSharedPointer<BaseClass> does not work
                        QSharedPointer < RShape >*
                        p0;

                        p0 =
                        qscriptvalue_cast <QSharedPointer < RShape >* > (context->argument(0));

                        if (p0==NULL) {
                           return REcmaHelper::throwError("RPainterPath: Argument 0 is not of type  RShape .", context);                    
                        }

                        a0 = *p0;

                           //return REcmaHelper::throwError("RPainterPath: Argument 0 is not of type  RShape .",
                           //    context);                    
                    }

                    //QSharedPointer < RShape > 
                    //a0 =
                    //QSharedPointer < RShape >(o0->clone());
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addShape(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.addShape().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::addShape", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::addOriginalShape
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::addOriginalShape", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::addOriginalShape";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("addOriginalShape", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QSharedPointer < RShape > */
    
    ){
    // prepare arguments:
    
                    // argument is SharedPointer
                    QSharedPointer < RShape > 
                    a0;

                    // argument might be a simple pointer:
                     RShape * o0 = 
                    qscriptvalue_cast < RShape * > (context->argument(0));

                    if (o0!=NULL) {
                        a0 =
                        
                          // always clone shape if we expect a shared pointer (might be a simple object on stack):
                          QSharedPointer < RShape >(o0->clone());
                        
                    }
                    else {
                        // qscriptvalue_cast to QSharedPointer<BaseClass> does not work
                        QSharedPointer < RShape >*
                        p0;

                        p0 =
                        qscriptvalue_cast <QSharedPointer < RShape >* > (context->argument(0));

                        if (p0==NULL) {
                           return REcmaHelper::throwError("RPainterPath: Argument 0 is not of type  RShape .", context);                    
                        }

                        a0 = *p0;

                           //return REcmaHelper::throwError("RPainterPath: Argument 0 is not of type  RShape .",
                           //    context);                    
                    }

                    //QSharedPointer < RShape > 
                    //a0 =
                    //QSharedPointer < RShape >(o0->clone());
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addOriginalShape(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.addOriginalShape().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::addOriginalShape", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::hasOriginalShapes
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::hasOriginalShapes", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::hasOriginalShapes";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("hasOriginalShapes", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->hasOriginalShapes();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.hasOriginalShapes().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::hasOriginalShapes", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::countOriginalShapes
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::countOriginalShapes", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::countOriginalShapes";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("countOriginalShapes", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        
               self->countOriginalShapes();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.countOriginalShapes().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::countOriginalShapes", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::getOriginalShape
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::getOriginalShape", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::getOriginalShape";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPainterPath* self = 
                        getSelf("getOriginalShape", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QSharedPointer < RShape >'
    QSharedPointer < RShape > cppResult =
        
               self->getOriginalShape(a0);
        // return type: QSharedPointer < RShape >
                // Shared pointer to shape, cast to best match:
                result = REcmaHelper::toScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.getOriginalShape().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::getOriginalShape", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::rotateList
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::rotateList", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::rotateList";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isArray()
        ) /* type: QList < RPainterPath > */
     && (
            context->argument(1).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isArray
                    QList < RPainterPath >
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RPainterPath::
       rotateList(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.rotateList().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::rotateList", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::translateList
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::translateList", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::translateList";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isArray()
        ) /* type: QList < RPainterPath > */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isArray
                    QList < RPainterPath >
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap1 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if (ap1 == NULL) {
                           return REcmaHelper::throwError("RPainterPath: Argument 1 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a1 = 
                    *ap1;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RPainterPath::
       translateList(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.translateList().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::translateList", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::scaleList
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::scaleList", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::scaleList";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isArray()
        ) /* type: QList < RPainterPath > */
     && (
            context->argument(1).isNumber()
        ) /* type: double */
     && (
            context->argument(2).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isArray
                    QList < RPainterPath >
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a2 =
                    (double)
                    
                    context->argument( 2 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RPainterPath::
       scaleList(a0
        ,
    a1
        ,
    a2);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.scaleList().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::scaleList", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::getMinList
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::getMinList", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::getMinList";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isArray()
        ) /* type: QList < RPainterPath > */
    
    ){
    // prepare arguments:
    
                    // argument isArray
                    QList < RPainterPath >
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'RVector'
    RVector cppResult =
        RPainterPath::
       getMinList(a0);
        // return type: RVector
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.getMinList().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::getMinList", context, engine);
            return result;
        }
         QScriptValue
        REcmaPainterPath::getMaxList
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPainterPath::getMaxList", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPainterPath::getMaxList";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isArray()
        ) /* type: QList < RPainterPath > */
    
    ){
    // prepare arguments:
    
                    // argument isArray
                    QList < RPainterPath >
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'RVector'
    RVector cppResult =
        RPainterPath::
       getMaxList(a0);
        // return type: RVector
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPainterPath.getMaxList().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPainterPath::getMaxList", context, engine);
            return result;
        }
         QScriptValue REcmaPainterPath::toString
    (QScriptContext *context, QScriptEngine *engine)
    
    {

    RPainterPath* self = getSelf("toString", context);
    
    QString result;
    
            QDebug d(&result);
            if (self!=NULL) {
                d << *self;
            }
            else {
                d << "NULL";
            }
        
    return QScriptValue(result);
    }
     QScriptValue REcmaPainterPath::copy
    (QScriptContext *context, QScriptEngine *engine)
    
    {
        RPainterPath cp = qscriptvalue_cast<RPainterPath>(context->thisObject());
        return qScriptValueFromValue(engine, cp);
    }
     QScriptValue REcmaPainterPath::destroy(QScriptContext *context, QScriptEngine *engine)
    
    {

        RPainterPath* self = getSelf("RPainterPath", context);
        //Q_ASSERT(self!=NULL);
        if (self==NULL) {
            return REcmaHelper::throwError("self is NULL", context);
        }
        
    
        delete self;
        context->thisObject().setData(engine->nullValue());
        context->thisObject().prototype().setData(engine->nullValue());
        context->thisObject().setPrototype(engine->nullValue());
        context->thisObject().setScriptClass(NULL);
        return engine->undefinedValue();
    }
    RPainterPath* REcmaPainterPath::getSelf(const QString& fName, QScriptContext* context)
    
        {
            RPainterPath* self = NULL;

            
                // self could be a normal object (e.g. from an UI file) or
                // an ECMA shell object (made from an ECMA script):
                //self = getSelfShell(fName, context);
                

            //if (self==NULL) {
                self = REcmaHelper::scriptValueTo<RPainterPath >(context->thisObject())
                
                ;
            //}

            if (self == NULL){
                // avoid recursion (toString is used by the backtrace):
                if (fName!="toString") {
                    REcmaHelper::throwError(QString("RPainterPath.%1(): "
                        "This object is not a RPainterPath").arg(fName),
                        context);
                }
                return NULL;
            }

            return self;
        }
        RPainterPath* REcmaPainterPath::getSelfShell(const QString& fName, QScriptContext* context)
    
        {
          RPainterPath* selfBase = getSelf(fName, context);
                RPainterPath* self = dynamic_cast<RPainterPath*>(selfBase);
                //return REcmaHelper::scriptValueTo<RPainterPath >(context->thisObject());
            if(self == NULL){
                REcmaHelper::throwError(QString("RPainterPath.%1(): "
                    "This object is not a RPainterPath").arg(fName),
                    context);
            }

            return self;
            


        }
         QScriptValue REcmaPainterPath::toScriptValueEnumMode(QScriptEngine* engine, const RPainterPath::Mode& value)
    
        {
            return QScriptValue(engine, (int)value);
        }
         void REcmaPainterPath::fromScriptValueEnumMode(const QScriptValue& value, RPainterPath::Mode& out)
    
        {
            out = qvariant_cast<RPainterPath::Mode>(value.toVariant());
        }
        