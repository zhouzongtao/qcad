<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./gui" filename="RMathComboBox.h"><comment type="block">/**
 * Copyright (c) 2011-2019 by Andrew Mustun. All rights reserved.
 * 
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RMATHCOMBOBOX_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RMATHCOMBOBOX_H_</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gui_global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QMetaType&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QComboBox&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RMath.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RMathLineEdit.h"</cpp:file></cpp:include>

<comment type="block">/**
 * \scriptable
 * \ingroup gui
 */</comment>
<class>class <macro><name>QCADGUI_EXPORT</name></macro> <name>RMathComboBox</name><super>: <specifier>public</specifier> <name>QComboBox</name></super> <block>{<private type="default">

<decl_stmt><decl><type><name>Q_OBJECT</name></type>

<comment type="line">// keep extra ';' in place for the benefit of ecmagenerator:</comment>
<name>Q_PROPERTY</name><argument_list>(<argument><expr><name>bool</name> <name>angle</name> <name>READ</name> <name>isAngle</name> <name>WRITE</name> <name>setAngle</name></expr></argument>)</argument_list>
<name>Q_PROPERTY</name><argument_list>(<argument><expr><name>bool</name> <name>integer</name> <name>READ</name> <name>isInteger</name> <name>WRITE</name> <name>setInteger</name></expr></argument>)</argument_list>

public</decl></decl_stmt>:
    <constructor_decl><name>RMathComboBox</name><parameter_list>(<param><decl><type><name>QWidget</name>*</type> <name>parent</name> =<init> <expr><name>NULL</name></expr></init></decl></param>)</parameter_list>;</constructor_decl>

    <function><type><name>RMathLineEdit</name>*</type> <name>getMathLineEdit</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <decl_stmt><decl><type><name>QLineEdit</name>*</type> <name>le</name> =<init> <expr><call><name>lineEdit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RMathLineEdit</name>*</type> <name>me</name> =<init> <expr><call><name>dynamic_cast<argument_list>&lt;<argument><name>RMathLineEdit</name>*</argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>le</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>Q_ASSERT</name><argument_list>(<argument><expr><name>me</name>!=<name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>me</name></expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>isAngle</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><call><name>getMathLineEdit</name><argument_list>()</argument_list></call>-&gt;<call><name>isAngle</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    <function><type><name>void</name></type> <name>setAngle</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>getMathLineEdit</name><argument_list>()</argument_list></call>-&gt;<call><name>setAngle</name><argument_list>(<argument><expr><name>on</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><name>bool</name></type> <name>isInteger</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><call><name>getMathLineEdit</name><argument_list>()</argument_list></call>-&gt;<call><name>isInteger</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    <function><type><name>void</name></type> <name>setInteger</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>getMathLineEdit</name><argument_list>()</argument_list></call>-&gt;<call><name>setInteger</name><argument_list>(<argument><expr><name>on</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>setValue</name><parameter_list>(<param><decl><type><name>double</name></type> <name>v</name></decl></param>, <param><decl><type><name>int</name></type> <name>precision</name>=<init><expr>6</expr></init></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>getMathLineEdit</name><argument_list>()</argument_list></call>-&gt;<call><name>setValue</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><name>double</name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getMathLineEdit</name><argument_list>()</argument_list></call>-&gt;<call><name>getValue</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    <function><type><name>QString</name></type> <name>getError</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getMathLineEdit</name><argument_list>()</argument_list></call>-&gt;<call><name>getError</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    <function><type><name>void</name></type> <name>clearError</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>getMathLineEdit</name><argument_list>()</argument_list></call>-&gt;<call><name>clearError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>bool</name></type> <name>isValid</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getMathLineEdit</name><argument_list>()</argument_list></call>-&gt;<call><name>isValid</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>isSane</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getMathLineEdit</name><argument_list>()</argument_list></call>-&gt;<call><name>isSane</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

</private><public>public slots:
    <function><type><name>void</name></type> <name>slotTextChanged</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>text</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>getMathLineEdit</name><argument_list>()</argument_list></call>-&gt;<call><name>slotTextChanged</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><name>void</name></type> <name>slotValueChanged</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>, <param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>error</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// forward signal from RMathLineEdit:</comment>
        <function_decl><type><name>emit</name></type> <name>valueChanged</name><parameter_list>(<param><decl><type><name>value</name></type></decl></param>, <param><decl><type><name>error</name></type></decl></param>)</parameter_list>;</function_decl>
    }</block></function>

<label><name>signals</name>:</label>
    <function_decl><type><name>void</name></type> <name>valueChanged</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>, <param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>error</name></decl></param>)</parameter_list>;</function_decl>
</public>}</block>;</class>

<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RMathComboBox*</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
