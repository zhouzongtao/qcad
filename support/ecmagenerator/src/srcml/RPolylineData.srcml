<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./entity" filename="RPolylineData.h"><comment type="block">/**
 * Copyright (c) 2011-2018 by Andrew Mustun. All rights reserved.
 * 
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RPOLYLINEDATA_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RPOLYLINEDATA_H</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"entity_global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RBox.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"REntity.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RPolyline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RVector.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RDEFAULT_MIN1</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RDEFAULT_MIN1</name> -1</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/**
 * Stores and manages all data that defines the geometry and
 * appearance of a polyline entity.
 *
 * \scriptable
 * \copyable
 * \ingroup entity
 */</comment>
<class>class <macro><name>QCADENTITY_EXPORT</name></macro> <name>RPolylineData</name><super>: <specifier>public</specifier> <name>REntityData</name>, <specifier>protected</specifier> <name>RPolyline</name></super> <block>{<private type="default">

    <decl_stmt><decl><type><name>friend</name> class</type> <name>RPolylineEntity</name></decl>;</decl_stmt>

</private><protected>protected:
    <constructor_decl><name>RPolylineData</name><parameter_list>(<param><decl><type><name>RDocument</name>*</type> <name>document</name></decl></param>, <param><decl><type><name>const</name> <name>RPolylineData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</constructor_decl>

</protected><public>public:
    <constructor_decl><name>RPolylineData</name><parameter_list>()</parameter_list>;</constructor_decl>
    <constructor_decl><name>RPolylineData</name><parameter_list>(<param><decl><type><name>const</name> <name>RPolyline</name>&amp;</type> <name>polyline</name></decl></param>)</parameter_list>;</constructor_decl>

    <function><type><name>virtual</name> <name><name>RS</name>::<name>EntityType</name></name></type> <name>getType</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name><name>RS</name>::<name>EntityPolyline</name></name></expr>;</return>
    }</block></function>
    <function_decl><type><name>virtual</name> <name>QList<argument_list>&lt;<argument><name>RBox</name></argument>&gt;</argument_list></name></type> <name>getBoundingBoxes</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>ignoreEmpty</name>=<init><expr><name>false</name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>virtual</name> <name>QList<argument_list>&lt;<argument><name>RRefPoint</name></argument>&gt;</argument_list></name></type> <name>getReferencePoints</name><parameter_list>(<param><decl><type><name><name>RS</name>::<name>ProjectionRenderingHint</name></name></type> <name>hint</name> =<init> <expr><name><name>RS</name>::<name>RenderTop</name></name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>moveReferencePoint</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>referencePoint</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>targetPoint</name></decl></param>, <param><decl><type><name><name>Qt</name>::<name>KeyboardModifiers</name></name></type> <name>modifiers</name> =<init> <expr><name><name>Qt</name>::<name>NoModifier</name></name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function><type><name>virtual</name> <name>RShape</name>*</type> <name>castToShape</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><type><name>virtual</name> <name>double</name></type> <name>getDistanceTo</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>point</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited</name> =<init> <expr><name>true</name></expr></init></decl></param>, <param><decl><type><name>double</name></type> <name>range</name> =<init> <expr>0.0</expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>draft</name> =<init> <expr><name>false</name></expr></init></decl></param>, <param><decl><type><name>double</name></type> <name>strictRange</name> =<init> <expr><name>RMAXDOUBLE</name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <if>if <condition>(<expr>!<call><name>hasWidths</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>REntityData</name>::<name>getDistanceTo</name></name><argument_list>(<argument><expr><name>point</name></expr></argument>, <argument><expr><name>limited</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>draft</name></expr></argument>, <argument><expr><name>strictRange</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <comment type="line">// polylines with custom segment widths:</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>ret</name> =<init> <expr><call><name><name>RPolyline</name>::<name>getDistanceTo</name></name><argument_list>(<argument><expr><name>point</name></expr></argument>, <argument><expr><name>limited</name></expr></argument>, <argument><expr><name>strictRange</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ret</name>&gt;<name>range</name></expr>)</condition><then> <block>{
            <return>return <expr><name>RNANDOUBLE</name></expr>;</return>
        }</block></then></if>
        <return>return <expr><name>ret</name></expr>;</return>
    }</block></function>

    <function><type><name>RPolyline</name></type> <name>getPolylineShape</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr>*<name>this</name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
        <constructor_decl><name>RPolyline::clear</name><parameter_list>()</parameter_list>;</constructor_decl>
    }</block></function>

    <function><type><name>void</name></type> <name>normalize</name><parameter_list>(<param><decl><type><name>double</name></type> <name>tolerance</name> =<init> <expr><name><name>RS</name>::<name>PointTolerance</name></name></expr></init></decl></param>)</parameter_list> <block>{
        <constructor_decl><name>RPolyline::normalize</name><parameter_list>(<param><decl><type><name>tolerance</name></type></decl></param>)</parameter_list>;</constructor_decl>
    }</block></function>

    <function><type><name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getVertices</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><call><name><name>RPolyline</name>::<name>getVertices</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>RVector</name></type> <name>getVertexAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><call><name><name>RPolyline</name>::<name>getVertexAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>appendVertex</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>vertex</name></decl></param>, <param><decl><type><name>double</name></type> <name>bulge</name> =<init> <expr>0.0</expr></init></decl></param>, <param><decl><type><name>double</name></type> <name>w1</name> =<init> <expr>0.0</expr></init></decl></param>, <param><decl><type><name>double</name></type> <name>w2</name> =<init> <expr>0.0</expr></init></decl></param>)</parameter_list> <block>{
        <constructor_decl><name>RPolyline::appendVertex</name><parameter_list>(<param><decl><type><name>vertex</name></type></decl></param>, <param><decl><type><name>bulge</name></type></decl></param>, <param><decl><type><name>w1</name></type></decl></param>, <param><decl><type><name>w2</name></type></decl></param>)</parameter_list>;</constructor_decl>
    }</block></function>

    <function><type><name>void</name></type> <name>prependVertex</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>vertex</name></decl></param>, <param><decl><type><name>double</name></type> <name>bulge</name> =<init> <expr>0.0</expr></init></decl></param>, <param><decl><type><name>double</name></type> <name>w1</name> =<init> <expr>0.0</expr></init></decl></param>, <param><decl><type><name>double</name></type> <name>w2</name> =<init> <expr>0.0</expr></init></decl></param>)</parameter_list> <block>{
        <constructor_decl><name>RPolyline::prependVertex</name><parameter_list>(<param><decl><type><name>vertex</name></type></decl></param>, <param><decl><type><name>bulge</name></type></decl></param>, <param><decl><type><name>w1</name></type></decl></param>, <param><decl><type><name>w2</name></type></decl></param>)</parameter_list>;</constructor_decl>
    }</block></function>

    <function><type><name>void</name></type> <name>insertVertex</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>vertex</name></decl></param>)</parameter_list> <block>{
        <constructor_decl><name>RPolyline::insertVertex</name><parameter_list>(<param><decl><type><name>index</name></type></decl></param>, <param><decl><type><name>vertex</name></type></decl></param>)</parameter_list>;</constructor_decl>
    }</block></function>

    <function><type><name>void</name></type> <name>removeLastVertex</name><parameter_list>()</parameter_list> <block>{
        <constructor_decl><name>RPolyline::removeLastVertex</name><parameter_list>()</parameter_list>;</constructor_decl>
    }</block></function>

    <function><type><name>void</name></type> <name>removeVertex</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <constructor_decl><name>RPolyline::removeVertex</name><parameter_list>(<param><decl><type><name>index</name></type></decl></param>)</parameter_list>;</constructor_decl>
    }</block></function>

    <function><type><name>int</name></type> <name>countSegments</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><call><name><name>RPolyline</name>::<name>countSegments</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></type> <name>getSegmentAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><call><name><name>RPolyline</name>::<name>getSegmentAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>double</name></type> <name>getBulgeAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><call><name><name>RPolyline</name>::<name>getBulgeAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setBulgeAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>double</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <constructor_decl><name>RPolyline::setBulgeAt</name><parameter_list>(<param><decl><type><name>i</name></type></decl></param>, <param><decl><type><name>b</name></type></decl></param>)</parameter_list>;</constructor_decl>
    }</block></function>

    <function><type><name>double</name></type> <name>getDirection1</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><call><name><name>RPolyline</name>::<name>getDirection1</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>double</name></type> <name>getDirection2</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><call><name><name>RPolyline</name>::<name>getDirection2</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>reverse</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>RPolyline</name>::<name>reverse</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>RVector</name></type> <name>getEndPoint</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><call><name><name>RPolyline</name>::<name>getEndPoint</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>RVector</name></type> <name>getStartPoint</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><call><name><name>RPolyline</name>::<name>getStartPoint</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setClosed</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list> <block>{
        <constructor_decl><name>RPolyline::setClosed</name><parameter_list>(<param><decl><type><name>on</name></type></decl></param>)</parameter_list>;</constructor_decl>
    }</block></function>

    <function><type><name>bool</name></type> <name>isClosed</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><call><name><name>RPolyline</name>::<name>isClosed</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>isGeometricallyClosed</name><parameter_list>(<param><decl><type><name>double</name></type> <name>tolerance</name>=<init><expr><name><name>RS</name>::<name>PointTolerance</name></name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><call><name><name>RPolyline</name>::<name>isGeometricallyClosed</name></name><argument_list>(<argument><expr><name>tolerance</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>autoClose</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>RPolyline</name>::<name>toLogicallyClosed</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>toLogicallyClosed</name><parameter_list>(<param><decl><type><name>double</name></type> <name>tolerance</name>=<init><expr><name><name>RS</name>::<name>PointTolerance</name></name></expr></init></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>RPolyline</name>::<name>toLogicallyClosed</name></name><argument_list>(<argument><expr><name>tolerance</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>toLogicallyOpen</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>RPolyline</name>::<name>toLogicallyOpen</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name><name>RS</name>::<name>Orientation</name></name></type> <name>getOrientation</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>implicitelyClosed</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><call><name><name>RPolyline</name>::<name>getOrientation</name></name><argument_list>(<argument><expr><name>implicitelyClosed</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setGlobalWidth</name><parameter_list>(<param><decl><type><name>double</name></type> <name>w</name></decl></param>)</parameter_list> <block>{
        <constructor_decl><name>RPolyline::setGlobalWidth</name><parameter_list>(<param><decl><type><name>w</name></type></decl></param>)</parameter_list>;</constructor_decl>
    }</block></function>

    <function><type><name>void</name></type> <name>setStartWidthAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>double</name></type> <name>w</name></decl></param>)</parameter_list> <block>{
        <constructor_decl><name>RPolyline::setStartWidthAt</name><parameter_list>(<param><decl><type><name>i</name></type></decl></param>, <param><decl><type><name>w</name></type></decl></param>)</parameter_list>;</constructor_decl>
    }</block></function>

    <function><type><name>double</name></type> <name>getStartWidthAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><call><name><name>RPolyline</name>::<name>getStartWidthAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setEndWidthAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>double</name></type> <name>w</name></decl></param>)</parameter_list> <block>{
        <constructor_decl><name>RPolyline::setEndWidthAt</name><parameter_list>(<param><decl><type><name>i</name></type></decl></param>, <param><decl><type><name>w</name></type></decl></param>)</parameter_list>;</constructor_decl>
    }</block></function>

    <function><type><name>double</name></type> <name>getEndWidthAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><call><name><name>RPolyline</name>::<name>getEndWidthAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>hasWidths</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><call><name><name>RPolyline</name>::<name>hasWidths</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setStartWidths</name><parameter_list>(<param><decl><type><name>const</name> <name>QList<argument_list>&lt;<argument><name>double</name></argument>&gt;</argument_list></name>&amp;</type> <name>sw</name></decl></param>)</parameter_list> <block>{
        <constructor_decl><name>RPolyline::setStartWidths</name><parameter_list>(<param><decl><type><name>sw</name></type></decl></param>)</parameter_list>;</constructor_decl>
    }</block></function>

    <function><type><name>QList<argument_list>&lt;<argument><name>double</name></argument>&gt;</argument_list></name></type> <name>getStartWidths</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><call><name><name>RPolyline</name>::<name>getStartWidths</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setEndWidths</name><parameter_list>(<param><decl><type><name>const</name> <name>QList<argument_list>&lt;<argument><name>double</name></argument>&gt;</argument_list></name>&amp;</type> <name>ew</name></decl></param>)</parameter_list> <block>{
        <constructor_decl><name>RPolyline::setEndWidths</name><parameter_list>(<param><decl><type><name>ew</name></type></decl></param>)</parameter_list>;</constructor_decl>
    }</block></function>

    <function><type><name>QList<argument_list>&lt;<argument><name>double</name></argument>&gt;</argument_list></name></type> <name>getEndWidths</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><call><name><name>RPolyline</name>::<name>getEndWidths</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>QList<argument_list>&lt;<argument><name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>getExploded</name><parameter_list>(<param><decl><type><name>int</name></type> <name>segments</name> =<init> <expr><name>RDEFAULT_MIN1</name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><call><name><name>RPolyline</name>::<name>getExploded</name></name><argument_list>(<argument><expr><name>segments</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>RPainterPath</name></type> <name>toPainterPath</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><call><name><name>RPolyline</name>::<name>toPainterPath</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>simplify</name><parameter_list>(<param><decl><type><name>double</name></type> <name>angleTolerance</name></decl></param>)</parameter_list> <block>{
        <constructor_decl><name>RPolyline::simplify</name><parameter_list>(<param><decl><type><name>angleTolerance</name></type></decl></param>)</parameter_list>;</constructor_decl>
    }</block></function>

    <function><type><name>RPolyline</name></type> <name>roundAllCorners</name><parameter_list>(<param><decl><type><name>double</name></type> <name>radius</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>RPolyline</name>::<name>roundAllCorners</name></name><argument_list>(<argument><expr><name>radius</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>verifyTangency</name><parameter_list>(<param><decl><type><name>double</name></type> <name>toleranceMin</name> =<init> <expr><name><name>RS</name>::<name>AngleTolerance</name></name></expr></init></decl></param>, <param><decl><type><name>double</name></type> <name>toleranceMax</name> =<init> <expr><name>M_PI_4</name></expr></init></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>RPolyline</name>::<name>verifyTangency</name></name><argument_list>(<argument><expr><name>toleranceMin</name></expr></argument>, <argument><expr><name>toleranceMax</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function_decl><type><name>virtual</name> <name>QList<argument_list>&lt;<argument><name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>getShapes</name><parameter_list>(<param><decl><type><name>const</name> <name>RBox</name>&amp;</type> <name>queryBox</name> =<init> <expr><name>RDEFAULT_RBOX</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>ignoreComplex</name> =<init> <expr><name>false</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>segment</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>virtual</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getIntersectionPoints</name><parameter_list>(
            <param><decl><type><name>const</name> <name>REntityData</name>&amp;</type> <name>other</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited</name> =<init> <expr><name>true</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>same</name> =<init> <expr><name>false</name></expr></init></decl></param>,
            <param><decl><type><name>const</name> <name>RBox</name>&amp;</type> <name>queryBox</name> =<init> <expr><name>RDEFAULT_RBOX</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>ignoreComplex</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <function><type><name>void</name></type> <name>setPolylineGen</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>polylineGen</name> = <name>on</name></expr>;</expr_stmt>
    }</block></function>
    <function><type><name>bool</name></type> <name>getPolylineGen</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>polylineGen</name></expr>;</return>
    }</block></function>
    <function_decl><type><name>void</name></type> <name>setElevation</name><parameter_list>(<param><decl><type><name>double</name></type> <name>v</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>double</name></type> <name>getElevation</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

</public><protected>protected:
    <decl_stmt><decl><type><name>bool</name></type> <name>polylineGen</name></decl>;</decl_stmt>
</protected>}</block>;</class>

<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RPolylineData</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RPolylineData*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>const RPolylineData*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>QSharedPointer&lt;RPolylineData&gt;</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
