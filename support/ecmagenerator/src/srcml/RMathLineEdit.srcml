<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./gui" filename="RMathLineEdit.h"><comment type="block">/**
 * Copyright (c) 2011-2018 by Andrew Mustun. All rights reserved.
 * 
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RMATHLINEEDIT_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RMATHLINEEDIT_H_</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gui_global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QMetaType&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QLineEdit&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RMath.h"</cpp:file></cpp:include>

<comment type="block">/**
 * \scriptable
 * \ingroup gui
 */</comment>
<class>class <macro><name>QCADGUI_EXPORT</name></macro> <name>RMathLineEdit</name><super>: <specifier>public</specifier> <name>QLineEdit</name></super> <block>{<private type="default">

<function_decl><type><name>Q_OBJECT</name></type>

<comment type="line">// keep extra ';' in place for the benefit of ecmagenerator:</comment>
<name>Q_PROPERTY</name><parameter_list>(<param><decl><type><name>bool</name> <name>angle</name> <name>READ</name> <name>isAngle</name> <name>WRITE</name></type> <name>setAngle</name></decl></param>)</parameter_list>;</function_decl>
<constructor_decl><name>Q_PROPERTY</name><parameter_list>(<param><decl><type><name>bool</name> <name>integer</name> <name>READ</name> <name>isInteger</name> <name>WRITE</name></type> <name>setInteger</name></decl></param>)</parameter_list>;</constructor_decl>
<comment type="line">//Q_PROPERTY(double defaultValue READ getDefaultValue WRITE setDefaultValue);</comment>
<comment type="line">//Q_PROPERTY(int defaultUnit READ getDefaultUnit WRITE setDefaultUnit);</comment>
<comment type="line">//Q_PROPERTY(RS::Unit defaultUnit READ getDefaultUnit WRITE setDefaultUnit);</comment>
<comment type="line">//Q_ENUMS(RS::Unit);</comment>

</private><public>public:
    <constructor_decl><name>RMathLineEdit</name><parameter_list>(<param><decl><type><name>QWidget</name>*</type> <name>parent</name> =<init> <expr><name>NULL</name></expr></init></decl></param>)</parameter_list>;</constructor_decl>

    <function><type><name>bool</name></type> <name>isAngle</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
       <return>return <expr><name>angle</name></expr>;</return>
    }</block></function>
    <function><type><name>void</name></type> <name>setAngle</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list> <block>{
       <expr_stmt><expr><name>angle</name> = <name>on</name></expr>;</expr_stmt>
    }</block></function>
    <function><type><name>bool</name></type> <name>isInteger</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>integer</name></expr>;</return>
    }</block></function>
    <function><type><name>void</name></type> <name>setInteger</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>integer</name> = <name>on</name></expr>;</expr_stmt>
    }</block></function>

    <function_decl><type><name>void</name></type> <name>setValue</name><parameter_list>(<param><decl><type><name>double</name></type> <name>v</name></decl></param>, <param><decl><type><name>int</name></type> <name>precision</name>=<init><expr>6</expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>double</name></type> <name>getValue</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>QString</name></type> <name>getError</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>clearError</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><name>bool</name></type> <name>isValid</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>!<call><name><name>RMath</name>::<name>isNaN</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>isSane</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>RMath</name>::<name>isSane</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function_decl><type><name>void</name></type> <name>setToolTip</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>toolTip</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>QColor</name></type> <name>getNormalTextColor</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>void</name></type> <name>setTextColor</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>error</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
    double getDefaultValue() {
        return defaultValue;
    }
    void setDefaultValue(double v) {
        defaultValue = v;
    }
    */</comment>

    <comment type="line">//void setDefaultUnit(int defaultUnit);</comment>
    <comment type="line">//int getDefaultUnit();</comment>

</public><protected>protected:
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>keyPressEvent</name><parameter_list>(<param><decl><type><name>QKeyEvent</name>*</type> <name>event</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>keyReleaseEvent</name><parameter_list>(<param><decl><type><name>QKeyEvent</name>*</type> <name>event</name></decl></param>)</parameter_list>;</function_decl>
<comment type="line">//    virtual bool eventFilter(QObject* obj, QEvent* event);</comment>

</protected><public>public slots:
    <function_decl><type><name>void</name></type> <name>slotTextChanged</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>text</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>slotTextEdited</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>text</name></decl></param>)</parameter_list>;</function_decl>

<label><name>signals</name>:</label>
    <function_decl><type><name>void</name></type> <name>valueChanged</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>, <param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>error</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>upKeyPressed</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>downKeyPressed</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>enterKeyPressed</name><parameter_list>()</parameter_list>;</function_decl>

</public><private>private:
    <decl_stmt><decl><type><name>QPalette</name></type> <name>oriPalette</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>angle</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>integer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>value</name></decl>;</decl_stmt>
    <comment type="line">//RS::Unit defaultUnit;</comment>
    <decl_stmt><decl><type><name>QString</name></type> <name>error</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>originalToolTip</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>noEmit</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>noResultInToolTip</name></decl>;</decl_stmt>
    <comment type="line">//double defaultValue;</comment>
</private>}</block>;</class>

<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RMathLineEdit*</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
