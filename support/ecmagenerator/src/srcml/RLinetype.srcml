<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./core" filename="RLinetype.h"><comment type="block">/**
 * Copyright (c) 2011-2018 by Andrew Mustun. All rights reserved.
 * 
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RLINETYPE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RLINETYPE_H</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"core_global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QColor&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QCoreApplication&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QIcon&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QMetaType&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QString&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RLinetypePattern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RObject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RPropertyTypeId.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RVector.h"</cpp:file></cpp:include>

<class_decl>class <name>RDocument</name>;</class_decl>
<class_decl>class <name>RTransaction</name>;</class_decl>



<comment type="block">/**
 * Represents a linetype in a drawing. A linetype is an object (RObject).
 * A drawing contains and owns a set of linetypes.
 *
 * \ingroup core
 * \scriptable
 * \sharedPointerSupport
 */</comment>
<class>class <macro><name>QCADCORE_EXPORT</name></macro> <name>RLinetype</name><super>: <specifier>public</specifier> <name>RObject</name></super> <block>{<private type="default">

    <comment type="line">//Q_DECLARE_TR_FUNCTIONS(RLinetype);</comment>

</private><public>public:
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyDescription</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyMetric</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyPatternString</name></decl>;</decl_stmt>

</public><public>public:
    <constructor_decl><name>RLinetype</name><parameter_list>(<param><decl><type><name>RDocument</name>*</type> <name>document</name>=<init><expr><name>NULL</name></expr></init></decl></param>)</parameter_list>;</constructor_decl>
    <constructor_decl><name>RLinetype</name><parameter_list>(<param><decl><type><name>RDocument</name>*</type> <name>document</name></decl></param>, <param><decl><type><name>const</name> <name>RLinetypePattern</name>&amp;</type> <name>pattern</name></decl></param>)</parameter_list>;</constructor_decl>
    <constructor_decl><name>RLinetype</name><parameter_list>(<param><decl><type><name>const</name> <name>RLinetype</name>&amp;</type> <name>other</name></decl></param>)</parameter_list>;</constructor_decl>

    <destructor_decl><specifier>virtual</specifier> <name>~RLinetype</name><parameter_list>()</parameter_list>;</destructor_decl>

    <function_decl><type><name>static</name> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><name>virtual</name> <name><name>RS</name>::<name>EntityType</name></name></type> <name>getType</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name><name>RS</name>::<name>ObjectLinetype</name></name></expr>;</return>
    }</block></function>

    <function><type><name>virtual</name> <name>RLinetype</name>*</type> <name>clone</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr>new <call><name>RLinetype</name><argument_list>(<argument><expr>*<name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>QString</name></type> <name>getName</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>pattern</name>.<call><name>getName</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setName</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>n</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>pattern</name>.<call><name>setName</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>bool</name></type> <name>isMetric</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>pattern</name>.<call><name>isMetric</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setMetric</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>pattern</name>.<call><name>setMetric</name><argument_list>(<argument><expr><name>on</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>QString</name></type> <name>getDescription</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>pattern</name>.<call><name>getDescription</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setDescription</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>d</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>pattern</name>.<call><name>setDescription</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>QString</name></type> <name>getLabel</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>pattern</name>.<call><name>getLabel</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>QString</name></type> <name>getPatternString</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>pattern</name>.<call><name>getPatternString</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setPatternString</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>pattern</name>.<call><name>setPatternString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function_decl><type><name>bool</name></type> <name>isValid</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>virtual</name> <name>QPair<argument_list>&lt;<argument><name>QVariant</name></argument>, <argument><name>RPropertyAttributes</name></argument>&gt;</argument_list></name></type> <name>getProperty</name><parameter_list>(
            <param><decl><type><name>RPropertyTypeId</name>&amp;</type> <name>propertyTypeId</name></decl></param>,
            <param><decl><type><name>bool</name></type> <name>humanReadable</name> =<init> <expr><name>false</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>noAttributes</name> =<init> <expr><name>false</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>showOnRequest</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>setProperty</name><parameter_list>(<param><decl><type><name>RPropertyTypeId</name></type> <name>propertyTypeId</name></decl></param>,
            <param><decl><type><name>const</name> <name>QVariant</name>&amp;</type> <name>value</name></decl></param>, <param><decl><type><name>RTransaction</name>*</type> <name>transaction</name>=<init><expr><name>NULL</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>RLinetypePattern</name></type> <name>getPattern</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>void</name></type> <name>setPattern</name><parameter_list>(<param><decl><type><name>const</name> <name>RLinetypePattern</name>&amp;</type> <name>p</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>bool</name></type> <name>operator==</name><parameter_list>(<param><decl><type><name>const</name> <name>RLinetype</name> &amp;</type> <name>linetype</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>operator!=</name><parameter_list>(<param><decl><type><name>const</name> <name>RLinetype</name> &amp;</type> <name>linetype</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>operator&lt;</name><parameter_list>(<param><decl><type><name>const</name> <name>RLinetype</name> &amp;</type> <name>linetype</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>print</name><parameter_list>(<param><decl><type><name>QDebug</name></type> <name>dbg</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

</public><private>private:
    <decl_stmt><decl><type><name>RLinetypePattern</name></type> <name>pattern</name></decl>;</decl_stmt>
</private>}</block>;</class>

<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RLinetype</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RLinetype*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>QSharedPointer&lt;RLinetype&gt;</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>QSharedPointer&lt;RLinetype&gt;*</argument>)</argument_list></macro>
<typedef>typedef <type><name>QPair<argument_list>&lt;<argument><name>QString</name></argument>, <argument><name>RLinetype</name></argument>&gt;</argument_list></name></type> <name>_RPairStringRLinetype</name>;</typedef>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>_RPairStringRLinetype</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>QList&lt; _RPairStringRLinetype &gt;</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
