<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./core" filename="RLinetypePattern.h"><comment type="block">/**
 * Copyright (c) 2011-2018 by Andrew Mustun. All rights reserved.
 * 
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RLINETYPEPATTERN_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RLINETYPEPATTERN_H</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"core_global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QCoreApplication&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QMetaType&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QString&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QPair&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QList&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QVector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QMap&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RPainterPath.h"</cpp:file></cpp:include>

<comment type="block">/**
 * Represents a linetype pattern which can be used to draw
 * dashed graphical elements.
 *
 * \scriptable
 * \copyable
 */</comment>
<class>class <macro><name>QCADCORE_EXPORT</name></macro> <name>RLinetypePattern</name> <block>{<private type="default">
    <macro><name>Q_DECLARE_TR_FUNCTIONS</name><argument_list>(<argument>RLinetypePattern</argument>)</argument_list></macro>

    <decl_stmt><decl><type><name>friend</name> class</type> <name>RLinetype</name></decl>;</decl_stmt>

</private><public>public:
    <comment type="block">/**
     * \nonscriptable
     */</comment>
    <macro><name>RLinetypePattern</name><argument_list>(<argument>bool metric</argument>, <argument>const QString&amp; name</argument>, <argument>const QString&amp; description</argument>, <argument>int num...</argument>)</argument_list></macro>;

    <constructor_decl><name>RLinetypePattern</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>metric</name></decl></param>, <param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>name</name></decl></param>, <param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>description</name></decl></param>, <param><decl><type><name>const</name> <name>QList<argument_list>&lt;<argument><name>double</name></argument>&gt;</argument_list></name>&amp;</type> <name>dashes</name></decl></param>)</parameter_list>;</constructor_decl>

    <function_decl><type><name>void</name></type> <name>set</name><parameter_list>(<param><decl><type><name>const</name> <name>QList<argument_list>&lt;<argument><name>double</name></argument>&gt;</argument_list></name>&amp;</type> <name>dashes</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>QPair<argument_list>&lt;<argument><name>QString</name></argument>, <argument><name>RLinetypePattern</name>*</argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>loadAllFrom</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>metric</name></decl></param>, <param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>fileName</name></decl></param>)</parameter_list>;</function_decl>

    <constructor_decl><name>RLinetypePattern</name><parameter_list>()</parameter_list>;</constructor_decl>
    <constructor_decl><name>RLinetypePattern</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>metric</name></decl></param>, <param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>name</name></decl></param>, <param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>description</name></decl></param>)</parameter_list>;</constructor_decl>
    <constructor_decl><name>RLinetypePattern</name><parameter_list>(<param><decl><type><name>const</name> <name>RLinetypePattern</name>&amp;</type> <name>other</name></decl></param>)</parameter_list>;</constructor_decl>
    <destructor_decl><name>~RLinetypePattern</name><parameter_list>()</parameter_list>;</destructor_decl>

    <function_decl><type><name>bool</name></type> <name>isValid</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>int</name></type> <name>getNumDashes</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>QString</name></type> <name>getName</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>void</name></type> <name>setName</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>n</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>QString</name></type> <name>getDescription</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>void</name></type> <name>setDescription</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>d</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>double</name></type> <name>getScreenScale</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>void</name></type> <name>setScreenScale</name><parameter_list>(<param><decl><type><name>double</name></type> <name>s</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>getNoOffset</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>void</name></type> <name>setNoOffset</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>n</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>QString</name></type> <name>getLabel</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function><type><name>bool</name></type> <name>isMetric</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>metric</name></expr>;</return>
    }</block></function>
    <function><type><name>void</name></type> <name>setMetric</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>metric</name> = <name>on</name></expr>;</expr_stmt>
    }</block></function>

    <function_decl><type><name>bool</name></type> <name>setPatternString</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>patternString</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>QString</name></type> <name>getPatternString</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>QList<argument_list>&lt;<argument><name>double</name></argument>&gt;</argument_list></name></type> <name>getPattern</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>double</name></type> <name>getPatternLength</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>double</name></type> <name>getDashLengthAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>double</name></type> <name>getDashOffsetAt</name><parameter_list>(<param><decl><type><name>const</name> <name>QList<argument_list>&lt;<argument><name>double</name></argument>&gt;</argument_list></name>&amp;</type> <name>dashes</name></decl></param>, <param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>bool</name></type> <name>hasShapeNumberAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>int</name></type> <name>getShapeNumberAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>void</name></type> <name>setShapeNumberAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>int</name></type> <name>num</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>bool</name></type> <name>hasShapeScaleAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>double</name></type> <name>getShapeScaleAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>void</name></type> <name>setShapeScaleAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>double</name></type> <name>s</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>bool</name></type> <name>hasShapeRotationAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>double</name></type> <name>getShapeRotationAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>void</name></type> <name>setShapeRotationAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>double</name></type> <name>r</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>bool</name></type> <name>hasShapeOffsetAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>RVector</name></type> <name>getShapeOffsetAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>void</name></type> <name>setShapeOffsetAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>offset</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>bool</name></type> <name>hasShapeTextAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>QString</name></type> <name>getShapeTextAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>void</name></type> <name>setShapeTextAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>s</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>bool</name></type> <name>hasShapeTextStyleAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>QString</name></type> <name>getShapeTextStyleAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>void</name></type> <name>setShapeTextStyleAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>s</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>QList<argument_list>&lt;<argument><name>int</name></argument>&gt;</argument_list></name></type> <name>getShapeIndices</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>hasShapes</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>hasShapeAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>QList<argument_list>&lt;<argument><name>RPainterPath</name></argument>&gt;</argument_list></name></type> <name>getShapeAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>void</name></type> <name>updateShapes</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>double</name></type> <name>getLargestGap</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>hasDashAt</name><parameter_list>(<param><decl><type><name>double</name></type> <name>pos</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>double</name></type> <name>getDelta</name><parameter_list>(<param><decl><type><name>double</name></type> <name>pos</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>double</name></type> <name>getPatternOffset</name><parameter_list>(<param><decl><type><name>double</name></type> <name>length</name></decl></param>)</parameter_list>;</function_decl>
    <function><type><name>QList<argument_list>&lt;<argument><name>double</name></argument>&gt;</argument_list></name></type> <name>getSymmetries</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>symmetries</name></expr>;</return>
    }</block></function>

    <comment type="block">/**
     * \nonscriptable
     */</comment>
    <function_decl><type><name>double</name></type> <name>getPatternOffsetAt</name><parameter_list>(<param><decl><type><name>double</name></type> <name>length</name></decl></param>, <param><decl><type><name>double</name></type> <name>symmetryPos</name></decl></param>, <param><decl><type><name>double</name>*</type> <name>gap</name> =<init> <expr><name>NULL</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>end</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>scale</name><parameter_list>(<param><decl><type><name>double</name></type> <name>factor</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>QVector<argument_list>&lt;<argument><name>qreal</name></argument>&gt;</argument_list></name></type> <name>getScreenBasedLinetype</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>RLinetypePattern</name>&amp;</type> <name>operator=</name><parameter_list>(<param><decl><type><name>const</name> <name>RLinetypePattern</name>&amp;</type> <name>other</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>operator==</name><parameter_list>(<param><decl><type><name>const</name> <name>RLinetypePattern</name>&amp;</type> <name>other</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>operator&lt;</name><parameter_list>(<param><decl><type><name>const</name> <name>RLinetypePattern</name>&amp;</type> <name>other</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <function><type><name>bool</name></type> <name>isLoaded</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></function>
    <function><type><name>void</name></type> <name>load</name><parameter_list>()</parameter_list> <block>{}</block></function>

    <function_decl><type><name>static</name> <name>void</name></type> <name>initNameMap</name><parameter_list>()</parameter_list>;</function_decl>

</public><private>private:
    <decl_stmt><decl><type><name>bool</name></type> <name>metric</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>description</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>screenScale</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>noOffset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mutable</name> <name>QString</name></type> <name>patternString</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>QList<argument_list>&lt;<argument><name>double</name></argument>&gt;</argument_list></name></type> <name>pattern</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>QMap<argument_list>&lt;<argument><name>int</name></argument>, <argument><name>QList<argument_list>&lt;<argument><name>RPainterPath</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>shapes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QMap<argument_list>&lt;<argument><name>int</name></argument>, <argument><name>QString</name></argument>&gt;</argument_list></name></type> <name>shapeTexts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QMap<argument_list>&lt;<argument><name>int</name></argument>, <argument><name>QString</name></argument>&gt;</argument_list></name></type> <name>shapeTextStyles</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QMap<argument_list>&lt;<argument><name>int</name></argument>, <argument><name>int</name></argument>&gt;</argument_list></name></type> <name>shapeNumbers</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QMap<argument_list>&lt;<argument><name>int</name></argument>, <argument><name>double</name></argument>&gt;</argument_list></name></type> <name>shapeScales</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QMap<argument_list>&lt;<argument><name>int</name></argument>, <argument><name>double</name></argument>&gt;</argument_list></name></type> <name>shapeRotations</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QMap<argument_list>&lt;<argument><name>int</name></argument>, <argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>shapeOffsets</name></decl>;</decl_stmt>

    <comment type="line">// internal info about segments at which the pattern is symmetrical:</comment>
    <decl_stmt><decl><type><name>QList<argument_list>&lt;<argument><name>double</name></argument>&gt;</argument_list></name></type> <name>symmetries</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>static</name> <name>QMap<argument_list>&lt;<argument><name>QString</name></argument>, <argument><name>QString</name></argument>&gt;</argument_list></name></type> <name>nameMap</name></decl>;</decl_stmt>
</private>}</block>;</class>

<function_decl><type><name>QCADCORE_EXPORT</name> <name>QDebug</name></type> <name>operator&lt;&lt;</name><parameter_list>(<param><decl><type><name>QDebug</name></type> <name>dbg</name></decl></param>, <param><decl><type><name>const</name> <name>RLinetypePattern</name>&amp;</type> <name>p</name></decl></param>)</parameter_list>;</function_decl>

<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RLinetypePattern*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>const RLinetypePattern*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RLinetypePattern</argument>)</argument_list></macro>
<typedef>typedef <type><name>QMap<argument_list>&lt;<argument><name>QString</name></argument>,<argument><name>RLinetypePattern</name></argument>&gt;</argument_list></name></type> <name>_RMapQStringRLinetypePattern</name>;</typedef>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>_RMapQStringRLinetypePattern*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>_RMapQStringRLinetypePattern</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
