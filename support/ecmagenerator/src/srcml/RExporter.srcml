<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./core" filename="RExporter.h"><comment type="block">/**
 * Copyright (c) 2011-2018 by Andrew Mustun. All rights reserved.
 * 
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>REXPORTER_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>REXPORTER_H</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"core_global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QBrush&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QColor&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QPen&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QStack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QTextLayout&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QTransform&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"REntity.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RImageData.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RMatrix.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RPainterPath.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RTextBasedData.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RView.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RViewportEntity.h"</cpp:file></cpp:include>

<class_decl>class <name>RArc</name>;</class_decl>
<class_decl>class <name>RCircle</name>;</class_decl>
<class_decl>class <name>RDocument</name>;</class_decl>
<class_decl>class <name>REllipse</name>;</class_decl>
<class_decl>class <name>RLine</name>;</class_decl>
<class_decl>class <name>RLinetype</name>;</class_decl>
<class_decl>class <name>RLinetypePattern</name>;</class_decl>
<class_decl>class <name>RMessageHandler</name>;</class_decl>
<class_decl>class <name>RPainterPathSource</name>;</class_decl>
<class_decl>class <name>RPoint</name>;</class_decl>
<class_decl>class <name>RPolyline</name>;</class_decl>
<class_decl>class <name>RProgressHandler</name>;</class_decl>
<class_decl>class <name>RRay</name>;</class_decl>
<class_decl>class <name>RSpline</name>;</class_decl>
<class_decl>class <name>RTriangle</name>;</class_decl>
<class_decl>class <name>RVector</name>;</class_decl>
<class_decl>class <name>RXLine</name>;</class_decl>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RDEFAULT_MIN1</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RDEFAULT_MIN1</name> -1</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/**
 * Abstract base class for exporters.
 *
 * Exporters export documents into files, views, etc.
 *
 * \ingroup core
 * \scriptable
 */</comment>
<class>class <macro><name>QCADCORE_EXPORT</name></macro> <name>RExporter</name> <block>{<private type="default">

</private><public>public:
    <constructor_decl><name>RExporter</name><parameter_list>()</parameter_list>;</constructor_decl>
    <constructor_decl><name>RExporter</name><parameter_list>(<param><decl><type><name>RDocument</name>&amp;</type> <name>document</name></decl></param>, <param><decl><type><name>RMessageHandler</name>*</type> <name>messageHandler</name> =<init> <expr><name>NULL</name></expr></init></decl></param>, <param><decl><type><name>RProgressHandler</name>*</type> <name>progressHandler</name> =<init> <expr><name>NULL</name></expr></init></decl></param>)</parameter_list>;</constructor_decl>
    <destructor_decl><specifier>virtual</specifier> <name>~RExporter</name><parameter_list>()</parameter_list>;</destructor_decl>

</public><private>private:
    <function_decl><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list>;</function_decl>

</private><public>public:

    <function_decl><type><name>QString</name></type> <name>getErrorMessage</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>void</name></type> <name>setLayerSource</name><parameter_list>(<param><decl><type><name>RDocument</name>*</type> <name>ls</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>setBlockSource</name><parameter_list>(<param><decl><type><name>RDocument</name>*</type> <name>bs</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/**
     * \nonscriptoverwritable
     */</comment>
    <function_decl><type><name>RDocument</name>&amp;</type> <name>getDocument</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>void</name></type> <name>setProjectionRenderingHint</name><parameter_list>(<param><decl><type><name><name>RS</name>::<name>ProjectionRenderingHint</name></name></type> <name>p</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name><name>RS</name>::<name>ProjectionRenderingHint</name></name></type> <name>getProjectionRenderingHint</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">//virtual RBox getClipRectangle() const;</comment>
    <function_decl><type><name>void</name></type> <name>setClipping</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>getClipping</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>setPen</name><parameter_list>(<param><decl><type><name>const</name> <name>QPen</name>&amp;</type> <name>pen</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>QPen</name></type> <name>getPen</name><parameter_list>(<param><decl><type><name>const</name> <name>RPainterPath</name>&amp;</type> <name>path</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>QPen</name></type> <name>getPen</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>setBrush</name><parameter_list>(<param><decl><type><name>const</name> <name>QBrush</name>&amp;</type> <name>brush</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>QBrush</name></type> <name>getBrush</name><parameter_list>(<param><decl><type><name>const</name> <name>RPainterPath</name>&amp;</type> <name>path</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>QBrush</name></type> <name>getBrush</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>RColor</name></type> <name>getColor</name><parameter_list>(<param><decl><type><name>const</name> <name>RColor</name>&amp;</type> <name>unresolvedColor</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>RColor</name></type> <name>getColor</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>resolve</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>setEntityAttributes</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>forceSelected</name>=<init><expr><name>false</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>setStyle</name><parameter_list>(<param><decl><type><name><name>Qt</name>::<name>PenStyle</name></name></type> <name>penStyle</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>setBrushStyle</name><parameter_list>(<param><decl><type><name><name>Qt</name>::<name>BrushStyle</name></name></type> <name>brushStyle</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>setDashPattern</name><parameter_list>(<param><decl><type><name>const</name> <name>QVector<argument_list>&lt;<argument><name>qreal</name></argument>&gt;</argument_list></name>&amp;</type> <name>dashes</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>setColor</name><parameter_list>(<param><decl><type><name>float</name></type> <name>r</name></decl></param>, <param><decl><type><name>float</name></type> <name>g</name></decl></param>, <param><decl><type><name>float</name></type> <name>b</name></decl></param>, <param><decl><type><name>float</name></type> <name>a</name> =<init> <expr>1.0f</expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>setColor</name><parameter_list>(<param><decl><type><name>const</name> <name>RColor</name>&amp;</type> <name>color</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>setLineweight</name><parameter_list>(<param><decl><type><name><name>RLineweight</name>::<name>Lineweight</name></name></type> <name>weight</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>setLinetypeId</name><parameter_list>(<param><decl><type><name><name>RLinetype</name>::<name>Id</name></name></type> <name>ltId</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>setLinetypePattern</name><parameter_list>(<param><decl><type><name>const</name> <name>RLinetypePattern</name>&amp;</type> <name>ltPattern</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>RLinetypePattern</name></type> <name>getLinetypePattern</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>REntity</name>*</type> <name>getBlockRefOrEntity</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name><name>REntity</name>::<name>Id</name></name></type> <name>getBlockRefOrEntityId</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>REntity</name>*</type> <name>getEntity</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>REntity</name>*</type> <name>getCurrentBlockRef</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>RViewportEntity</name>*</type> <name>getCurrentViewport</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>QStack<argument_list>&lt;<argument><name>REntity</name>*</argument>&gt;</argument_list></name></type> <name>getBlockRefViewportStack</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <comment type="block">/**
     * \nonscriptable
     */</comment>
    <function_decl><type><name>virtual</name> <name>const</name> <name>REntity</name>*</type> <name>getEntity</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>isEntitySelected</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>isPatternContinuous</name><parameter_list>(<param><decl><type><name>const</name> <name>RLinetypePattern</name>&amp;</type> <name>p</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>startExport</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>endExport</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>exportDocument</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>exportDocumentSettings</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportDocumentSetting</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>key</name></decl></param>, <param><decl><type><name>const</name> <name>QVariant</name>&amp;</type> <name>value</name></decl></param>, <param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>dictionaryName</name> =<init> <expr>"QCAD_OBJECTS"</expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportIntListWithName</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>dictionaryName</name></decl></param>, <param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>name</name></decl></param>, <param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>listName</name></decl></param>, <param><decl><type><name>QList<argument_list>&lt;<argument><name>int64_t</name></argument>&gt;</argument_list></name>&amp;</type> <name>values</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportLayers</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportLayerStates</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportBlocks</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportViews</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportLinetypes</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><name>virtual</name> <name>void</name></type> <name>exportLayer</name><parameter_list>(<param><decl><type><name>RLayer</name>&amp;</type></decl></param> <comment type="block">/*layer*/</comment>)</parameter_list> <block>{}</block></function>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportLayer</name><parameter_list>(<param><decl><type><name><name>RLayer</name>::<name>Id</name></name></type> <name>layerId</name></decl></param>)</parameter_list>;</function_decl>
    <function><type><name>virtual</name> <name>void</name></type> <name>exportLayerState</name><parameter_list>(<param><decl><type><name>RLayerState</name>&amp;</type></decl></param> <comment type="block">/*layerState*/</comment>)</parameter_list> <block>{}</block></function>
    <function><type><name>virtual</name> <name>void</name></type> <name>exportBlock</name><parameter_list>(<param><decl><type><name>RBlock</name>&amp;</type></decl></param> <comment type="block">/*block*/</comment>)</parameter_list> <block>{}</block></function>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportBlock</name><parameter_list>(<param><decl><type><name><name>RBlock</name>::<name>Id</name></name></type> <name>blockId</name></decl></param>)</parameter_list>;</function_decl>
    <function><type><name>virtual</name> <name>void</name></type> <name>exportView</name><parameter_list>(<param><decl><type><name>RView</name>&amp;</type></decl></param> <comment type="block">/*view*/</comment>)</parameter_list> <block>{}</block></function>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportView</name><parameter_list>(<param><decl><type><name><name>RView</name>::<name>Id</name></name></type> <name>viewId</name></decl></param>)</parameter_list>;</function_decl>
    <function><type><name>virtual</name> <name>void</name></type> <name>exportLinetype</name><parameter_list>(<param><decl><type><name>RLinetype</name>&amp;</type></decl></param> <comment type="block">/*linetype*/</comment>)</parameter_list> <block>{}</block></function>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportEntities</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>allBlocks</name> =<init> <expr><name>true</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>undone</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportEntities</name><parameter_list>(<param><decl><type><name>const</name> <name>RBox</name>&amp;</type> <name>box</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportEntities</name><parameter_list>(<param><decl><type><name>QSet<argument_list>&lt;<argument><name><name>REntity</name>::<name>Id</name></name></argument>&gt;</argument_list></name>&amp;</type> <name>entityIds</name></decl></param>, <param><decl><type><name>bool</name></type> <name>allBlocks</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportEntity</name><parameter_list>(<param><decl><type><name>REntity</name>&amp;</type> <name>entity</name></decl></param>, <param><decl><type><name>bool</name></type> <name>preview</name> =<init> <expr><name>false</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>allBlocks</name> =<init> <expr><name>true</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>forceSelected</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportEntity</name><parameter_list>(<param><decl><type><name><name>REntity</name>::<name>Id</name></name></type> <name>entityId</name></decl></param>, <param><decl><type><name>bool</name></type> <name>allBlocks</name> =<init> <expr><name>true</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>forceSelected</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>QSharedPointer<argument_list>&lt;<argument><name>RLayer</name></argument>&gt;</argument_list></name></type> <name>getEntityLayer</name><parameter_list>(<param><decl><type><name>REntity</name>&amp;</type> <name>entity</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>isVisible</name><parameter_list>(<param><decl><type><name>REntity</name>&amp;</type> <name>entity</name></decl></param>)</parameter_list>;</function_decl>
    <function><type><name>virtual</name> <name>void</name></type> <name>startEntity</name><parameter_list>(<param><decl><type><name>bool</name></type></decl></param> <comment type="block">/*topLevelEntity*/</comment>)</parameter_list> <block>{}</block></function>
    <function><type><name>virtual</name> <name>void</name></type> <name>endEntity</name><parameter_list>()</parameter_list> <block>{}</block></function>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportCurrentEntity</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>preview</name> =<init> <expr><name>false</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>forceSelected</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>unexportEntity</name><parameter_list>(<param><decl><type><name><name>REntity</name>::<name>Id</name></name></type> <name>entityId</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportShapes</name><parameter_list>(<param><decl><type><name>const</name> <name>QList<argument_list>&lt;<argument><name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name>&amp;</type> <name>shapes</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportShape</name><parameter_list>(<param><decl><type><name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></type> <name>shape</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportShapeSegment</name><parameter_list>(<param><decl><type><name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></type> <name>shape</name></decl></param>, <param><decl><type><name>double</name></type> <name>angle</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/**
     * Exports a line with the current attributes.
     */</comment>
    <function_decl><type><name>virtual</name> <name>double</name></type> <name>exportLine</name><parameter_list>(<param><decl><type><name>const</name> <name>RLine</name>&amp;</type> <name>line</name></decl></param>, <param><decl><type><name>double</name></type> <name>offset</name> =<init> <expr><name>RNANDOUBLE</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/**
     * \nonscriptable
     */</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>exportLinetypeShape</name><parameter_list>(<param><decl><type><name>QList<argument_list>&lt;<argument><name>RPainterPath</name></argument>&gt;</argument_list></name>&amp;</type> <name>pps</name></decl></param>, <param><decl><type><name>const</name> <name>RLine</name>&amp;</type> <name>line</name></decl></param>, <param><decl><type><name>double</name></type> <name>total</name></decl></param>, <param><decl><type><name>double</name></type> <name>length</name></decl></param>, <param><decl><type><name>double</name></type> <name>angle</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>cursor</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/**
     * Exports a line segment (a line without pattern). This is called
     * from the standard implementation of exportLine for every dash in a
     * dashed line.
     */</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportLineSegment</name><parameter_list>(<param><decl><type><name>const</name> <name>RLine</name>&amp;</type> <name>line</name></decl></param>, <param><decl><type><name>double</name></type> <name>angle</name> =<init> <expr><name>RNANDOUBLE</name></expr></init></decl></param>)</parameter_list> <specifier>= 0</specifier>;</function_decl>

    <comment type="block">/**
     * Exports an infinite line. Used for xlines (construction lines).
     */</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportXLine</name><parameter_list>(<param><decl><type><name>const</name> <name>RXLine</name>&amp;</type> <name>xLine</name></decl></param>)</parameter_list> <specifier>= 0</specifier>;</function_decl>

    <comment type="block">/**
     * Exports an infinite ray. Used for rays.
     */</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportRay</name><parameter_list>(<param><decl><type><name>const</name> <name>RRay</name>&amp;</type> <name>ray</name></decl></param>)</parameter_list> <specifier>= 0</specifier>;</function_decl>

    <comment type="block">/**
     * Exports a point with the current attributes.
     */</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportPoint</name><parameter_list>(<param><decl><type><name>const</name> <name>RPoint</name>&amp;</type> <name>point</name></decl></param>)</parameter_list> <specifier>= 0</specifier>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportCircle</name><parameter_list>(<param><decl><type><name>const</name> <name>RCircle</name>&amp;</type> <name>circle</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportArc</name><parameter_list>(<param><decl><type><name>const</name> <name>RArc</name>&amp;</type> <name>arc</name></decl></param>, <param><decl><type><name>double</name></type> <name>offset</name> =<init> <expr><name>RNANDOUBLE</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportArcSegment</name><parameter_list>(<param><decl><type><name>const</name> <name>RArc</name>&amp;</type> <name>arc</name></decl></param>, <param><decl><type><name>bool</name></type> <name>allowForZeroLength</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportEllipse</name><parameter_list>(<param><decl><type><name>const</name> <name>REllipse</name>&amp;</type> <name>ellipse</name></decl></param>, <param><decl><type><name>double</name></type> <name>offset</name> =<init> <expr><name>RNANDOUBLE</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportPolyline</name><parameter_list>(<param><decl><type><name>const</name> <name>RPolyline</name>&amp;</type> <name>polyline</name></decl></param>, <param><decl><type><name>bool</name></type> <name>polylineGen</name> =<init> <expr><name>true</name></expr></init></decl></param>, <param><decl><type><name>double</name></type> <name>offset</name> =<init> <expr><name>RNANDOUBLE</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportSpline</name><parameter_list>(<param><decl><type><name>const</name> <name>RSpline</name>&amp;</type> <name>spline</name></decl></param>, <param><decl><type><name>double</name></type> <name>offset</name> =<init> <expr><name>RNANDOUBLE</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportSplineSegment</name><parameter_list>(<param><decl><type><name>const</name> <name>RSpline</name>&amp;</type> <name>spline</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/**
     * \nonscriptable
     */</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportExplodable</name><parameter_list>(<param><decl><type><name>const</name> <name>RExplodable</name>&amp;</type> <name>explodable</name></decl></param>, <param><decl><type><name>double</name></type> <name>offset</name> =<init> <expr><name>RNANDOUBLE</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/**
     * \nonscriptable
     */</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportPainterPathSource</name><parameter_list>(<param><decl><type><name>const</name> <name>RPainterPathSource</name>&amp;</type> <name>pathSource</name></decl></param>, <param><decl><type><name>double</name></type> <name>z</name> =<init> <expr>0.0</expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportPainterPaths</name><parameter_list>(<param><decl><type><name>const</name> <name>QList<argument_list>&lt;<argument><name>RPainterPath</name></argument>&gt;</argument_list></name>&amp;</type> <name>paths</name></decl></param>, <param><decl><type><name>double</name></type> <name>z</name> =<init> <expr>0.0</expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportPainterPaths</name><parameter_list>(<param><decl><type><name>const</name> <name>QList<argument_list>&lt;<argument><name>RPainterPath</name></argument>&gt;</argument_list></name>&amp;</type> <name>paths</name></decl></param>, <param><decl><type><name>double</name></type> <name>angle</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>pos</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportBoundingBoxPaths</name><parameter_list>(<param><decl><type><name>const</name> <name>QList<argument_list>&lt;<argument><name>RPainterPath</name></argument>&gt;</argument_list></name>&amp;</type> <name>paths</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportImage</name><parameter_list>(<param><decl><type><name>const</name> <name>RImageData</name>&amp;</type> <name>image</name></decl></param>, <param><decl><type><name>bool</name></type> <name>forceSelected</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>QList<argument_list>&lt;<argument><name>RPainterPath</name></argument>&gt;</argument_list></name></type> <name>exportText</name><parameter_list>(<param><decl><type><name>const</name> <name>RTextBasedData</name>&amp;</type> <name>text</name></decl></param>, <param><decl><type><name>bool</name></type> <name>forceSelected</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportClipRectangle</name><parameter_list>(<param><decl><type><name>const</name> <name>RBox</name>&amp;</type> <name>clipRectangle</name></decl></param>, <param><decl><type><name>bool</name></type> <name>forceSelected</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportTransform</name><parameter_list>(<param><decl><type><name>const</name> <name>QTransform</name>&amp;</type> <name>t</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportEndTransform</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportTranslation</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>offset</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportEndTranslation</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportRotation</name><parameter_list>(<param><decl><type><name>double</name></type> <name>angle</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportEndRotation</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportScale</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>factors</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportEndScale</name><parameter_list>()</parameter_list>;</function_decl>

<comment type="line">//    virtual void clearTransform() {</comment>
<comment type="line">//        transform = QTransform();</comment>
<comment type="line">//    }</comment>
<comment type="line">//    virtual QTransform getTransform() const {</comment>
<comment type="line">//        return transform;</comment>
<comment type="line">//    }</comment>

    <function><type><name>virtual</name> <name>void</name></type> <name>exportThickPolyline</name><parameter_list>(<param><decl><type><name>const</name> <name>RPolyline</name>&amp;</type> <name>polyline</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>RPolyline</name></type> <name>pl</name> =<init> <expr><name>polyline</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>pl</name>.<call><name>stripWidths</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <constructor_decl><name>exportPolyline</name><parameter_list>(<param><decl><type><name>pl</name></type></decl></param>)</parameter_list>;</constructor_decl>
    }</block></function>

<comment type="line">//    virtual void exportThickLine(const RLine&amp; line, double w1, double w2) {</comment>
<comment type="line">//        Q_UNUSED(w1)</comment>
<comment type="line">//        Q_UNUSED(w2)</comment>
<comment type="line">//        exportLineSegment(line);</comment>
<comment type="line">//    }</comment>

<comment type="line">//    virtual void exportThickArc(const RArc&amp; arc, double w1, double w2) {</comment>
<comment type="line">//        Q_UNUSED(w1)</comment>
<comment type="line">//        Q_UNUSED(w2)</comment>
<comment type="line">//        exportArcSegment(arc);</comment>
<comment type="line">//    }</comment>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportQuad</name><parameter_list>(
        <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>p1</name></decl></param>,
        <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>p2</name></decl></param>,
        <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>p3</name></decl></param>,
        <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>p4</name></decl></param>
    )</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportVerticalQuad</name><parameter_list>(
        <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>p1</name></decl></param>,
        <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>p2</name></decl></param>,
        <param><decl><type><name>double</name></type> <name>height</name></decl></param>
    )</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportBox</name><parameter_list>(<param><decl><type><name>const</name> <name>RBox</name>&amp;</type> <name>box</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/**
     * Exports a triangle with the current attributes.
     */</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportTriangle</name><parameter_list>(<param><decl><type><name>const</name> <name>RTriangle</name>&amp;</type> <name>triangle</name></decl></param>)</parameter_list> <specifier>= 0</specifier>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportRectangle</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>p1</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>p2</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>double</name></type> <name>getLineTypePatternScale</name><parameter_list>(<param><decl><type><name>const</name> <name>RLinetypePattern</name>&amp;</type> <name>p</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <comment type="block">/**
     * Override to force text rendering mode.
     */</comment>
    <function><type><name>virtual</name> <name>bool</name></type> <name>isTextRenderedAsText</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>RSettings</name>::<name>isTextRenderedAsText</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function_decl><type><name>QStack<argument_list>&lt;<argument><name>REntity</name>*</argument>&gt;</argument_list></name></type> <name>getEntityStack</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>pushEntity</name><parameter_list>(<param><decl><type><name>REntity</name>*</type> <name>e</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>popEntity</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>setDraftMode</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list>;</function_decl>

    <function><type><name>void</name></type> <name>toggleDraftMode</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>setDraftMode</name><argument_list>(<argument><expr>!<name>draftMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>bool</name></type> <name>getDraftMode</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>draftMode</name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setTwoColorSelectedMode</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>twoColorSelectedMode</name> = <name>on</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>bool</name></type> <name>getTwoColorSelectedMode</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>twoColorSelectedMode</name></expr>;</return>
    }</block></function>

    <function_decl><type><name>void</name></type> <name>setScreenBasedLinetypes</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list>;</function_decl>

    <function><type><name>void</name></type> <name>toggleScreenBasedLinetypes</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>setScreenBasedLinetypes</name><argument_list>(<argument><expr>!<name>screenBasedLinetypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>virtual</name> <name>bool</name></type> <name>getScreenBasedLinetypes</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>screenBasedLinetypes</name></expr>;</return>
    }</block></function>

    <comment type="block">/**
     * \return True if this exporter exports only visible entities
     * (on visible layers).
     */</comment>
    <function><type><name>bool</name></type> <name>isVisualExporter</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>visualExporter</name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setVisualExporter</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>visualExporter</name> = <name>on</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>double</name></type> <name>getPixelSizeHint</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>pixelSizeHint</name></expr>;</return>
    }</block></function>

    <function_decl><type><name>virtual</name> <name>double</name></type> <name>getCurrentPixelSizeHint</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function><type><name>void</name></type> <name>setPixelSizeHint</name><parameter_list>(<param><decl><type><name>double</name></type> <name>v</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>pixelSizeHint</name> = <name>v</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>bool</name></type> <name>getPixelUnit</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>pixelUnit</name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setPixelUnit</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>pixelUnit</name> = <name>on</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>bool</name></type> <name>getPixelWidth</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>pixelWidth</name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setPixelWidth</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>pixelWidth</name> = <name>on</name></expr>;</expr_stmt>
    }</block></function>

<comment type="line">//    bool getCombineTransforms() const {</comment>
<comment type="line">//        return combineTransforms;</comment>
<comment type="line">//    }</comment>

<comment type="line">//    void setCombineTransforms(bool on) {</comment>
<comment type="line">//        combineTransforms = on;</comment>
<comment type="line">//    }</comment>

</public><protected>protected:
    <decl_stmt><decl><type><name>RDocument</name>*</type> <name>document</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QTransform</name></type> <name>transform</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QPen</name></type> <name>currentPen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RLinetypePattern</name></type> <name>currentLinetypePattern</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QBrush</name></type> <name>currentBrush</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QStack<argument_list>&lt;<argument><name>REntity</name>*</argument>&gt;</argument_list></name></type> <name>entityStack</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RLayer</name>*</type> <name>currentLayer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QStack<argument_list>&lt;<argument><name>REntity</name>*</argument>&gt;</argument_list></name></type> <name>blockRefViewportStack</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RDocument</name>*</type> <name>layerSource</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RDocument</name>*</type> <name>blockSource</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>draftMode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>twoColorSelectedMode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>screenBasedLinetypes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>visualExporter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>errorMessage</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>pixelSizeHint</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>pixelUnit</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>clipping</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>pixelWidth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Qt</name>::<name>PenCapStyle</name></name></type> <name>penCapStyle</name></decl>;</decl_stmt>
    <comment type="line">//bool combineTransforms;</comment>
    <decl_stmt><decl><type><name>QStack<argument_list>&lt;<argument><name>double</name></argument>&gt;</argument_list></name></type> <name>blockScales</name></decl>;</decl_stmt>

</protected><private>private:
    <decl_stmt><decl><type><name><name>RS</name>::<name>ProjectionRenderingHint</name></name></type> <name>projectionRenderingHint</name></decl>;</decl_stmt>
</private>}</block>;</class>

<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RExporter*</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
