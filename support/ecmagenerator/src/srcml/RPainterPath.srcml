<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./core" filename="RPainterPath.h"><comment type="block">/**
 * Copyright (c) 2011-2018 by Andrew Mustun. All rights reserved.
 * 
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RPAINTERPATH_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RPAINTERPATH_H</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"core_global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QBrush&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QFlags&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QPainterPath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QPen&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QSharedPointer&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RBox.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RVector.h"</cpp:file></cpp:include>

<class_decl>class <name>RArc</name>;</class_decl>
<class_decl>class <name>RShape</name>;</class_decl>
<class_decl>class <name>RSpline</name>;</class_decl>


<comment type="block">/**
 * Extended painter path with a z-level and a pen.
 *
 * \ingroup core
 * \scriptable
 * \copyable
 */</comment>
<class>class <macro><name>QCADCORE_EXPORT</name></macro> <name>RPainterPath</name> <super>: <specifier>public</specifier> <name>QPainterPath</name></super> <block>{<private type="default">

</private><public>public:
    <enum>enum <name>Mode</name> <block>{
        <expr><name>NoModes</name> = 0x0000</expr>,
        <expr><name>Selected</name> = 0x0001</expr>,              <comment type="line">//!&lt; show as selected</comment>
        <expr><name>Highlighted</name> = 0x0002</expr>,           <comment type="line">//!&lt; show as highlighted</comment>
        <expr><name>Invalid</name> = 0x0004</expr>,
        <expr><name>FixedPenColor</name> = 0x0008</expr>,
        <expr><name>FixedBrushColor</name> = 0x0010</expr>,
        <expr><name>AutoRegen</name> = 0x0020</expr>,             <comment type="line">//!&lt; arcs (regen on zoom change)</comment>
        <expr><name>AlwaysRegen</name> = 0x0040</expr>,
        <expr><name>InheritPen</name> = 0x0080</expr>,            <comment type="line">//!&lt; inherit pen from entity / context</comment>
        <expr><name>PixelUnit</name> = 0x0100</expr>,             <comment type="line">//!&lt; path displayed in pixel (not drawing units)</comment>
        <expr><name>NoClipping</name> = 0x0200</expr>,            <comment type="line">//!&lt; disable clipping for this path</comment>
        <expr><name>PixelWidth</name> = 0x0400</expr>,            <comment type="line">//!&lt; interpret width in pixels</comment>
        <expr><name>NoColorMode</name> = 0x0800</expr>,           <comment type="line">//!&lt; disable color mode</comment>
        <expr><name>SimplePointDisplay</name> = 0x1000</expr>     <comment type="line">//!&lt; simple point mode (for points in hatch patterns)</comment>
    }</block>;</enum>
    <macro><name>Q_DECLARE_FLAGS</name><argument_list>(<argument>Modes</argument>, <argument>Mode</argument>)</argument_list></macro>

</public><public>public:
    <constructor_decl><name>RPainterPath</name><parameter_list>()</parameter_list>;</constructor_decl>
    <constructor_decl><name>RPainterPath</name><parameter_list>(<param><decl><type><name>const</name> <name>QPainterPath</name>&amp;</type> <name>path</name></decl></param>)</parameter_list>;</constructor_decl>
    <constructor_decl><name>RPainterPath</name><parameter_list>(<param><decl><type><name>const</name> <name>RPainterPath</name>&amp;</type> <name>other</name></decl></param>)</parameter_list>;</constructor_decl>
    <destructor_decl><specifier>virtual</specifier> <name>~RPainterPath</name><parameter_list>()</parameter_list>;</destructor_decl>

    <function_decl><type><name>void</name></type> <name>setPath</name><parameter_list>(<param><decl><type><name>const</name> <name>QPainterPath</name>&amp;</type> <name>path</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>QList<argument_list>&lt;<argument><name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>getShapes</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function><type><name>RVector</name></type> <name>getCurrentPosition</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><call><name>RVector</name><argument_list>(<argument><expr><call><name>currentPosition</name><argument_list>()</argument_list></call>.<call><name>x</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>currentPosition</name><argument_list>()</argument_list></call>.<call><name>y</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function_decl><type><name>bool</name></type> <name>isAtPosition</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>p</name></decl></param>, <param><decl><type><name>double</name></type> <name>tolerance</name> =<init> <expr><name><name>RS</name>::<name>PointTolerance</name></name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <function><type><name>void</name></type> <name>moveTo</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>v</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>QPainterPath</name>::<name>moveTo</name></name><argument_list>(<argument><expr><name>v</name>.<name>x</name></expr></argument>, <argument><expr><name>v</name>.<name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>moveToOrNop</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>v</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>!<call><name>isAtPosition</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <constructor_decl><name>moveTo</name><parameter_list>(<param><decl><type><name>v</name></type></decl></param>)</parameter_list>;</constructor_decl>
        }</block></then></if>
    }</block></function>

    <function><type><name>void</name></type> <name>moveTo</name><parameter_list>(<param><decl><type><name>qreal</name></type> <name>x</name></decl></param>, <param><decl><type><name>qreal</name></type> <name>y</name></decl></param>)</parameter_list> <block>{
        <constructor_decl><name>QPainterPath::moveTo</name><parameter_list>(<param><decl><type><name>x</name></type></decl></param>, <param><decl><type><name>y</name></type></decl></param>)</parameter_list>;</constructor_decl>
    }</block></function>

    <comment type="block">/**
     * \nonscriptable
     */</comment>
    <function><type><name>void</name></type> <name>moveTo</name><parameter_list>(<param><decl><type><name>const</name> <name>QPointF</name>&amp;</type> <name>p</name></decl></param>)</parameter_list> <block>{
        <constructor_decl><name>QPainterPath::moveTo</name><parameter_list>(<param><decl><type><name>p</name></type></decl></param>)</parameter_list>;</constructor_decl>
    }</block></function>

    <function><type><name>void</name></type> <name>lineTo</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>v</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>QPainterPath</name>::<name>lineTo</name></name><argument_list>(<argument><expr><name>v</name>.<name>x</name></expr></argument>, <argument><expr><name>v</name>.<name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>lineTo</name><parameter_list>(<param><decl><type><name>qreal</name></type> <name>x</name></decl></param>, <param><decl><type><name>qreal</name></type> <name>y</name></decl></param>)</parameter_list> <block>{
        <constructor_decl><name>QPainterPath::lineTo</name><parameter_list>(<param><decl><type><name>x</name></type></decl></param>, <param><decl><type><name>y</name></type></decl></param>)</parameter_list>;</constructor_decl>
    }</block></function>

    <comment type="block">/**
     * \nonscriptable
     */</comment>
    <function><type><name>void</name></type> <name>lineTo</name><parameter_list>(<param><decl><type><name>const</name> <name>QPointF</name>&amp;</type> <name>p</name></decl></param>)</parameter_list> <block>{
        <constructor_decl><name>QPainterPath::lineTo</name><parameter_list>(<param><decl><type><name>p</name></type></decl></param>)</parameter_list>;</constructor_decl>
    }</block></function>

    <function><type><name>void</name></type> <name>quadTo</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>cp</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>v</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>QPainterPath</name>::<name>quadTo</name></name><argument_list>(<argument><expr><name>cp</name>.<name>x</name></expr></argument>, <argument><expr><name>cp</name>.<name>y</name></expr></argument>, <argument><expr><name>v</name>.<name>x</name></expr></argument>, <argument><expr><name>v</name>.<name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>quadTo</name><parameter_list>(<param><decl><type><name>qreal</name></type> <name>ctrlPtx</name></decl></param>, <param><decl><type><name>qreal</name></type> <name>ctrlPty</name></decl></param>, <param><decl><type><name>qreal</name></type> <name>endPtx</name></decl></param>, <param><decl><type><name>qreal</name></type> <name>endPty</name></decl></param>)</parameter_list> <block>{
        <constructor_decl><name>QPainterPath::quadTo</name><parameter_list>(<param><decl><type><name>ctrlPtx</name></type></decl></param>, <param><decl><type><name>ctrlPty</name></type></decl></param>, <param><decl><type><name>endPtx</name></type></decl></param>, <param><decl><type><name>endPty</name></type></decl></param>)</parameter_list>;</constructor_decl>
    }</block></function>

    <function><type><name>void</name></type> <name>cubicTo</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>cp1</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>cp2</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>v</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>QPainterPath</name>::<name>cubicTo</name></name><argument_list>(<argument><expr><name>cp1</name>.<name>x</name></expr></argument>, <argument><expr><name>cp1</name>.<name>y</name></expr></argument>, <argument><expr><name>cp2</name>.<name>x</name></expr></argument>, <argument><expr><name>cp2</name>.<name>y</name></expr></argument>, <argument><expr><name>v</name>.<name>x</name></expr></argument>, <argument><expr><name>v</name>.<name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>cubicTo</name><parameter_list>(<param><decl><type><name>qreal</name></type> <name>ctrlPt1x</name></decl></param>, <param><decl><type><name>qreal</name></type> <name>ctrlPt1y</name></decl></param>, <param><decl><type><name>qreal</name></type> <name>ctrlPt2x</name></decl></param>, <param><decl><type><name>qreal</name></type> <name>ctrlPt2y</name></decl></param>, <param><decl><type><name>qreal</name></type> <name>endPtx</name></decl></param>, <param><decl><type><name>qreal</name></type> <name>endPty</name></decl></param>)</parameter_list> <block>{
        <constructor_decl><name>QPainterPath::cubicTo</name><parameter_list>(<param><decl><type><name>ctrlPt1x</name></type></decl></param>, <param><decl><type><name>ctrlPt1y</name></type></decl></param>, <param><decl><type><name>ctrlPt2x</name></type></decl></param>, <param><decl><type><name>ctrlPt2y</name></type></decl></param>, <param><decl><type><name>endPtx</name></type></decl></param>, <param><decl><type><name>endPty</name></type></decl></param>)</parameter_list>;</constructor_decl>
    }</block></function>

    <function><type><name>void</name></type> <name>closeSubpath</name><parameter_list>()</parameter_list> <block>{
        <constructor_decl><name>QPainterPath::closeSubpath</name><parameter_list>()</parameter_list>;</constructor_decl>
    }</block></function>

<comment type="line">//    bool contains(const QPointF&amp; point) const {</comment>
<comment type="line">//        return QPainterPath::contains(point);</comment>
<comment type="line">//    }</comment>

<comment type="line">//    bool contains(const QRectF&amp; rectangle) const {</comment>
<comment type="line">//        return QPainterPath::contains(rectangle);</comment>
<comment type="line">//    }</comment>

<comment type="line">//    bool contains(const QPainterPath&amp; p) const {</comment>
<comment type="line">//        return QPainterPath::contains(p);</comment>
<comment type="line">//    }</comment>

    <function><type><name>bool</name></type> <name>containsPoint</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>v</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><call><name><name>QPainterPath</name>::<name>contains</name></name><argument_list>(<argument><expr><call><name>QPointF</name><argument_list>(<argument><expr><name>v</name>.<name>x</name></expr></argument>, <argument><expr><name>v</name>.<name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function_decl><type><name>void</name></type> <name>addPolyline</name><parameter_list>(<param><decl><type><name>const</name> <name>RPolyline</name>&amp;</type> <name>pl</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>addPath</name><parameter_list>(<param><decl><type><name>const</name> <name>RPainterPath</name>&amp;</type> <name>path</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>appendPath</name><parameter_list>(<param><decl><type><name>const</name> <name>RPainterPath</name>&amp;</type> <name>path</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>addLine</name><parameter_list>(<param><decl><type><name>const</name> <name>RLine</name>&amp;</type> <name>line</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>addArc</name><parameter_list>(<param><decl><type><name>const</name> <name>RArc</name>&amp;</type> <name>arc</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>addSpline</name><parameter_list>(<param><decl><type><name>const</name> <name>RSpline</name>&amp;</type> <name>spline</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>addRect</name><parameter_list>(<param><decl><type><name>double</name></type> <name>x1</name></decl></param>, <param><decl><type><name>double</name></type> <name>y1</name></decl></param>, <param><decl><type><name>double</name></type> <name>x2</name></decl></param>, <param><decl><type><name>double</name></type> <name>y2</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>addRect</name><parameter_list>(<param><decl><type><name>const</name> <name>QRectF</name>&amp;</type> <name>rect</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>addBox</name><parameter_list>(<param><decl><type><name>const</name> <name>RBox</name>&amp;</type> <name>box</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>RBox</name></type> <name>getBoundingBox</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>RVector</name></type> <name>getStartPoint</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>RVector</name></type> <name>getEndPoint</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>bool</name></type> <name>isValid</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>void</name></type> <name>setValid</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>bool</name></type> <name>isSane</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>int</name></type> <name>getZLevel</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>void</name></type> <name>setZLevel</name><parameter_list>(<param><decl><type><name>int</name></type> <name>zl</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="line">//bool hasPen() const;</comment>
    <function_decl><type><name>QPen</name></type> <name>getPen</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>void</name></type> <name>setPen</name><parameter_list>(<param><decl><type><name>const</name> <name>QPen</name>&amp;</type> <name>p</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>QBrush</name></type> <name>getBrush</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>void</name></type> <name>setBrush</name><parameter_list>(<param><decl><type><name>const</name> <name>QBrush</name>&amp;</type> <name>b</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>setMode</name><parameter_list>(<param><decl><type><name><name>RPainterPath</name>::<name>Mode</name></name></type> <name>mode</name></decl></param>, <param><decl><type><name>bool</name></type> <name>on</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>getMode</name><parameter_list>(<param><decl><type><name><name>RPainterPath</name>::<name>Mode</name></name></type> <name>mode</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>void</name></type> <name>setHighlighted</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>isHighlighted</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>void</name></type> <name>setSelected</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>isSelected</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>void</name></type> <name>setFixedPenColor</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>isFixedPenColor</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>void</name></type> <name>setFixedBrushColor</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>isFixedBrushColor</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>void</name></type> <name>setAutoRegen</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>getAutoRegen</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>void</name></type> <name>setAlwaysRegen</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>getAlwaysRegen</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>void</name></type> <name>setInheritPen</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>getInheritPen</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>void</name></type> <name>setPixelUnit</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>getPixelUnit</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>void</name></type> <name>setNoClipping</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>getNoClipping</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>void</name></type> <name>setNoColorMode</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>getNoColorMode</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>void</name></type> <name>setSimplePointDisplay</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>getSimplePointDisplay</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>void</name></type> <name>setPixelWidth</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>getPixelWidth</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>void</name></type> <name>setFeatureSize</name><parameter_list>(<param><decl><type><name>double</name></type> <name>s</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>double</name></type> <name>getFeatureSize</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>void</name></type> <name>setPixelSizeHint</name><parameter_list>(<param><decl><type><name>double</name></type> <name>s</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>double</name></type> <name>getPixelSizeHint</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>double</name></type> <name>getDistanceTo</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>point</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>void</name></type> <name>addPoint</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>position</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>hasPoints</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>setPoints</name><parameter_list>(<param><decl><type><name>const</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name>&amp;</type> <name>p</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getPoints</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>void</name></type> <name>transform</name><parameter_list>(<param><decl><type><name>const</name> <name>QTransform</name>&amp;</type> <name>t</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>move</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>offset</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>rotate</name><parameter_list>(<param><decl><type><name>double</name></type> <name>angle</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>scale</name><parameter_list>(<param><decl><type><name>double</name></type> <name>fx</name></decl></param>, <param><decl><type><name>double</name></type> <name>fy</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>int</name></type> <name>getElementCount</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>double</name></type> <name>getXAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>double</name></type> <name>getYAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name><name>QPainterPath</name>::<name>ElementType</name></name></type> <name>getTypeAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>isEmpty</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>void</name></type> <name>addShape</name><parameter_list>(<param><decl><type><name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></type> <name>shape</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>addOriginalShape</name><parameter_list>(<param><decl><type><name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></type> <name>shape</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>hasOriginalShapes</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>int</name></type> <name>countOriginalShapes</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></type> <name>getOriginalShape</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>static</name> <name>void</name></type> <name>rotateList</name><parameter_list>(<param><decl><type><name>QList<argument_list>&lt;<argument><name>RPainterPath</name></argument>&gt;</argument_list></name>&amp;</type> <name>pps</name></decl></param>, <param><decl><type><name>double</name></type> <name>angle</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>void</name></type> <name>translateList</name><parameter_list>(<param><decl><type><name>QList<argument_list>&lt;<argument><name>RPainterPath</name></argument>&gt;</argument_list></name>&amp;</type> <name>pps</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>offset</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>void</name></type> <name>scaleList</name><parameter_list>(<param><decl><type><name>QList<argument_list>&lt;<argument><name>RPainterPath</name></argument>&gt;</argument_list></name>&amp;</type> <name>pps</name></decl></param>, <param><decl><type><name>double</name></type> <name>fx</name></decl></param>, <param><decl><type><name>double</name></type> <name>fy</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>RVector</name></type> <name>getMinList</name><parameter_list>(<param><decl><type><name>QList<argument_list>&lt;<argument><name>RPainterPath</name></argument>&gt;</argument_list></name>&amp;</type> <name>pps</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>RVector</name></type> <name>getMaxList</name><parameter_list>(<param><decl><type><name>QList<argument_list>&lt;<argument><name>RPainterPath</name></argument>&gt;</argument_list></name>&amp;</type> <name>pps</name></decl></param>)</parameter_list>;</function_decl>

</public><private>private:
    <decl_stmt><decl><type><name>int</name></type> <name>zLevel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QPen</name></type> <name>pen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QBrush</name></type> <name>brush</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Modes</name></type> <name>modes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>points</name></decl>;</decl_stmt>
    <comment type="line">// &lt; 0 for secondary path (e.g. bounding box of text)</comment>
    <decl_stmt><decl><type><name>double</name></type> <name>featureSize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>pixelSizeHint</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QList<argument_list>&lt;<argument><name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>originalShapes</name></decl>;</decl_stmt>
</private>}</block>;</class>

<function_decl><type><name>QCADCORE_EXPORT</name> <name>QDebug</name></type> <name>operator&lt;&lt;</name><parameter_list>(<param><decl><type><name>QDebug</name></type> <name>dbg</name></decl></param>, <param><decl><type><name>RPainterPath</name>&amp;</type> <name>p</name></decl></param>)</parameter_list>;</function_decl>

<comment type="line">//QDataStream&amp; operator&lt;&lt; (QDataStream&amp; stream, const RPainterPath&amp; path);</comment>
<comment type="line">//QDataStream&amp; operator&gt;&gt; (QDataStream&amp; stream, RPainterPath&amp; path);</comment>
<function_decl><type><name>QCADCORE_EXPORT</name> <name>bool</name></type> <name>operator&lt;</name> <parameter_list>(<param><decl><type><name>const</name> <name>RPainterPath</name>&amp;</type> <name>p1</name></decl></param>, <param><decl><type><name>const</name> <name>RPainterPath</name>&amp;</type> <name>p2</name></decl></param>)</parameter_list>;</function_decl>

<macro><name>Q_DECLARE_OPERATORS_FOR_FLAGS</name><argument_list>(<argument>RPainterPath::Modes</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RPainterPath</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RPainterPath*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>QList&lt;RPainterPath&gt;</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>QList&lt;RPainterPath&gt;*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RPainterPath::Mode</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RPainterPath::Mode*</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
