<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./core/math" filename="RShape.h"><comment type="block">/**
 * Copyright (c) 2011-2018 by Andrew Mustun. All rights reserved.
 * 
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RSHAPE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RSHAPE_H</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../core_global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QList&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QSharedPointer&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RMath.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RShapeProxy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RVector.h"</cpp:file></cpp:include>

<class_decl>class <name>RArc</name>;</class_decl>
<class_decl>class <name>RBox</name>;</class_decl>
<class_decl>class <name>RCircle</name>;</class_decl>
<class_decl>class <name>REllipse</name>;</class_decl>
<class_decl>class <name>RExplodable</name>;</class_decl>
<class_decl>class <name>RLine</name>;</class_decl>
<class_decl>class <name>RPolyline</name>;</class_decl>
<class_decl>class <name>RSpline</name>;</class_decl>
<class_decl>class <name>RTriangle</name>;</class_decl>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RDEFAULT_TOLERANCE_1E_MIN4</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RDEFAULT_TOLERANCE_1E_MIN4</name> 1.0e-4</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<class>class <name>RShapeTransformation</name> <block>{<private type="default">
</private><public>public:
    <destructor><specifier>virtual</specifier> <name>~RShapeTransformation</name><parameter_list>()</parameter_list> <block>{}</block></destructor>
    <function_decl><type><name>virtual</name> <name>RVector</name></type> <name>transform</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>v</name></decl></param>)</parameter_list> <specifier>= 0</specifier>;</function_decl>
</public>}</block>;</class>

<class>class <name>RShapeTransformationScale</name> <super>: <specifier>public</specifier> <name>RShapeTransformation</name></super> <block>{<private type="default">
</private><public>public:
    <constructor><name>RShapeTransformationScale</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>factors</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>center</name></decl></param>)</parameter_list> <member_list>: <call><name>factors</name><argument_list>(<argument><expr><name>factors</name></expr></argument>)</argument_list></call>, <call><name>center</name><argument_list>(<argument><expr><name>center</name></expr></argument>)</argument_list></call> </member_list><block>{}</block></constructor>
    <destructor><specifier>virtual</specifier> <name>~RShapeTransformationScale</name><parameter_list>()</parameter_list> <block>{}</block></destructor>

    <function><type><name>virtual</name> <name>RVector</name></type> <name>transform</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>v</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>v</name>.<call><name>getScaled</name><argument_list>(<argument><expr><name>factors</name></expr></argument>, <argument><expr><name>center</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <decl_stmt><decl><type><name>RVector</name></type> <name>factors</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RVector</name></type> <name>center</name></decl>;</decl_stmt>
</public>}</block>;</class>

<comment type="block">/**
 * Interface for geometrical shape classes.
 *
 * \ingroup math
 * \scriptable
 * \sharedPointerSupport
 */</comment>
<class>class <macro><name>QCADCORE_EXPORT</name></macro> <name>RShape</name> <block>{<private type="default">
</private><public>public:
    <enum>enum <name>Type</name> <block>{
        <expr><name>Unknown</name> = -1</expr>,
        <expr><name>Point</name> = 0</expr>,
        <expr><name>Line</name> = 1</expr>,
        <expr><name>Arc</name> = 2</expr>,
        <expr><name>Circle</name> = 3</expr>,
        <expr><name>Ellipse</name> = 4</expr>,
        <expr><name>Polyline</name> = 5</expr>,
        <expr><name>Spline</name> = 6</expr>,
        <expr><name>Triangle</name> = 7</expr>,
        <expr><name>XLine</name> = 8</expr>,
        <expr><name>Ray</name> = 9</expr>
    }</block>;</enum>

</public><public>public:
    <constructor><name>RShape</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <destructor><specifier>virtual</specifier> <name>~RShape</name><parameter_list>()</parameter_list> <block>{
    }</block></destructor>

    <function><type><name>virtual</name> <name><name>RShape</name>::<name>Type</name></name></type> <name>getShapeType</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>Unknown</name></expr>;</return>
    }</block></function>

    <function><type><name>static</name> <name>bool</name></type> <name>isPointShape</name><parameter_list>(<param><decl><type><name>const</name> <name>RShape</name>&amp;</type> <name>s</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>s</name>.<call><name>getShapeType</name><argument_list>()</argument_list></call>==<name><name>RShape</name>::<name>Point</name></name></expr>;</return>
    }</block></function>
    <function><type><name>static</name> <name>bool</name></type> <name>isLineShape</name><parameter_list>(<param><decl><type><name>const</name> <name>RShape</name>&amp;</type> <name>s</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>s</name>.<call><name>getShapeType</name><argument_list>()</argument_list></call>==<name><name>RShape</name>::<name>Line</name></name></expr>;</return>
    }</block></function>
    <function><type><name>static</name> <name>bool</name></type> <name>isArcShape</name><parameter_list>(<param><decl><type><name>const</name> <name>RShape</name>&amp;</type> <name>s</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>s</name>.<call><name>getShapeType</name><argument_list>()</argument_list></call>==<name><name>RShape</name>::<name>Arc</name></name></expr>;</return>
    }</block></function>
    <function><type><name>static</name> <name>bool</name></type> <name>isCircleShape</name><parameter_list>(<param><decl><type><name>const</name> <name>RShape</name>&amp;</type> <name>s</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>s</name>.<call><name>getShapeType</name><argument_list>()</argument_list></call>==<name><name>RShape</name>::<name>Circle</name></name></expr>;</return>
    }</block></function>
    <function><type><name>static</name> <name>bool</name></type> <name>isEllipseShape</name><parameter_list>(<param><decl><type><name>const</name> <name>RShape</name>&amp;</type> <name>s</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>s</name>.<call><name>getShapeType</name><argument_list>()</argument_list></call>==<name><name>RShape</name>::<name>Ellipse</name></name></expr>;</return>
    }</block></function>
    <function_decl><type><name>static</name> <name>bool</name></type> <name>isFullEllipseShape</name><parameter_list>(<param><decl><type><name>const</name> <name>RShape</name>&amp;</type> <name>s</name></decl></param>)</parameter_list>;</function_decl>
    <function><type><name>static</name> <name>bool</name></type> <name>isPolylineShape</name><parameter_list>(<param><decl><type><name>const</name> <name>RShape</name>&amp;</type> <name>s</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>s</name>.<call><name>getShapeType</name><argument_list>()</argument_list></call>==<name><name>RShape</name>::<name>Polyline</name></name></expr>;</return>
    }</block></function>
    <function><type><name>static</name> <name>bool</name></type> <name>isSplineShape</name><parameter_list>(<param><decl><type><name>const</name> <name>RShape</name>&amp;</type> <name>s</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>s</name>.<call><name>getShapeType</name><argument_list>()</argument_list></call>==<name><name>RShape</name>::<name>Spline</name></name></expr>;</return>
    }</block></function>
    <function><type><name>static</name> <name>bool</name></type> <name>isTriangleShape</name><parameter_list>(<param><decl><type><name>const</name> <name>RShape</name>&amp;</type> <name>s</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>s</name>.<call><name>getShapeType</name><argument_list>()</argument_list></call>==<name><name>RShape</name>::<name>Triangle</name></name></expr>;</return>
    }</block></function>
    <function><type><name>static</name> <name>bool</name></type> <name>isXLineShape</name><parameter_list>(<param><decl><type><name>const</name> <name>RShape</name>&amp;</type> <name>s</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>s</name>.<call><name>getShapeType</name><argument_list>()</argument_list></call>==<name><name>RShape</name>::<name>XLine</name></name></expr>;</return>
    }</block></function>
    <function><type><name>static</name> <name>bool</name></type> <name>isRayShape</name><parameter_list>(<param><decl><type><name>const</name> <name>RShape</name>&amp;</type> <name>s</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>s</name>.<call><name>getShapeType</name><argument_list>()</argument_list></call>==<name><name>RShape</name>::<name>Ray</name></name></expr>;</return>
    }</block></function>

    <function_decl><type><name>virtual</name> <name>RShape</name>*</type> <name>clone</name><parameter_list>()</parameter_list> <specifier>const</specifier> <specifier>= 0</specifier>;</function_decl>

    <comment type="block">/**
     * Reimplement and return true if this shape relies on interpolation
     * for geometrical operations such as finding intersection points. E.g.
     * splines.
     */</comment>
    <function><type><name>virtual</name> <name>bool</name></type> <name>isInterpolated</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>false</name></expr>;</return>
    }</block></function>

    <function_decl><type><name>virtual</name> <name>RVector</name></type> <name>getClosestPointOnShape</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>p</name></decl></param>,
            <param><decl><type><name>bool</name></type> <name>limited</name> =<init> <expr><name>true</name></expr></init></decl></param>, <param><decl><type><name>double</name></type> <name>strictRange</name> =<init> <expr><name>RMAXDOUBLE</name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <comment type="block">/**
     * \return The bounding box of this shape.
     */</comment>
    <function_decl><type><name>virtual</name> <name>RBox</name></type> <name>getBoundingBox</name><parameter_list>()</parameter_list> <specifier>const</specifier> <specifier>= 0</specifier>;</function_decl>

    <comment type="block">/**
     * Flattens this shape to the X/Y plane
     */</comment>
    <function><type><name>virtual</name> <name>void</name></type> <name>to2D</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>setZ</name><argument_list>(<argument><expr>0.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>setZ</name><parameter_list>(<param><decl><type><name>double</name></type> <name>z</name></decl></param>)</parameter_list> <specifier>= 0</specifier>;</function_decl>

    <comment type="block">/**
     * \return The total length of this shape if applicable or NaN if not.
     */</comment>
    <function_decl><type><name>virtual</name> <name>double</name></type> <name>getLength</name><parameter_list>()</parameter_list> <specifier>const</specifier> <specifier>= 0</specifier>;</function_decl>

    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>const</name> <name>RShape</name>&amp;</type> <name>other</name></decl></param>, <param><decl><type><name>double</name></type> <name>tolerance</name>=<init><expr><name><name>RS</name>::<name>PointTolerance</name></name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function><type><name>virtual</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getVectorProperties</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><call><name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
    <function><type><name>virtual</name> <name>QList<argument_list>&lt;<argument><name>int</name></argument>&gt;</argument_list></name></type> <name>getIntProperties</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><call><name>QList<argument_list>&lt;<argument><name>int</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
    <function><type><name>virtual</name> <name>QList<argument_list>&lt;<argument><name>double</name></argument>&gt;</argument_list></name></type> <name>getDoubleProperties</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><call><name>QList<argument_list>&lt;<argument><name>double</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
    <function><type><name>virtual</name> <name>QList<argument_list>&lt;<argument><name>bool</name></argument>&gt;</argument_list></name></type> <name>getBoolProperties</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><call><name>QList<argument_list>&lt;<argument><name>bool</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>

    <comment type="block">/**
     * \return Shortest vector from this shape to the given point.
     *
     * \param point the given point
     *
     * \param limited If false, the shape is treated as an unlimited
     *      shape that extends in a logical way. For example an
     *      unlimited line for a line, full circle for an arc or
     *      a plane for a triangle.
     */</comment>
    <function_decl><type><name>virtual</name> <name>RVector</name></type> <name>getVectorTo</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>point</name></decl></param>,
            <param><decl><type><name>bool</name></type> <name>limited</name> =<init> <expr><name>true</name></expr></init></decl></param>, <param><decl><type><name>double</name></type> <name>strictRange</name> =<init> <expr><name>RMAXDOUBLE</name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier> <specifier>= 0</specifier>;</function_decl>

    <function_decl><type><name>virtual</name> <name>double</name></type> <name>getDistanceTo</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>point</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited</name> =<init> <expr><name>true</name></expr></init></decl></param>, <param><decl><type><name>double</name></type> <name>strictRange</name> =<init> <expr><name>RMAXDOUBLE</name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>double</name></type> <name>getMaxDistanceTo</name><parameter_list>(<param><decl><type><name>const</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name>&amp;</type> <name>points</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited</name> =<init> <expr><name>true</name></expr></init></decl></param>, <param><decl><type><name>double</name></type> <name>strictRange</name> =<init> <expr><name>RMAXDOUBLE</name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>isOnShape</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>point</name></decl></param>,
                           <param><decl><type><name>bool</name></type> <name>limited</name> =<init> <expr><name>true</name></expr></init></decl></param>,
                           <param><decl><type><name>double</name></type> <name>tolerance</name> =<init> <expr><name>RDEFAULT_TOLERANCE_1E_MIN4</name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>filterOnShape</name><parameter_list>(<param><decl><type><name>const</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name>&amp;</type> <name>pointList</name></decl></param>,
        <param><decl><type><name>bool</name></type> <name>limited</name> =<init> <expr><name>true</name></expr></init></decl></param>,
        <param><decl><type><name>double</name></type> <name>tolerance</name> =<init> <expr><name>RDEFAULT_TOLERANCE_1E_MIN4</name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>RVector</name></type> <name>getVectorFromEndpointTo</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>point</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <comment type="block">/**
     * \return The end point(s) of this shape.
     */</comment>
    <function_decl><type><name>virtual</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getEndPoints</name><parameter_list>()</parameter_list> <specifier>const</specifier> <specifier>= 0</specifier>;</function_decl>

    <comment type="block">/**
     * \return The middle point(s) of this shape.
     */</comment>
    <function_decl><type><name>virtual</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getMiddlePoints</name><parameter_list>()</parameter_list> <specifier>const</specifier> <specifier>= 0</specifier>;</function_decl>

    <comment type="block">/**
     * \return The center point(s) of this shape.
     */</comment>
    <function_decl><type><name>virtual</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getCenterPoints</name><parameter_list>()</parameter_list> <specifier>const</specifier> <specifier>= 0</specifier>;</function_decl>

    <comment type="block">/**
     * \return The reference point(s) of this shape.
     */</comment>
    <function><type><name>virtual</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getArcReferencePoints</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><call><name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function_decl><type><name>virtual</name> <name>RVector</name></type> <name>getPointOnShape</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>virtual</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getPointCloud</name><parameter_list>(<param><decl><type><name>double</name></type> <name>segmentLength</name></decl></param>)</parameter_list> <specifier>const</specifier> <specifier>= 0</specifier>;</function_decl>

    <comment type="block">/**
     * \return All points on this shape with the given distance to an endpoint.
     */</comment>
    <function_decl><type><name>virtual</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getPointsWithDistanceToEnd</name><parameter_list>(
        <param><decl><type><name>double</name></type> <name>distance</name></decl></param>, <param><decl><type><name>int</name></type> <name>from</name> =<init> <expr><name><name>RS</name>::<name>FromAny</name></name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier> <specifier>= 0</specifier>;</function_decl>

    <function><type><name>virtual</name> <name>RVector</name></type> <name>getPointWithDistanceToStart</name><parameter_list>(<param><decl><type><name>double</name></type> <name>distance</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <decl_stmt><decl><type><name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>res</name> =<init> <expr><call><name>getPointsWithDistanceToEnd</name><argument_list>(<argument><expr><name>distance</name></expr></argument>, <argument><expr><name><name>RS</name>::<name>FromStart</name></name>|<name><name>RS</name>::<name>AlongPolyline</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>res</name>.<call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name><name>RVector</name>::<name>invalid</name></name></expr>;</return>
        }</block></then></if>
        <return>return <expr><name><name>res</name><index>[<expr>0</expr>]</index></name></expr>;</return>
    }</block></function>

    <function><type><name>virtual</name> <name>RVector</name></type> <name>getPointWithDistanceToEnd</name><parameter_list>(<param><decl><type><name>double</name></type> <name>distance</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <decl_stmt><decl><type><name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>res</name> =<init> <expr><call><name>getPointsWithDistanceToEnd</name><argument_list>(<argument><expr><name>distance</name></expr></argument>, <argument><expr><name><name>RS</name>::<name>FromEnd</name></name>|<name><name>RS</name>::<name>AlongPolyline</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>res</name>.<call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name><name>RVector</name>::<name>invalid</name></name></expr>;</return>
        }</block></then></if>
        <return>return <expr><name><name>res</name><index>[<expr>0</expr>]</index></name></expr>;</return>
    }</block></function>

    <comment type="block">/**
     * \return Angle on the entity at the given distance from the start point.
     */</comment>
    <function><type><name>virtual</name> <name>double</name></type> <name>getAngleAt</name><parameter_list>(<param><decl><type><name>double</name></type> <name>distance</name></decl></param>, <param><decl><type><name><name>RS</name>::<name>From</name></name></type> <name>from</name> =<init> <expr><name><name>RS</name>::<name>FromStart</name></name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <macro><name>Q_UNUSED</name><argument_list>(<argument>distance</argument>)</argument_list></macro>
        <macro><name>Q_UNUSED</name><argument_list>(<argument>from</argument>)</argument_list></macro>
        <return>return <expr><name>RNANDOUBLE</name></expr>;</return>
    }</block></function>
    <function><type><name>virtual</name> <name>double</name></type> <name>getAngleAtPoint</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>pos</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>d</name> =<init> <expr><call><name>getDistanceFromStart</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>getAngleAt</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function_decl><type><name>virtual</name> <name>RVector</name></type> <name>getPointAtPercent</name><parameter_list>(<param><decl><type><name>double</name></type> <name>p</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>double</name></type> <name>getAngleAtPercent</name><parameter_list>(<param><decl><type><name>double</name></type> <name>p</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>intersectsWith</name><parameter_list>(<param><decl><type><name>const</name> <name>RShape</name>&amp;</type> <name>other</name></decl></param>, 
        <param><decl><type><name>bool</name></type> <name>limited</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getIntersectionPoints</name><parameter_list>(<param><decl><type><name>const</name> <name>RShape</name>&amp;</type> <name>other</name></decl></param>,
            <param><decl><type><name>bool</name></type> <name>limited</name> =<init> <expr><name>true</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>same</name> =<init> <expr><name>false</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>force</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <function><type><name>virtual</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getSelfIntersectionPoints</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><call><name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>virtual</name> <name>bool</name></type> <name>isDirected</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>false</name></expr>;</return>
    }</block></function>

    <function><type><name>virtual</name> <name>double</name></type> <name>getDirection1</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>RNANDOUBLE</name></expr>;</return>
    }</block></function>
    <function><type><name>virtual</name> <name>double</name></type> <name>getDirection2</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>RNANDOUBLE</name></expr>;</return>
    }</block></function>

    <function><type><name>virtual</name> <name><name>RS</name>::<name>Side</name></name></type> <name>getSideOfPoint</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>point</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <macro><name>Q_UNUSED</name><argument_list>(<argument>point</argument>)</argument_list></macro>
        <return>return <expr><name><name>RS</name>::<name>NoSide</name></name></expr>;</return>
    }</block></function>

    <function><type><name>virtual</name> <name>RVector</name></type> <name>getStartPoint</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name><name>RVector</name>::<name>invalid</name></name></expr>;</return>
    }</block></function>
    <function><type><name>virtual</name> <name>RVector</name></type> <name>getEndPoint</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name><name>RVector</name>::<name>invalid</name></name></expr>;</return>
    }</block></function>
    <function><type><name>virtual</name> <name>RVector</name></type> <name>getMiddlePoint</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name><name>RVector</name>::<name>invalid</name></name></expr>;</return>
    }</block></function>

    <function><type><name>virtual</name> <name>bool</name></type> <name>reverse</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>false</name></expr>;</return>
    }</block></function>

    <comment type="block">/**
     * \param trimPoint Trim start point or end point to this coordinate.
     * \param clickPoint Point that was clicked by user.
     * \param extend True if the shape is to be extended.
     * Used for polylines to determine that the first segment has to be trimmed even if another segment was clicked.
     */</comment>
    <function><type><name>virtual</name> <name>bool</name></type> <name>trimStartPoint</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>trimPoint</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>clickPoint</name> =<init> <expr><name><name>RVector</name>::<name>invalid</name></name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>extend</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list> <block>{
        <macro><name>Q_UNUSED</name><argument_list>(<argument>trimPoint</argument>)</argument_list></macro>
        <macro><name>Q_UNUSED</name><argument_list>(<argument>clickPoint</argument>)</argument_list></macro>
        <macro><name>Q_UNUSED</name><argument_list>(<argument>extend</argument>)</argument_list></macro>

        <return>return <expr><name>false</name></expr>;</return>
    }</block></function>

    <function><type><name>virtual</name> <name>bool</name></type> <name>trimStartPoint</name><parameter_list>(<param><decl><type><name>double</name></type> <name>trimDist</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>RVector</name></type> <name>p</name> =<init> <expr><call><name>getPointWithDistanceToStart</name><argument_list>(<argument><expr><name>trimDist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>trimStartPoint</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block">/**
     * \param trimPoint Trim start point or end point to this coordinate.
     * \param clickPoint Point that was clicked by user.
     * \param extend True if the shape is to be extended.
     * Used for polylines to determine that the last segment has to be trimmed even if another segment was clicked.
     */</comment>
    <function><type><name>virtual</name> <name>bool</name></type> <name>trimEndPoint</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>trimPoint</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>clickPoint</name> =<init> <expr><name><name>RVector</name>::<name>invalid</name></name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>extend</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list> <block>{
        <macro><name>Q_UNUSED</name><argument_list>(<argument>trimPoint</argument>)</argument_list></macro>
        <macro><name>Q_UNUSED</name><argument_list>(<argument>clickPoint</argument>)</argument_list></macro>
        <macro><name>Q_UNUSED</name><argument_list>(<argument>extend</argument>)</argument_list></macro>

        <return>return <expr><name>false</name></expr>;</return>
    }</block></function>

    <function><type><name>virtual</name> <name>bool</name></type> <name>trimEndPoint</name><parameter_list>(<param><decl><type><name>double</name></type> <name>trimDist</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>RVector</name></type> <name>p</name> =<init> <expr><call><name>getPointWithDistanceToStart</name><argument_list>(<argument><expr><name>trimDist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>trimEndPoint</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block">/**
     * \param trimPoint Trim start point or end point to this coordinate.
     * \param clickPoint Point that was clicked by user.
     */</comment>
    <function><type><name>virtual</name> <name><name>RS</name>::<name>Ending</name></name></type> <name>getTrimEnd</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>trimPoint</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>clickPoint</name></decl></param>)</parameter_list> <block>{
        <macro><name>Q_UNUSED</name><argument_list>(<argument>trimPoint</argument>)</argument_list></macro>
        <macro><name>Q_UNUSED</name><argument_list>(<argument>clickPoint</argument>)</argument_list></macro>

        <return>return <expr><name><name>RS</name>::<name>EndingNone</name></name></expr>;</return>
    }</block></function>

    <comment type="block">/**
     * \return Distance of given point to start point of shape along shape.
     * \param p Point (assumed to be on shape).
     */</comment>
    <function><type><name>virtual</name> <name>double</name></type> <name>getDistanceFromStart</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>p</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <macro><name>Q_UNUSED</name><argument_list>(<argument>p</argument>)</argument_list></macro>
        <return>return <expr><name>RMAXDOUBLE</name></expr>;</return>
    }</block></function>

    <comment type="block">/**
     * \return All possible distances of given point to start point of shape along shape.
     * \param p Point (assumed to be on shape).
     */</comment>
    <function><type><name>virtual</name> <name>QList<argument_list>&lt;<argument><name>double</name></argument>&gt;</argument_list></name></type> <name>getDistancesFromStart</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>p</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><call><name>QList<argument_list>&lt;<argument><name>double</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call> &lt;&lt; <call><name>getDistanceFromStart</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block">/**
     * \return The intersection point(s) between this shape and the given
     *      other shape.
     */</comment>
    <function_decl><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getIntersectionPoints</name><parameter_list>(<param><decl><type><name>const</name> <name>RShape</name>&amp;</type> <name>shape1</name></decl></param>,
            <param><decl><type><name>const</name> <name>RShape</name>&amp;</type> <name>shape2</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited</name> =<init> <expr><name>true</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>same</name> =<init> <expr><name>false</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>force</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>move</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>offset</name></decl></param>)</parameter_list> <specifier>= 0</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>rotate</name><parameter_list>(<param><decl><type><name>double</name></type> <name>rotation</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>center</name> =<init> <expr><name>RDEFAULT_RVECTOR</name></expr></init></decl></param>)</parameter_list> <specifier>= 0</specifier>;</function_decl>
    <decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>scale</name><argument_list>(<argument><expr><name>double</name> <name>scaleFactor</name></expr></argument>, <argument><expr><name>const</name> <name>RVector</name>&amp; <name>center</name> = <call><name>RVector</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>scale</name><argument_list>(<argument><expr><name>const</name> <name>RVector</name>&amp; <name>scaleFactors</name></expr></argument>, <argument><expr><name>const</name> <name>RVector</name>&amp; <name>center</name> = <call><name>RVector</name><argument_list>()</argument_list></call></expr></argument>)</argument_list> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>mirror</name><parameter_list>(<param><decl><type><name>const</name> <name>RLine</name>&amp;</type> <name>axis</name></decl></param>)</parameter_list> <specifier>= 0</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>flipHorizontal</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>flipVertical</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>stretch</name><parameter_list>(<param><decl><type><name>const</name> <name>RBox</name>&amp;</type> <name>area</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>offset</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>stretch</name><parameter_list>(<param><decl><type><name>const</name> <name>RPolyline</name>&amp;</type> <name>area</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>offset</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></type> <name>getTransformed</name><parameter_list>(<param><decl><type><name>const</name> <name>QTransform</name>&amp;</type> <name>transform</name></decl></param>)</parameter_list> <specifier>const</specifier> <specifier>= 0</specifier>;</function_decl>

    <function_decl><type><name>static</name> <name>bool</name></type> <name>order</name><parameter_list>(<param><decl><type><name>QList<argument_list>&lt;<argument><name>QList<argument_list>&lt;<argument><name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></argument> &gt;</argument_list></name>&amp;</type> <name>boundary</name></decl></param>)</parameter_list>;</function_decl>

    <function><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getIntersectionPointsLL</name><parameter_list>(<param><decl><type><name>const</name> <name>RLine</name>&amp;</type> <name>line1</name></decl></param>,
            <param><decl><type><name>const</name> <name>RLine</name>&amp;</type> <name>line2</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getIntersectionPointsLL</name><argument_list>(<argument><expr><name>line1</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>, <argument><expr><name>limited</name></expr></argument>, <argument><expr><name>limited</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function_decl><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getIntersectionPointsLL</name><parameter_list>(<param><decl><type><name>const</name> <name>RLine</name>&amp;</type> <name>line1</name></decl></param>,
            <param><decl><type><name>const</name> <name>RLine</name>&amp;</type> <name>line2</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited1</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited2</name></decl></param>)</parameter_list>;</function_decl>
    <function><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getIntersectionPointsLA</name><parameter_list>(<param><decl><type><name>const</name> <name>RLine</name>&amp;</type> <name>line1</name></decl></param>,
           <param><decl><type><name>const</name> <name>RArc</name>&amp;</type> <name>arc2</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getIntersectionPointsLA</name><argument_list>(<argument><expr><name>line1</name></expr></argument>, <argument><expr><name>arc2</name></expr></argument>, <argument><expr><name>limited</name></expr></argument>, <argument><expr><name>limited</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function_decl><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getIntersectionPointsLA</name><parameter_list>(<param><decl><type><name>const</name> <name>RLine</name>&amp;</type> <name>line1</name></decl></param>,
            <param><decl><type><name>const</name> <name>RArc</name>&amp;</type> <name>arc2</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited1</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited2</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getIntersectionPointsLC</name><parameter_list>(<param><decl><type><name>const</name> <name>RLine</name>&amp;</type> <name>line1</name></decl></param>,
            <param><decl><type><name>const</name> <name>RCircle</name>&amp;</type> <name>circle2</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getIntersectionPointsLE</name><parameter_list>(<param><decl><type><name>const</name> <name>RLine</name>&amp;</type> <name>line1</name></decl></param>,
            <param><decl><type><name>const</name> <name>REllipse</name>&amp;</type> <name>ellipse2</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getIntersectionPointsLE</name><argument_list>(<argument><expr><name>line1</name></expr></argument>, <argument><expr><name>ellipse2</name></expr></argument>, <argument><expr><name>limited</name></expr></argument>, <argument><expr><name>limited</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function_decl><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getIntersectionPointsLE</name><parameter_list>(<param><decl><type><name>const</name> <name>RLine</name>&amp;</type> <name>line1</name></decl></param>,
            <param><decl><type><name>const</name> <name>REllipse</name>&amp;</type> <name>ellipse2</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited1</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited2</name></decl></param>)</parameter_list>;</function_decl>
    <function><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getIntersectionPointsLT</name><parameter_list>(<param><decl><type><name>const</name> <name>RLine</name>&amp;</type> <name>line1</name></decl></param>,
            <param><decl><type><name>const</name> <name>RTriangle</name>&amp;</type> <name>triangle2</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getIntersectionPointsLT</name><argument_list>(<argument><expr><name>line1</name></expr></argument>, <argument><expr><name>triangle2</name></expr></argument>, <argument><expr><name>limited</name></expr></argument>, <argument><expr><name>limited</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function_decl><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getIntersectionPointsLT</name><parameter_list>(<param><decl><type><name>const</name> <name>RLine</name>&amp;</type> <name>line1</name></decl></param>,
            <param><decl><type><name>const</name> <name>RTriangle</name>&amp;</type> <name>triangle2</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited1</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited2</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getIntersectionPointsLS</name><parameter_list>(<param><decl><type><name>const</name> <name>RLine</name>&amp;</type> <name>line1</name></decl></param>,
            <param><decl><type><name>const</name> <name>RSpline</name>&amp;</type> <name>spline2</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getIntersectionPointsLX</name><parameter_list>(<param><decl><type><name>const</name> <name>RLine</name>&amp;</type> <name>line1</name></decl></param>,
            <param><decl><type><name>const</name> <name>RExplodable</name>&amp;</type> <name>explodable2</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getIntersectionPointsAA</name><parameter_list>(<param><decl><type><name>const</name> <name>RArc</name>&amp;</type> <name>arc1</name></decl></param>,
            <param><decl><type><name>const</name> <name>RArc</name>&amp;</type> <name>arc2</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getIntersectionPointsAC</name><parameter_list>(<param><decl><type><name>const</name> <name>RArc</name>&amp;</type> <name>arc1</name></decl></param>,
            <param><decl><type><name>const</name> <name>RCircle</name>&amp;</type> <name>circle2</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getIntersectionPointsAE</name><parameter_list>(<param><decl><type><name>const</name> <name>RArc</name>&amp;</type> <name>arc1</name></decl></param>,
            <param><decl><type><name>const</name> <name>REllipse</name>&amp;</type> <name>ellipse2</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getIntersectionPointsAT</name><parameter_list>(<param><decl><type><name>const</name> <name>RArc</name>&amp;</type> <name>arc1</name></decl></param>,
            <param><decl><type><name>const</name> <name>RTriangle</name>&amp;</type> <name>triangle2</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getIntersectionPointsAS</name><parameter_list>(<param><decl><type><name>const</name> <name>RArc</name>&amp;</type> <name>arc1</name></decl></param>,
            <param><decl><type><name>const</name> <name>RSpline</name>&amp;</type> <name>spline2</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getIntersectionPointsAX</name><parameter_list>(<param><decl><type><name>const</name> <name>RArc</name>&amp;</type> <name>arc1</name></decl></param>,
            <param><decl><type><name>const</name> <name>RExplodable</name>&amp;</type> <name>explodable2</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getIntersectionPointsCC</name><parameter_list>(<param><decl><type><name>const</name> <name>RCircle</name>&amp;</type> <name>circle1</name></decl></param>,
            <param><decl><type><name>const</name> <name>RCircle</name>&amp;</type> <name>circle2</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getIntersectionPointsCE</name><parameter_list>(<param><decl><type><name>const</name> <name>RCircle</name>&amp;</type> <name>circle1</name></decl></param>,
            <param><decl><type><name>const</name> <name>REllipse</name>&amp;</type> <name>ellipse2</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getIntersectionPointsCS</name><parameter_list>(<param><decl><type><name>const</name> <name>RCircle</name>&amp;</type> <name>circle1</name></decl></param>,
            <param><decl><type><name>const</name> <name>RSpline</name>&amp;</type> <name>spline2</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getIntersectionPointsCX</name><parameter_list>(<param><decl><type><name>const</name> <name>RCircle</name>&amp;</type> <name>circle1</name></decl></param>,
            <param><decl><type><name>const</name> <name>RExplodable</name>&amp;</type> <name>explodable2</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getIntersectionPointsEE</name><parameter_list>(<param><decl><type><name>const</name> <name>REllipse</name>&amp;</type> <name>ellipse1</name></decl></param>,
            <param><decl><type><name>const</name> <name>REllipse</name>&amp;</type> <name>ellipse2</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getIntersectionPointsEE</name><parameter_list>(<param><decl><type><name>const</name> <name>REllipse</name>&amp;</type> <name>ellipse1</name></decl></param>,
            <param><decl><type><name>const</name> <name>REllipse</name>&amp;</type> <name>ellipse2</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getIntersectionPointsES</name><parameter_list>(<param><decl><type><name>const</name> <name>REllipse</name>&amp;</type> <name>ellipse1</name></decl></param>,
            <param><decl><type><name>const</name> <name>RSpline</name>&amp;</type> <name>spline2</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getIntersectionPointsEX</name><parameter_list>(<param><decl><type><name>const</name> <name>REllipse</name>&amp;</type> <name>ellipse1</name></decl></param>,
            <param><decl><type><name>const</name> <name>RExplodable</name>&amp;</type> <name>explodable2</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getIntersectionPointsSX</name><parameter_list>(<param><decl><type><name>const</name> <name>RSpline</name>&amp;</type> <name>spline1</name></decl></param>,
            <param><decl><type><name>const</name> <name>RExplodable</name>&amp;</type> <name>explodable2</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getIntersectionPointsSS</name><parameter_list>(<param><decl><type><name>const</name> <name>RSpline</name>&amp;</type> <name>spline1</name></decl></param>,
            <param><decl><type><name>const</name> <name>RSpline</name>&amp;</type> <name>spline2</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited</name> =<init> <expr><name>true</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>same</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getIntersectionPointsXX</name><parameter_list>(<param><decl><type><name>const</name> <name>RExplodable</name>&amp;</type> <name>explodable1</name></decl></param>,
            <param><decl><type><name>const</name> <name>RExplodable</name>&amp;</type> <name>explodable2</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited</name> =<init> <expr><name>true</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>same</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>static</name> <name>const</name> <name>RExplodable</name>*</type> <name>castToExplodable</name><parameter_list>(<param><decl><type><name>const</name> <name>RShape</name>*</type> <name>shape</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>QList<argument_list>&lt;<argument><name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>getOffsetShapes</name><parameter_list>(<param><decl><type><name>double</name></type> <name>distance</name></decl></param>, <param><decl><type><name>int</name></type> <name>number</name></decl></param>, <param><decl><type><name><name>RS</name>::<name>Side</name></name></type> <name>side</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>position</name> =<init> <expr><name><name>RVector</name>::<name>invalid</name></name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>getOffsetLines</name><parameter_list>(<param><decl><type><name>const</name> <name>RShape</name>&amp;</type> <name>shape</name></decl></param>, <param><decl><type><name>double</name></type> <name>distance</name></decl></param>, <param><decl><type><name>int</name></type> <name>number</name></decl></param>, <param><decl><type><name><name>RS</name>::<name>Side</name></name></type> <name>side</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>position</name> =<init> <expr><name><name>RVector</name>::<name>invalid</name></name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>getOffsetArcs</name><parameter_list>(<param><decl><type><name>const</name> <name>RShape</name>&amp;</type> <name>shape</name></decl></param>, <param><decl><type><name>double</name></type> <name>distance</name></decl></param>, <param><decl><type><name>int</name></type> <name>number</name></decl></param>, <param><decl><type><name><name>RS</name>::<name>Side</name></name></type> <name>side</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>position</name> =<init> <expr><name><name>RVector</name>::<name>invalid</name></name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>getReversedShapeList</name><parameter_list>(<param><decl><type><name>const</name> <name>QList<argument_list>&lt;<argument><name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name>&amp;</type> <name>shapes</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>QList<argument_list>&lt;<argument><name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>splitAt</name><parameter_list>(<param><decl><type><name>const</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name>&amp;</type> <name>points</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>trim</name><parameter_list>(
            <param><decl><type><name>const</name> <name>RShape</name>&amp;</type> <name>trimShape</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>trimClickPos</name></decl></param>,
            <param><decl><type><name>const</name> <name>RShape</name>&amp;</type> <name>limitingShape</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>limitingClickPos</name></decl></param>,
            <param><decl><type><name>bool</name></type> <name>trimBoth</name></decl></param>, <param><decl><type><name>bool</name></type> <name>samePolyline</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>roundAllCorners</name><parameter_list>(<param><decl><type><name>const</name> <name>QList<argument_list>&lt;<argument><name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name>&amp;</type> <name>shapes</name></decl></param>, <param><decl><type><name>double</name></type> <name>radius</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>roundShapes</name><parameter_list>(
            <param><decl><type><name>const</name> <name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></type> <name>shape1</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>clickPos1</name></decl></param>,
            <param><decl><type><name>const</name> <name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></type> <name>shape2</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>clickPos2</name></decl></param>,
            <param><decl><type><name>bool</name></type> <name>trim</name></decl></param>, <param><decl><type><name>bool</name></type> <name>samePolyline</name></decl></param>, <param><decl><type><name>double</name></type> <name>radius</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>pos</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>static</name> <name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></type> <name>xLineToRay</name><parameter_list>(<param><decl><type><name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></type> <name>shape</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></type> <name>rayToLine</name><parameter_list>(<param><decl><type><name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></type> <name>shape</name></decl></param>)</parameter_list>;</function_decl>

    <function><type><name>static</name> <name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></type> <name>scaleArc</name><parameter_list>(<param><decl><type><name>const</name> <name>RShape</name>&amp;</type> <name>shape</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>scaleFactors</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>center</name> =<init> <expr><name>RDEFAULT_RVECTOR</name></expr></init></decl></param>)</parameter_list> <block>{
        <function_decl><type><name>RShapeTransformationScale</name></type> <name>t</name><parameter_list>(<param><decl><type><name>scaleFactors</name></type></decl></param>, <param><decl><type><name>center</name></type></decl></param>)</parameter_list>;</function_decl>
        <return>return <expr><call><name>transformArc</name><argument_list>(<argument><expr><name>shape</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block">/**
     * \nonscriptable
     */</comment>
    <function_decl><type><name>static</name> <name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></type> <name>transformArc</name><parameter_list>(<param><decl><type><name>const</name> <name>RShape</name>&amp;</type> <name>shape</name></decl></param>, <param><decl><type><name>RShapeTransformation</name>&amp;</type> <name>transformation</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></type> <name>ellipseToArcCircleEllipse</name><parameter_list>(<param><decl><type><name>const</name> <name>REllipse</name>&amp;</type> <name>ellipse</name></decl></param>)</parameter_list>;</function_decl>

    <function><type><name>static</name> <name>int</name></type> <name>getErrorCode</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>errorCode</name></expr>;</return>
    }</block></function>

    <function_decl><type><name>void</name></type> <name>dump</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <comment type="block">/**
     * \nonscriptable
     */</comment>
    <function><type><name>friend</name> <name>QDebug</name></type> <name>operator&lt;&lt;</name><parameter_list>(<param><decl><type><name>QDebug</name></type> <name>dbg</name></decl></param>, <param><decl><type><name>const</name> <name>RShape</name>&amp;</type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>s</name>.<call><name>print</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>dbg</name></expr>;</return>
    }</block></function>

    <function><type><name>static</name> <name>bool</name></type> <name>hasProxy</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>shapeProxy</name>!=<name>NULL</name></expr>;</return>
    }</block></function>

    <comment type="block">/**
     * \nonscriptable
     */</comment>
    <function><type><name>static</name> <name>void</name></type> <name>setShapeProxy</name><parameter_list>(<param><decl><type><name>RShapeProxy</name>*</type> <name>p</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>shapeProxy</name>!=<name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr>delete <name>shapeProxy</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>shapeProxy</name> = <name>p</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="block">/**
     * \nonscriptable
     */</comment>
    <function><type><name>static</name> <name>RShapeProxy</name>*</type> <name>getShapeProxy</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>shapeProxy</name></expr>;</return>
    }</block></function>

</public><private>private:
    <function_decl><type><name>static</name> <name>double</name></type> <name>ellipse2tr</name><parameter_list>(<param><decl><type><name>double</name></type> <name>x</name></decl></param>, <param><decl><type><name>double</name></type> <name>y</name></decl></param>, <param><decl><type><name>double</name></type> <name>AA</name></decl></param>, <param><decl><type><name>double</name></type> <name>BB</name></decl></param>,
                        <param><decl><type><name>double</name></type> <name>CC</name></decl></param>, <param><decl><type><name>double</name></type> <name>DD</name></decl></param>, <param><decl><type><name>double</name></type> <name>EE</name></decl></param>, <param><decl><type><name>double</name></type> <name>FF</name></decl></param>)</parameter_list>;</function_decl>

</private><private>private:
    <decl_stmt><decl><type><name>static</name> <name>double</name></type> <name>twopi</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>double</name></type> <name>epsTolerance</name></decl>;</decl_stmt>

</private><protected>protected:
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>print</name><parameter_list>(<param><decl><type><name>QDebug</name></type> <name>dbg</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <decl_stmt><decl><type><name>static</name> <name>int</name></type> <name>errorCode</name></decl>;</decl_stmt>

</protected><private>private:
    <decl_stmt><decl><type><name>static</name> <name>RShapeProxy</name>*</type> <name>shapeProxy</name></decl>;</decl_stmt>
</private>}</block>;</class>

<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RShape*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RShape::Type</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>const RShape*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>QSharedPointer&lt;RShape&gt;</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>QSharedPointer&lt;const RShape&gt;</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>QSharedPointer&lt;RShape&gt;*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>QList&lt;QSharedPointer&lt;RShape&gt; &gt;</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>QList&lt;QSharedPointer&lt;RShape&gt; &gt;*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>QList&lt;QSharedPointer&lt;const RShape&gt; &gt;</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
