<?xml version="1.0"?>
<unit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:rs="http://www.ribbonsoft.com">
  <class name="RHatchData"
  xsi:noNamespaceSchemaLocation="../class.xsd" isCopyable="true"
  hasShell="false" sharedPointerSupport="false" isQObject="false"
  hasStreamOperator="false" isAbstract="false" isScriptable="true">
    <baseClass name="REntityData" specifier="public" />
    <baseClass name="RPainterPathSource" specifier="public" />
    <constructor>
      <variant />
      <variant>
        <arg type="RHatchData &amp;" typeName="RHatchData"
        name="other" isConst="true" />
      </variant>
      <variant>
        <arg type="bool" typeName="bool" name="solid"
        isConst="false" />
        <arg type="double" typeName="double" name="scaleFactor"
        isConst="false" />
        <arg type="double" typeName="double" name="angle"
        isConst="false" />
        <arg type="QString &amp;" typeName="QString"
        name="patternName" isConst="true" />
      </variant>
    </constructor>
    <method name="getType" cppName="getType" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="RS::EntityType" isPureVirtual="false" />
    </method>
    <method name="operator=" cppName="operator=" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="RHatchData &amp;" isPureVirtual="false">
        <arg type="RHatchData &amp;" typeName="RHatchData"
        name="other" isConst="true" />
      </variant>
    </method>
    <method name="clearBoundary" cppName="clearBoundary"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false" />
    </method>
    <method name="hasCustomPattern" cppName="hasCustomPattern"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="getCustomPattern" cppName="getCustomPattern"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RPattern" isPureVirtual="false" />
    </method>
    <method name="cloneOnChange" cppName="cloneOnChange"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="getBoundingBox" cppName="getBoundingBox"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="RBox" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="ignoreEmpty"
        hasDefault="true" default="false" isConst="false" />
      </variant>
    </method>
    <method name="getPointOnEntity" cppName="getPointOnEntity"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false" />
    </method>
    <method name="getDistanceTo" cppName="getDistanceTo"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="point"
        isConst="true" />
        <arg type="bool" typeName="bool" name="limited"
        hasDefault="true" default="true" isConst="false" />
        <arg type="double" typeName="double" name="range"
        hasDefault="true" default="0.0" isConst="false" />
        <arg type="bool" typeName="bool" name="draft"
        hasDefault="true" default="false" isConst="false" />
        <arg type="double" typeName="double" name="strictRange"
        hasDefault="true" default="RMAXDOUBLE" isConst="false" />
      </variant>
    </method>
    <method name="intersectsWith" cppName="intersectsWith"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RShape &amp;" typeName="RShape" name="shape"
        isConst="true" />
      </variant>
    </method>
    <method name="getReferencePoints" cppName="getReferencePoints"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RRefPoint &gt;"
      isPureVirtual="false">
        <arg type="RS::ProjectionRenderingHint"
        typeName="RS::ProjectionRenderingHint" name="hint"
        hasDefault="true" default="RS :: RenderTop"
        isConst="false" />
      </variant>
    </method>
    <method name="moveReferencePoint" cppName="moveReferencePoint"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector"
        name="referencePoint" isConst="true" />
        <arg type="RVector &amp;" typeName="RVector"
        name="targetPoint" isConst="true" />
        <arg type="Qt::KeyboardModifiers"
        typeName="Qt::KeyboardModifiers" name="modifiers"
        hasDefault="true" default="Qt :: NoModifier"
        isConst="false" />
      </variant>
    </method>
    <method name="move" cppName="move" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="offset"
        isConst="true" />
      </variant>
    </method>
    <method name="rotate" cppName="rotate" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="double" typeName="double" name="rotation"
        isConst="false" />
        <arg type="RVector &amp;" typeName="RVector" name="center"
        hasDefault="true" default="RDEFAULT_RVECTOR"
        isConst="true" />
      </variant>
    </method>
    <method name="scale" cppName="scale" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector"
        name="scaleFactors" isConst="true" />
        <arg type="RVector &amp;" typeName="RVector" name="center"
        hasDefault="true" default="RDEFAULT_RVECTOR"
        isConst="true" />
      </variant>
    </method>
    <method name="mirror" cppName="mirror" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RLine &amp;" typeName="RLine" name="axis"
        isConst="true" />
      </variant>
    </method>
    <method name="stretch" cppName="stretch" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RPolyline &amp;" typeName="RPolyline"
        name="area" isConst="true" />
        <arg type="RVector &amp;" typeName="RVector" name="offset"
        isConst="true" />
      </variant>
    </method>
    <method name="castToShape" cppName="castToShape"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="RShape *" isPureVirtual="false" />
    </method>
    <method name="getShapes" cppName="getShapes" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="QList &lt; QSharedPointer &lt; RShape &gt; &gt;"
      isPureVirtual="false">
        <arg type="RBox &amp;" typeName="RBox" name="queryBox"
        hasDefault="true" default="RDEFAULT_RBOX" isConst="true" />
        <arg type="bool" typeName="bool" name="ignoreComplex"
        hasDefault="true" default="false" isConst="false" />
        <arg type="bool" typeName="bool" name="segment"
        hasDefault="true" default="false" isConst="false" />
      </variant>
    </method>
    <method name="getExploded" cppName="getExploded"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; QSharedPointer &lt; RShape &gt; &gt;"
      isPureVirtual="false" />
    </method>
    <method name="isSolid" cppName="isSolid" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="setSolid" cppName="setSolid" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="on"
        isConst="false" />
      </variant>
    </method>
    <method name="getScale" cppName="getScale" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="setScale" cppName="setScale" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="double" typeName="double" name="s"
        isConst="false" />
      </variant>
    </method>
    <method name="getAngle" cppName="getAngle" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="setAngle" cppName="setAngle" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="double" typeName="double" name="a"
        isConst="false" />
      </variant>
    </method>
    <method name="getOriginPoint" cppName="getOriginPoint"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false" />
    </method>
    <method name="setOriginPoint" cppName="setOriginPoint"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="op"
        isConst="true" />
      </variant>
    </method>
    <method name="getPatternName" cppName="getPatternName"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QString" isPureVirtual="false" />
    </method>
    <method name="setPatternName" cppName="setPatternName"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="QString &amp;" typeName="QString" name="n"
        isConst="true" />
      </variant>
    </method>
    <method name="clearCustomPattern" cppName="clearCustomPattern"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false" />
    </method>
    <method name="newLoop" cppName="newLoop" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false" />
    </method>
    <method name="cancelLoop" cppName="cancelLoop"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false" />
    </method>
    <method name="addBoundary" cppName="addBoundary"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="QSharedPointer &lt; RShape &gt;"
        typeName="QSharedPointer &lt; RShape &gt;" name="shape"
        isConst="false" />
        <arg type="bool" typeName="bool" name="addAutoLoops"
        hasDefault="true" default="true" isConst="false" />
      </variant>
    </method>
    <method name="getBoundaryPath" cppName="getBoundaryPath"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RPainterPath" isPureVirtual="false">
        <arg type="double" typeName="double" name="pixelSizeHint"
        hasDefault="true" default="RDEFAULT_MIN1"
        isConst="false" />
      </variant>
    </method>
    <method name="getPainterPaths" cppName="getPainterPaths"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RPainterPath &gt;"
      isPureVirtual="false">
        <arg type="bool" typeName="bool" name="draft"
        hasDefault="true" default="false" isConst="false" />
        <arg type="double" typeName="double" name="pixelSizeHint"
        hasDefault="true" default="RDEFAULT_MIN1"
        isConst="false" />
      </variant>
    </method>
    <method name="getBoundary" cppName="getBoundary"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; QList &lt; QSharedPointer &lt; RShape &gt; &gt; &gt;"
      isPureVirtual="false" />
    </method>
    <method name="update" cppName="update" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false" />
    </method>
    <method name="order" cppName="order" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="getLoopCount" cppName="getLoopCount"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="int" isPureVirtual="false" />
    </method>
    <method name="getLoopBoundary" cppName="getLoopBoundary"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; QSharedPointer &lt; RShape &gt; &gt;"
      isPureVirtual="false">
        <arg type="int" typeName="int" name="index"
        isConst="false" />
      </variant>
    </method>
    <method name="getBoundaryAsPolylines"
    cppName="getBoundaryAsPolylines" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="QList &lt; RPolyline &gt;"
      isPureVirtual="false">
        <arg type="double" typeName="double" name="segmentLength"
        isConst="false" />
      </variant>
    </method>
    <method name="getComplexity" cppName="getComplexity"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="int" isPureVirtual="false" />
    </method>
    <method name="setPattern" cppName="setPattern"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RPattern &amp;" typeName="RPattern" name="p"
        isConst="true" />
      </variant>
    </method>
    <method name="hasProxy" cppName="hasProxy" specifier="public"
    isStatic="true" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="getSegments" cppName="getSegments"
    specifier="protected" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RLine &gt;"
      isPureVirtual="false">
        <arg type="RLine &amp;" typeName="RLine" name="line"
        isConst="true" />
      </variant>
    </method>
  </class>
</unit>
