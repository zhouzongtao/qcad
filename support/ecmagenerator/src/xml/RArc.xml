<?xml version="1.0"?>
<unit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:rs="http://www.ribbonsoft.com">
  <class_decl name="RBox" />
  <class_decl name="RPolyline" />
  <class name="RArc" xsi:noNamespaceSchemaLocation="../class.xsd"
  isCopyable="true" hasShell="false" sharedPointerSupport="true"
  isQObject="false" hasStreamOperator="true" isAbstract="false"
  isScriptable="true">
    <baseClass name="RShape" specifier="public" />
    <constructor>
      <variant />
      <variant>
        <arg type="double" typeName="double" name="cx"
        isConst="false" />
        <arg type="double" typeName="double" name="cy"
        isConst="false" />
        <arg type="double" typeName="double" name="radius"
        isConst="false" />
        <arg type="double" typeName="double" name="startAngle"
        isConst="false" />
        <arg type="double" typeName="double" name="endAngle"
        isConst="false" />
        <arg type="bool" typeName="bool" name="reversed"
        hasDefault="true" default="false" isConst="false" />
      </variant>
      <variant>
        <arg type="RVector &amp;" typeName="RVector" name="center"
        isConst="true" />
        <arg type="double" typeName="double" name="radius"
        isConst="false" />
        <arg type="double" typeName="double" name="startAngle"
        isConst="false" />
        <arg type="double" typeName="double" name="endAngle"
        isConst="false" />
        <arg type="bool" typeName="bool" name="reversed"
        hasDefault="true" default="false" isConst="false" />
      </variant>
    </constructor>
    <method name="getShapeType" cppName="getShapeType"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="RShape::Type" isPureVirtual="false" />
    </method>
    <method name="clone" cppName="clone" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="RArc *" isPureVirtual="false" />
    </method>
    <method name="isDirected" cppName="isDirected"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="setZ" cppName="setZ" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="double" typeName="double" name="z"
        isConst="false" />
      </variant>
    </method>
    <method name="getVectorProperties"
    cppName="getVectorProperties" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="QList &lt; RVector &gt;"
      isPureVirtual="false" />
    </method>
    <method name="getDoubleProperties"
    cppName="getDoubleProperties" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="QList &lt; double &gt;"
      isPureVirtual="false" />
    </method>
    <method name="getBoolProperties" cppName="getBoolProperties"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; bool &gt;"
      isPureVirtual="false" />
    </method>
    <method name="isValid" cppName="isValid" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="isFullCircle" cppName="isFullCircle"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="double" typeName="double" name="tolerance"
        hasDefault="true" default="RS :: AngleTolerance"
        isConst="false" />
      </variant>
    </method>
    <method name="createFrom3Points" cppName="createFrom3Points"
    specifier="public" isStatic="true" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RArc" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector"
        name="startPoint" isConst="true" />
        <arg type="RVector &amp;" typeName="RVector" name="point"
        isConst="true" />
        <arg type="RVector &amp;" typeName="RVector"
        name="endPoint" isConst="true" />
      </variant>
    </method>
    <method name="createFrom2PBulge" cppName="createFrom2PBulge"
    specifier="public" isStatic="true" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RArc" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector"
        name="startPoint" isConst="true" />
        <arg type="RVector &amp;" typeName="RVector"
        name="endPoint" isConst="true" />
        <arg type="double" typeName="double" name="bulge"
        isConst="false" />
      </variant>
    </method>
    <method name="createTangential" cppName="createTangential"
    specifier="public" isStatic="true" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RArc" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector"
        name="startPoint" isConst="true" />
        <arg type="RVector &amp;" typeName="RVector" name="pos"
        isConst="true" />
        <arg type="double" typeName="double" name="direction"
        isConst="false" />
        <arg type="double" typeName="double" name="radius"
        isConst="false" />
      </variant>
    </method>
    <method name="createBiarc" cppName="createBiarc"
    specifier="public" isStatic="true" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RArc &gt;"
      isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector"
        name="startPoint" isConst="true" />
        <arg type="double" typeName="double" name="startDirection"
        isConst="false" />
        <arg type="RVector &amp;" typeName="RVector"
        name="endPoint" isConst="true" />
        <arg type="double" typeName="double" name="endDirection"
        isConst="false" />
        <arg type="bool" typeName="bool" name="secondTry"
        hasDefault="true" default="false" isConst="false" />
      </variant>
    </method>
    <method name="getBoundingBox" cppName="getBoundingBox"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="RBox" isPureVirtual="false" />
    </method>
    <method name="getEndPoints" cppName="getEndPoints"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RVector &gt;"
      isPureVirtual="false" />
    </method>
    <method name="getMiddlePoints" cppName="getMiddlePoints"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RVector &gt;"
      isPureVirtual="false" />
    </method>
    <method name="getCenterPoints" cppName="getCenterPoints"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RVector &gt;"
      isPureVirtual="false" />
    </method>
    <method name="getArcReferencePoints"
    cppName="getArcReferencePoints" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="QList &lt; RVector &gt;"
      isPureVirtual="false" />
    </method>
    <method name="getPointsWithDistanceToEnd"
    cppName="getPointsWithDistanceToEnd" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="QList &lt; RVector &gt;"
      isPureVirtual="false">
        <arg type="double" typeName="double" name="distance"
        isConst="false" />
        <arg type="int" typeName="int" name="from"
        hasDefault="true" default="RS :: FromAny"
        isConst="false" />
      </variant>
    </method>
    <method name="getPointCloud" cppName="getPointCloud"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RVector &gt;"
      isPureVirtual="false">
        <arg type="double" typeName="double" name="segmentLength"
        isConst="false" />
      </variant>
    </method>
    <method name="getVectorTo" cppName="getVectorTo"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="point"
        isConst="true" />
        <arg type="bool" typeName="bool" name="limited"
        hasDefault="true" default="true" isConst="false" />
        <arg type="double" typeName="double" name="strictRange"
        hasDefault="true" default="RMAXDOUBLE" isConst="false" />
      </variant>
    </method>
    <method name="getCenter" cppName="getCenter" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false" />
    </method>
    <method name="setCenter" cppName="setCenter" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="vector"
        isConst="true" />
      </variant>
    </method>
    <method name="getRadius" cppName="getRadius" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="setRadius" cppName="setRadius" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="double" typeName="double" name="radius"
        isConst="false" />
      </variant>
    </method>
    <method name="getStartAngle" cppName="getStartAngle"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="setStartAngle" cppName="setStartAngle"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="double" typeName="double" name="startAngle"
        isConst="false" />
      </variant>
    </method>
    <method name="getEndAngle" cppName="getEndAngle"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="setEndAngle" cppName="setEndAngle"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="double" typeName="double" name="endAngle"
        isConst="false" />
      </variant>
    </method>
    <method name="isReversed" cppName="isReversed"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="setReversed" cppName="setReversed"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="reversed"
        isConst="false" />
      </variant>
    </method>
    <method name="getAngleLength" cppName="getAngleLength"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="allowForZeroLength"
        hasDefault="true" default="false" isConst="false" />
      </variant>
    </method>
    <method name="isAngleWithinArc" cppName="isAngleWithinArc"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="double" typeName="double" name="a"
        isConst="false" />
      </variant>
    </method>
    <method name="getDiameter" cppName="getDiameter"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="setDiameter" cppName="setDiameter"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="double" typeName="double" name="d"
        isConst="false" />
      </variant>
    </method>
    <method name="setLength" cppName="setLength" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="double" typeName="double" name="l"
        isConst="false" />
      </variant>
    </method>
    <method name="getArea" cppName="getArea" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="setArea" cppName="setArea" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="double" typeName="double" name="a"
        isConst="false" />
      </variant>
    </method>
    <method name="getChordArea" cppName="getChordArea"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="getDirection1" cppName="getDirection1"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="getDirection2" cppName="getDirection2"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="getSideOfPoint" cppName="getSideOfPoint"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="RS::Side" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="point"
        isConst="true" />
      </variant>
    </method>
    <method name="getSweep" cppName="getSweep" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="setSweep" cppName="setSweep" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="double" typeName="double" name="s"
        isConst="false" />
      </variant>
    </method>
    <method name="getLength" cppName="getLength" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="getStartPoint" cppName="getStartPoint"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false" />
    </method>
    <method name="getEndPoint" cppName="getEndPoint"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false" />
    </method>
    <method name="getPointAtAngle" cppName="getPointAtAngle"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false">
        <arg type="double" typeName="double" name="a"
        isConst="false" />
      </variant>
    </method>
    <method name="getAngleAt" cppName="getAngleAt"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false">
        <arg type="double" typeName="double" name="distance"
        isConst="false" />
        <arg type="RS::From" typeName="RS::From" name="from"
        hasDefault="true" default="RS :: FromStart"
        isConst="false" />
      </variant>
    </method>
    <method name="getMiddlePoint" cppName="getMiddlePoint"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false" />
    </method>
    <method name="moveStartPoint" cppName="moveStartPoint"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="pos"
        isConst="true" />
      </variant>
    </method>
    <method name="moveEndPoint" cppName="moveEndPoint"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="pos"
        isConst="true" />
      </variant>
    </method>
    <method name="moveMiddlePoint" cppName="moveMiddlePoint"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="pos"
        isConst="true" />
      </variant>
    </method>
    <method name="getBulge" cppName="getBulge" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="move" cppName="move" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="offset"
        isConst="true" />
      </variant>
    </method>
    <method name="rotate" cppName="rotate" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="double" typeName="double" name="rotation"
        isConst="false" />
        <arg type="RVector &amp;" typeName="RVector" name="center"
        hasDefault="true" default="RDEFAULT_RVECTOR"
        isConst="true" />
      </variant>
    </method>
    <method name="scale" cppName="scale" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector"
        name="scaleFactors" isConst="true" />
        <arg type="RVector &amp;" typeName="RVector" name="center"
        hasDefault="true" default="RDEFAULT_RVECTOR"
        isConst="true" />
      </variant>
    </method>
    <method name="mirror" cppName="mirror" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RLine &amp;" typeName="RLine" name="axis"
        isConst="true" />
      </variant>
    </method>
    <method name="reverse" cppName="reverse" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="stretch" cppName="stretch" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RPolyline &amp;" typeName="RPolyline"
        name="area" isConst="true" />
        <arg type="RVector &amp;" typeName="RVector" name="offset"
        isConst="true" />
      </variant>
    </method>
    <method name="getTransformed" cppName="getTransformed"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QSharedPointer &lt; RShape &gt;"
      isPureVirtual="false">
        <arg type="QTransform &amp;" typeName="QTransform"
        name="transform" isConst="true" />
      </variant>
    </method>
    <method name="getTrimEnd" cppName="getTrimEnd"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="RS::Ending" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector"
        name="trimPoint" isConst="true" />
        <arg type="RVector &amp;" typeName="RVector"
        name="clickPoint" isConst="true" />
      </variant>
    </method>
    <method name="trimStartPoint" cppName="trimStartPoint"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="double" typeName="double" name="trimDist"
        isConst="false" />
      </variant>
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector"
        name="trimPoint" isConst="true" />
        <arg type="RVector &amp;" typeName="RVector"
        name="clickPoint" hasDefault="true"
        default="RVector :: invalid" isConst="true" />
        <arg type="bool" typeName="bool" name="extend"
        hasDefault="true" default="false" isConst="false" />
      </variant>
    </method>
    <method name="trimEndPoint" cppName="trimEndPoint"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="double" typeName="double" name="trimDist"
        isConst="false" />
      </variant>
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector"
        name="trimPoint" isConst="true" />
        <arg type="RVector &amp;" typeName="RVector"
        name="clickPoint" hasDefault="true"
        default="RVector :: invalid" isConst="true" />
        <arg type="bool" typeName="bool" name="extend"
        hasDefault="true" default="false" isConst="false" />
      </variant>
    </method>
    <method name="getDistanceFromStart"
    cppName="getDistanceFromStart" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="p"
        isConst="true" />
      </variant>
    </method>
    <method name="approximateWithLines"
    cppName="approximateWithLines" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="RPolyline" isPureVirtual="false">
        <arg type="double" typeName="double" name="segmentLength"
        isConst="false" />
        <arg type="double" typeName="double" name="angle"
        hasDefault="true" default="0.0" isConst="false" />
      </variant>
    </method>
    <method name="approximateWithLinesTan"
    cppName="approximateWithLinesTan" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="RPolyline" isPureVirtual="false">
        <arg type="double" typeName="double" name="segmentLength"
        isConst="false" />
        <arg type="double" typeName="double" name="angle"
        hasDefault="true" default="0.0" isConst="false" />
      </variant>
    </method>
    <method name="getTangents" cppName="getTangents"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RLine &gt;"
      isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="point"
        isConst="true" />
      </variant>
    </method>
    <method name="getOffsetShapes" cppName="getOffsetShapes"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; QSharedPointer &lt; RShape &gt; &gt;"
      isPureVirtual="false">
        <arg type="double" typeName="double" name="distance"
        isConst="false" />
        <arg type="int" typeName="int" name="number"
        isConst="false" />
        <arg type="RS::Side" typeName="RS::Side" name="side"
        isConst="false" />
        <arg type="RVector &amp;" typeName="RVector"
        name="position" hasDefault="true"
        default="RVector :: invalid" isConst="true" />
      </variant>
    </method>
    <method name="splitAt" cppName="splitAt" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="QList &lt; QSharedPointer &lt; RShape &gt; &gt;"
      isPureVirtual="false">
        <arg type="QList &lt; RVector &gt; &amp;"
        typeName="QList &lt; RVector &gt;" name="points"
        isConst="true" />
      </variant>
    </method>
    <method name="splitAtQuadrantLines"
    cppName="splitAtQuadrantLines" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="QList &lt; RArc &gt;"
      isPureVirtual="false" />
    </method>
    <method name="print" cppName="print" specifier="protected"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="QDebug" typeName="QDebug" name="dbg"
        isConst="false" />
      </variant>
    </method>
    <property name="center" type="RVector" cppGetter="getCenter"
    cppSetter="setCenter" />
    <property name="radius" type="double" cppGetter="getRadius"
    cppSetter="setRadius" />
    <property name="startAngle" type="double"
    cppGetter="getStartAngle" cppSetter="setStartAngle" />
    <property name="endAngle" type="double" cppGetter="getEndAngle"
    cppSetter="setEndAngle" />
    <property name="reversed" type="bool" cppGetter="isReversed"
    cppSetter="setReversed" />
  </class>
</unit>
